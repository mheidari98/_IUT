;  #include <myheader.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;  #include <i2c_e.h>
;  #include <mandala2.h>
;
;volatile eeprom char data_rec[512];
;
;/* read a byte from the EEPROM */
;unsigned char eeprom_read(unsigned int address)
; 0007 0009 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0007 000A unsigned char data;
; 0007 000B i2c_start();
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	address -> Y+1
;	data -> R17
;PCODE: $00000011 VOL: 0
; 0007 000C i2c_write(EEPROM_BUS_ADDRESS | 0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0007 000D /* send MSB of address */
; 0007 000E i2c_write(address >> 8);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0007 000F /* send LSB of address */
; 0007 0010 i2c_write((unsigned char) address);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0007 0011 i2c_start();
;PCODE: $00000018 VOL: 0
; 0007 0012 i2c_write(EEPROM_BUS_ADDRESS | 1);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0007 0013 data=i2c_read(0);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0007 0014 i2c_stop();
;PCODE: $0000001E VOL: 0
; 0007 0015 return data;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0007 0016 }
;PCODE: $00000024 VOL: 0
;
;/*********************************************/
;/* read a byte from the EEPROM */
;unsigned char eeprom_read_frame(unsigned int address,int num)
; 0007 001B {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0007 001C int i,j;
; 0007 001D 
; 0007 001E unsigned char data;
; 0007 001F 
; 0007 0020 if (address!=0)j=4;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;	address -> Y+8
;	num -> Y+6
;	i -> R16,R17
;	j -> R18,R19
;	data -> R21
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0007 0021 else j=0;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0007 0022 
; 0007 0023 i2c_start();
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0007 0024 i2c_write(EEPROM_BUS_ADDRESS | 0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0007 0025 /* send MSB of address */
; 0007 0026 i2c_write(address >> 8);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0007 0027 /* send LSB of address */
; 0007 0028 //i2c_write((unsigned char) address);
; 0007 0029 i2c_write( address&0x00ff);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0007 002A i2c_start();
;PCODE: $0000003C VOL: 0
; 0007 002B i2c_write(EEPROM_BUS_ADDRESS | 1);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0007 002C for(i=j;i<num;i++)
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0007 002D {
; 0007 002E if(i==(num-1))data_rec[i]=i2c_read(0);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0007 002F else data_rec[i]=i2c_read(1);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0007 0030 data=data_rec[i];
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0007 0031 }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0007 0032 i2c_stop();
;PCODE: $00000066 VOL: 0
; 0007 0033 return data;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0007 0034 }
;PCODE: $0000006B VOL: 0
;/*************************************/
;
;/* write a byte to the EEPROM */
;void eeprom_write(unsigned int address, unsigned char data)
; 0007 0039 {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0007 003A i2c_start();
;PCODE: $0000006E VOL: 0
;	address -> Y+1
;	data -> Y+0
;PCODE: $0000006F VOL: 0
; 0007 003B i2c_write(EEPROM_BUS_ADDRESS | 0);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0007 003C /* send MSB of address */
; 0007 003D i2c_write(address >> 8);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0007 003E /* send LSB of address */
; 0007 003F i2c_write((unsigned char) address);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0007 0040 i2c_write(data);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0007 0041 i2c_stop();
;PCODE: $00000078 VOL: 0
; 0007 0042 /* 10ms delay to complete the write operation */
; 0007 0043 delay_ms(10);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0007 0044 }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;
;
;/* write a frame to the EEPROM */
;void eeprom_write_frame(unsigned int address, char *data,char num )
; 0007 0049 {
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0007 004A char i;
; 0007 004B char *ip;
; 0007 004C ip=data;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;	address -> Y+7
;	*data -> Y+5
;	num -> Y+4
;	i -> R17
;	*ip -> R18,R19
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0007 004D 
; 0007 004E i2c_start();
;PCODE: $00000085 VOL: 0
; 0007 004F i2c_write(EEPROM_BUS_ADDRESS | 0);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0007 0050 /* send MSB of address */
; 0007 0051 i2c_write(address >> 8);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0007 0052 /* send LSB of address */
; 0007 0053 i2c_write((unsigned char) address);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0007 0054 for (i=0;i<num;i++)
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0007 0055 {
; 0007 0056 i2c_write(*(ip+i));
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0007 0057 }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0007 0058 i2c_stop();
;PCODE: $0000009F VOL: 0
; 0007 0059 /* 10ms delay to complete the write operation */
; 0007 005A delay_ms(10);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0007 005B }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;
;
;void eeprom_write_pic(unsigned int address )
; 0007 005F {
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0007 0060 char i;
; 0007 0061 
; 0007 0062 
; 0007 0063 
; 0007 0064 i2c_start();
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;	address -> Y+1
;	i -> R17
;PCODE: $000000AB VOL: 0
; 0007 0065 i2c_write(EEPROM_BUS_ADDRESS | 0);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0007 0066 //I2C_Write2(EEPROM_BUS_ADDRESS | 0);
; 0007 0067 
; 0007 0068 /* send MSB of address */
; 0007 0069 i2c_write(address >> 8);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0007 006A /* send LSB of address */
; 0007 006B i2c_write((unsigned char) address);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0007 006C for (i=0;i<16;i++)
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0007 006D {
; 0007 006E i2c_write(mandalapic[i+address]);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0007 006F 
; 0007 0070 }
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0007 0071 i2c_stop();
;PCODE: $000000C7 VOL: 0
; 0007 0072 /* 10ms delay to complete the write operation */
; 0007 0073 delay_ms(10);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0007 0074 }
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;
;
;void i2c_24lc32(void)
; 0007 0078 {
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0007 0079 unsigned char j;
; 0007 007A  char data[]={1,2,3};
; 0007 007B 
; 0007 007C i2c_init();
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;	j -> R17
;	data -> Y+1
;PCODE: $000000DA VOL: 0
; 0007 007D 
; 0007 007E 
; 0007 007F 
; 0007 0080 
; 0007 0081 
; 0007 0082 
; 0007 0083 /* write the byte 55h at address AAh */
; 0007 0084 eeprom_write(0xaa,data[0]);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0007 0085 eeprom_write(0xab,data[1]);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0007 0086 eeprom_write(0xac,data[2]);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0007 0087 
; 0007 0088 
; 0007 0089 /* read the byte from address AAh */
; 0007 008A j=eeprom_read(0xaa);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0007 008B j=eeprom_read(0xab);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0007 008C j=eeprom_read(0xac);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0007 008D }
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;
;
;void i2c_24lc32_frame(void)
; 0007 0091 {
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0007 0092 int i;
; 0007 0093 long int data2;
; 0007 0094 
; 0007 0095 
; 0007 0096 i2c_init();
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;	i -> R16,R17
;	data2 -> Y+2
;PCODE: $000000FD VOL: 0
; 0007 0097 
; 0007 0098 for (i=0;i<64;i++)
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0007 0099 {
; 0007 009A data2=i*0x0010;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0007 009B eeprom_write_pic(data2);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0007 009C }
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0007 009D }
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;
;
;void i2c_24lc32_read_frame(void)
; 0007 00A1 {
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0007 00A2  int i;
; 0007 00A3  char scr[20];
; 0007 00A4 
; 0007 00A5 glcd_clear();
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;	i -> R16,R17
;	scr -> Y+2
;PCODE: $0000011E VOL: 0
; 0007 00A6 
; 0007 00A7 eeprom_read_frame(0,512);  //4  508
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0007 00A8 glcd_putimagee(4,0,data_rec,GLCD_PUTCOPY);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0007 00A9 
; 0007 00AA eeprom_read_frame(516,512);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0007 00AB glcd_putimagee(4,32,data_rec,GLCD_PUTCOPY);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0007 00AC }
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;
;
;/*************************************/
;void i2c_24lc32_read_byte(void)
; 0007 00B1 {
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0007 00B2  char i;
; 0007 00B3  char data=0xff;
; 0007 00B4  char scr[20];
; 0007 00B5  for (i=0;i<1024;i++)
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;	i -> R17
;	data -> R16
;	scr -> Y+2
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0007 00B6  {
; 0007 00B7  data=eeprom_read(i);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0007 00B8  if (data !=mandalapic[i])
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0007 00B9   {
; 0007 00BA     sprintf(scr,"error [%d]=%d\r\n",i,data);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0007 00BB     puts(scr);
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0007 00BC 
; 0007 00BD     }
; 0007 00BE     }
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0007 00BF 
; 0007 00C0 
; 0007 00C1 }
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;
;void i2c_24lc32_read_byte2(void)
; 0007 00C4 {
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0007 00C5  int i;
; 0007 00C6  char data=0xff;
; 0007 00C7  char scr[20];
; 0007 00C8  for (i=0;i<512;i++)
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;	i -> R16,R17
;	data -> R19
;	scr -> Y+4
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0007 00C9  {
; 0007 00CA  data_rec[i]=eeprom_read(i);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0007 00CB  if (data_rec[i] ==mandalapic[i])
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0007 00CC   {
; 0007 00CD     sprintf(scr,"error [%d]=%d--%d\r\n",i,data_rec[i],mandalapic[i]);
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0007 00CE     puts(scr);
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0007 00CF 
; 0007 00D0     }
; 0007 00D1     }
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0007 00D2      sprintf(scr,"data correct\r\n");
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0007 00D3     puts(scr);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0007 00D4 
; 0007 00D5  for (i=512;i<1024;i++)
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0007 00D6  {
; 0007 00D7  data_rec[i]=eeprom_read(i+512);
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0007 00D8  if (data_rec[i] ==mandalapic[i+512])
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0007 00D9   {
; 0007 00DA     sprintf(scr,"error [%d]=%d--%d\r\n",i,data_rec[i],mandalapic[i+512]);
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0007 00DB     puts(scr);
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0007 00DC 
; 0007 00DD     }
; 0007 00DE     }
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0007 00DF 
; 0007 00E0       sprintf(scr,"data correct\r\n");
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0007 00E1     puts(scr);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0007 00E2 }
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;
;
;
;/*
;Programming steps in the master device
;
;    Initialize I2C.
;    Generate START condition.
;    Write device Write address (SLA+W) and check for acknowledgement.
;    After acknowledgement write data to slave device.
;    Generate REPEATED START condition with SLA+R.
;    Receive data from slave device.
;
;
;Programming steps in slave device
;
;    Initialize I2C with slave device address.
;    Listen to bus for get addressed by master.
;    While addressed with SLA+W by master device, receive data from master device.
;    Return acknowledgement after each byte received.
;    Clear interrupt flag after REPEATED START/STOP received.
;    Print received data on LCD.
;    Again listen to bus for get addressed by master.
;    While addressed with SLA+R by master device, transmit data to master device.
;    Transmit data till NACK/REPEATED START/STOP receive from master.
;    Clear interrupt flag after NACK/REPEATED START/STOP received.
;
;
;    https://www.avrfreaks.net/forum/twi-module-seems-buggy-multi-master-communications
;*/
;
;
