;
;#include <myheader.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <i2c_e.h>
;#include <mandala2.h>
;#include <glcdf.h>
;
;void main(void)
; 0000 0008 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0009 
; 0000 000A 
; 0000 000B     int i;
; 0000 000C     char buffer[12];
; 0000 000D 
; 0000 000E     port_init();
;PCODE: $0000000E VOL: 0
;	i -> R16,R17
;	buffer -> Y+0
;PCODE: $0000000F VOL: 0
; 0000 000F     spi_init();
;PCODE: $00000010 VOL: 0
; 0000 0010     uart_init();
;PCODE: $00000011 VOL: 0
; 0000 0011 
; 0000 0012 
; 0000 0013 
; 0000 0014     puts("Hello,  Welcome to last online class in 1399\r\n           ***     MASTER MICRO    ***\r\r\r\n");
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0015     adc_init_no_intterupt();
;PCODE: $00000015 VOL: 0
; 0000 0016 
; 0000 0017 
; 0000 0018     #asm("sei")
;PCODE: $00000016 VOL: 0
	sei
;PCODE: $00000017 VOL: 0
; 0000 0019 
; 0000 001A 
; 0000 001B     glcddisplay();
;PCODE: $00000018 VOL: 0
; 0000 001C     delay_ms(1000);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 001D 
; 0000 001E     puts("W EEPROM\r\n");
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 001F     i2c_24lc32_frame();   //write to eeprom
;PCODE: $0000001E VOL: 0
; 0000 0020 
; 0000 0021     puts("R EEPROM\r\n");
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0022     puts("Display\r\n");
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0023 
; 0000 0024     i2c_24lc32_read_frame();  //read eeprom
;PCODE: $00000025 VOL: 0
; 0000 0025 
; 0000 0026 
; 0000 0027     while (1)
;PCODE: $00000026 VOL: 0
; 0000 0028     {
; 0000 0029         I2C_Init2();
;PCODE: $00000027 VOL: 0
; 0000 002A         puts( "\r\n Sending :       ");
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002B         I2C_Start_Wait(Slave_Write_Address);/* Start I2C communication with SLA+W */
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 002C 		delay_ms(5);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 002D 		for ( i = 0; i < count ; i++)
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 002E 		{
; 0000 002F 			sprintf(buffer, "%d    ",i);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0030 			puts(buffer);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0031 			I2C_Write2(i);					/* Send Incrementing count */
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0032 			delay_ms(500);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0033 		}
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0034 		puts("\r\n Receiving :       ");
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0035 		I2C_Repeated_Start(Slave_Read_Address);	/* Repeated Start I2C communication with SLA+R */
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0036 		delay_ms(5);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0037 		for ( i = 0; i < count; i++)
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0038 		{
; 0000 0039 			if(i < count - 1)
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 003A 				sprintf(buffer, "%d    ", I2C_Read_Ack());/* Read and send Acknowledge of data */
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 003B 			else
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 003C 				sprintf(buffer, "%d    ", I2C_Read_Nack());/* Read and Not Acknowledge to data */
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 003D 			puts(buffer);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 003E 			delay_ms(500);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 003F 		}
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0040 		I2C_Stop2();   /* Stop I2C */
;PCODE: $00000088 VOL: 0
; 0000 0041         adc_send_to_spi();	// check the adc value change
;PCODE: $00000089 VOL: 0
; 0000 0042 	}
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0043 }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0

	.DSEG
_0x3:
	.BYTE 0xA3
;
;
;
