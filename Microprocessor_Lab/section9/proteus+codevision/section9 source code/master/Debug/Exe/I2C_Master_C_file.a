;/*
; * I2C_Master_C_file.c
; *
; */
;
;#include <myheader.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;							/* Include I2C header file */
;
;void I2C_Init2()												/* I2C initialize function */
; 0008 000C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0008 000D 	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0008 000E }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;
;char I2C_Start2(char write_address)						/* I2C start function */
; 0008 0012 {
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0008 0013 	char status;											/* Declare variable */
; 0008 0014 	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;	write_address -> Y+1
;	status -> R17
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0008 0015 	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0008 0016 	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0008 0017 	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0008 0018 	return 0;												/* If not then return 0 to indicate start condition fail */
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0008 0019 	TWDR = write_address;									/* If yes then write SLA+W in TWI data register */
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0008 001A 	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0008 001B 	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0008 001C 	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0008 001D 	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0008 001E 	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0008 001F 	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0008 0020 	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0008 0021 	else
;PCODE: $00000054 VOL: 0
; 0008 0022 	return 3;												/* Else return 3 to indicate SLA+W failed */
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0008 0023 }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;char I2C_Repeated_Start(char read_address)				/* I2C repeated start function */
; 0008 0026 {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0008 0027 	char status;											/* Declare variable */
; 0008 0028 	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;	read_address -> Y+1
;	status -> R17
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0008 0029 	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0008 002A 	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0008 002B 	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0008 002C 	return 0;												/* If no then return 0 to indicate repeated start condition fail */
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0008 002D 	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0008 002E 	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0008 002F 	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0008 0030 	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0008 0031 	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0008 0032 	return 1;												/* If yes then return 1 to indicate ack received */
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0008 0033 	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0008 0034 	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0008 0035 	else
;PCODE: $00000096 VOL: 0
; 0008 0036 	return 3;												/* Else return 3 to indicate SLA+W failed */
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0008 0037 }
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;
;void I2C_Stop2()												/* I2C stop function */
; 0008 003A {
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0008 003B 	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0008 003C 	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0008 003D }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;
;void I2C_Start_Wait(char write_address)						/* I2C start wait function */
; 0008 0040 {
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0008 0041 	char status;											/* Declare variable */
; 0008 0042 	while (1)
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;	write_address -> Y+1
;	status -> R17
;PCODE: $000000B3 VOL: 0
; 0008 0043 	{
; 0008 0044 		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0008 0045 		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0008 0046 		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0008 0047 		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0008 0048 		continue;											/* If no then continue with start loop again */
;PCODE: $000000C2 VOL: 0
; 0008 0049 		TWDR = write_address;								/* If yes then write SLA+W in TWI data register */
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0008 004A 		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0008 004B 		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0008 004C 		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0008 004D 		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0008 004E 		{
; 0008 004F 			//I2C_Stop();										/* If not then generate stop condition */
; 0008 0050 			i2c_stop();
;PCODE: $000000D4 VOL: 0
; 0008 0051             continue;										/* continue with start loop again */
;PCODE: $000000D5 VOL: 0
; 0008 0052 		}
; 0008 0053 		break;												/* If yes then break loop */
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0008 0054 	}
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0008 0055 }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;
;char I2C_Write2(char data)								/* I2C write function */
; 0008 0058 {
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0008 0059 	char status;											/* Declare variable */
; 0008 005A 	TWDR = data;											/* Copy data in TWI data register */
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;	data -> Y+1
;	status -> R17
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0008 005B 	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0008 005C 	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0008 005D 	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0008 005E 	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0008 005F 	return 0;												/* If yes then return 0 to indicate ack received */
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0008 0060 	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0008 0061 	return 1;												/* If yes then return 1 to indicate nack received */
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0008 0062 	else
;PCODE: $00000101 VOL: 0
; 0008 0063 	return 2;												/* Else return 2 to indicate data transmission failed */
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0008 0064 }
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;
;char I2C_Read_Ack()											/* I2C read ack function */
; 0008 0067 {
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0008 0068 	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0008 0069 	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0008 006A 	return TWDR;											/* Return received data */
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0008 006B }
;PCODE: $00000119 VOL: 0
;
;char I2C_Read_Nack()										/* I2C read nack function */
; 0008 006E {
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0008 006F 	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0008 0070 	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0008 0071 	return TWDR;											/* Return received data */
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0008 0072 }
;PCODE: $00000126 VOL: 0
