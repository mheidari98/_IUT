;/*
; * I2C_Master_C_file.c
; *
; */
;
;#include <myheader.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;
;                            /* Include I2C header file */
;
;void I2C_Init2()                                                /* I2C initialize function */
; 0006 000D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0006 000E     TWBR = BITRATE(TWSR = 0x00);                            /* Get bit rate register value by formula */
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0006 000F }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;
;char I2C_Start2(char write_address)                        /* I2C start function */
; 0006 0013 {
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0006 0014     char status;                                            /* Declare variable */
; 0006 0015     TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);                    /* Enable TWI, generate start condition and clear interru ...
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;	write_address -> Y+1
;	status -> R17
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0006 0016     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (start condition)  ...
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0006 0017     status = TWSR & 0xF8;                                    /* Read TWI status register with masking lower three bits * ...
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0006 0018     if (status != 0x08)                                        /* Check weather start condition transmitted successfully ...
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0006 0019     return 0;                                                /* If not then return 0 to indicate start condition fail */
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0006 001A     TWDR = write_address;                                    /* If yes then write SLA+W in TWI data register */
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0006 001B     TWCR = (1<<TWEN)|(1<<TWINT);                            /* Enable TWI and clear interrupt flag */
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0006 001C     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (Write operation)  ...
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0006 001D     status = TWSR & 0xF8;                                    /* Read TWI status register with masking lower three bits * ...
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0006 001E     if (status == 0x18)                                        /* Check weather SLA+W transmitted & ack received or not? ...
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0006 001F     return 1;                                                /* If yes then return 1 to indicate ack received i.e. ready ...
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0006 0020     if (status == 0x20)                                        /* Check weather SLA+W transmitted & nack received or not ...
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0006 0021     return 2;                                                /* If yes then return 2 to indicate nack received i.e. devi ...
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0006 0022     else
;PCODE: $00000054 VOL: 0
; 0006 0023     return 3;                                                /* Else return 3 to indicate SLA+W failed */
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0006 0024 }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;char I2C_Repeated_Start(char read_address)                /* I2C repeated start function */
; 0006 0027 {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0006 0028     char status;                                            /* Declare variable */
; 0006 0029     TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);                    /* Enable TWI, generate start condition and clear interru ...
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;	read_address -> Y+1
;	status -> R17
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0006 002A     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (start condition)  ...
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0006 002B     status = TWSR & 0xF8;                                    /* Read TWI status register with masking lower three bits * ...
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0006 002C     if (status != 0x10)                                        /* Check weather repeated start condition transmitted suc ...
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0006 002D     return 0;                                                /* If no then return 0 to indicate repeated start condition ...
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0006 002E     TWDR = read_address;                                    /* If yes then write SLA+R in TWI data register */
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0006 002F     TWCR = (1<<TWEN)|(1<<TWINT);                            /* Enable TWI and clear interrupt flag */
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0006 0030     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (Write operation)  ...
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0006 0031     status = TWSR & 0xF8;                                    /* Read TWI status register with masking lower three bits * ...
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0006 0032     if (status == 0x40)                                        /* Check weather SLA+R transmitted & ack received or not? ...
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0006 0033     return 1;                                                /* If yes then return 1 to indicate ack received */
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0006 0034     if (status == 0x20)                                        /* Check weather SLA+R transmitted & nack received or not ...
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0006 0035     return 2;                                                /* If yes then return 2 to indicate nack received i.e. devi ...
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0006 0036     else
;PCODE: $00000096 VOL: 0
; 0006 0037     return 3;                                                /* Else return 3 to indicate SLA+W failed */
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0006 0038 }
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;
;void I2C_Stop2()                                                /* I2C stop function */
; 0006 003B {
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0006 003C     TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);                    /* Enable TWI, generate stop condition and clear interrupt  ...
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0006 003D     while(TWCR & (1<<TWSTO));                                /* Wait until stop condition execution */
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0006 003E }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;
;void I2C_Start_Wait(char write_address)                        /* I2C start wait function */
; 0006 0041 {
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0006 0042     char status;                                            /* Declare variable */
; 0006 0043     while (1)
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;	write_address -> Y+1
;	status -> R17
;PCODE: $000000B3 VOL: 0
; 0006 0044     {
; 0006 0045         TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);                /* Enable TWI, generate start condition and clear interru ...
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0006 0046         while (!(TWCR & (1<<TWINT)));                        /* Wait until TWI finish its current job (start condition)  ...
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0006 0047         status = TWSR & 0xF8;                                /* Read TWI status register with masking lower three bits * ...
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0006 0048         if (status != 0x08)                                    /* Check weather start condition transmitted successfully ...
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0006 0049         continue;                                            /* If no then continue with start loop again */
;PCODE: $000000C2 VOL: 0
; 0006 004A         TWDR = write_address;                                /* If yes then write SLA+W in TWI data register */
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0006 004B         TWCR = (1<<TWEN)|(1<<TWINT);                        /* Enable TWI and clear interrupt flag */
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0006 004C         while (!(TWCR & (1<<TWINT)));                        /* Wait until TWI finish its current job (Write operation)  ...
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0006 004D         status = TWSR & 0xF8;                                /* Read TWI status register with masking lower three bits * ...
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0006 004E         if (status != 0x18 )                                /* Check weather SLA+W transmitted & ack received or not? */
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0006 004F         {
; 0006 0050             I2C_Stop2();                                        /* If not then generate stop condition */
;PCODE: $000000D4 VOL: 0
; 0006 0051             //i2c_stop();
; 0006 0052             continue;                                        /* continue with start loop again */
;PCODE: $000000D5 VOL: 0
; 0006 0053         }
; 0006 0054         break;                                                /* If yes then break loop */
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0006 0055     }
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0006 0056 }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;
;char I2C_Write2(char data)                                /* I2C write function */
; 0006 0059 {
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0006 005A     char status;                                            /* Declare variable */
; 0006 005B     TWDR = data;                                            /* Copy data in TWI data register */
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;	data -> Y+1
;	status -> R17
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0006 005C     TWCR = (1<<TWEN)|(1<<TWINT);                            /* Enable TWI and clear interrupt flag */
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0006 005D     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (Write operation)  ...
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0006 005E     status = TWSR & 0xF8;                                    /* Read TWI status register with masking lower three bits * ...
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0006 005F     if (status == 0x28)                                        /* Check weather data transmitted & ack received or not?  ...
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0006 0060     return 0;                                                /* If yes then return 0 to indicate ack received */
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0006 0061     if (status == 0x30)                                        /* Check weather data transmitted & nack received or not? ...
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0006 0062     return 1;                                                /* If yes then return 1 to indicate nack received */
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0006 0063     else
;PCODE: $00000101 VOL: 0
; 0006 0064     return 2;                                                /* Else return 2 to indicate data transmission failed */
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0006 0065 }
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;
;char I2C_Read_Ack()                                            /* I2C read ack function */
; 0006 0068 {
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0006 0069     TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);                    /* Enable TWI, generation of ack and clear interrupt flag */
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0006 006A     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (read operation) * ...
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0006 006B     return TWDR;                                            /* Return received data */
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0006 006C }
;PCODE: $00000119 VOL: 0
;
;char I2C_Read_Nack()                                        /* I2C read nack function */
; 0006 006F {
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0006 0070     TWCR=(1<<TWEN)|(1<<TWINT);                                /* Enable TWI and clear interrupt flag */
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0006 0071     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (read operation) * ...
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0006 0072     return TWDR;                                            /* Return received data */
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0006 0073 }
;PCODE: $00000126 VOL: 0
;
;
;
;void I2C_Slave_Init(char slave_address)
; 0006 0078 {
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0006 0079 	TWAR = slave_address;						/* Assign address in TWI address register */
;PCODE: $00000129 VOL: 0
;	slave_address -> Y+0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0006 007A 	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);	/* Enable TWI, Enable ack generation, clear TWI interrupt */
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0006 007B }
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;
;char I2C_Slave_Listen()
; 0006 007E {
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0006 007F 	while(1)
;PCODE: $00000133 VOL: 0
; 0006 0080 	{
; 0006 0081 		char status;							/* Declare variable */
; 0006 0082 		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
;PCODE: $00000134 VOL: 0
;	status -> Y+0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0006 0083 		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0006 0084 		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0006 0085 		return 0;								/* If yes then return 0 to indicate ack returned */
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0006 0086 		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0006 0087 		return 1;								/* If yes then return 1 to indicate ack returned */
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0006 0088 		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0006 0089 		return 2;								/* If yes then return 2 to indicate ack returned */
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0006 008A 		else
;PCODE: $00000161 VOL: 0
; 0006 008B 		continue;								/* Else continue */
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0006 008C 	}
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0006 008D }
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;
;char I2C_Slave_Transmit(char data)
; 0006 0090 {
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0006 0091 	char status;
; 0006 0092 	TWDR = data;								/* Write data to TWDR to be transmitted */
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;	data -> Y+1
;	status -> R17
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0006 0093 	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);		/* Enable TWI and clear interrupt flag */
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0006 0094 	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (Write operation) */
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0006 0095 	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0006 0096 	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0006 0097 	{
; 0006 0098 		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0006 0099 		return -1;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0006 009A 	}
; 0006 009B 	if (status == 0xB8)							/* Check weather data transmitted & ack received */
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0006 009C 		return 0;									/* If yes then return 0 */
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0006 009D 	if (status == 0xC0)							/* Check weather data transmitted & nack received */
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0006 009E 	{
; 0006 009F 		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -2 */
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0006 00A0 		return -2;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0006 00A1 	}
; 0006 00A2 	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0006 00A3 	return -3;									/* If yes then return -3 */
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0006 00A4 	else										/* else return -4 */
;PCODE: $000001A4 VOL: 0
; 0006 00A5 	return -4;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0006 00A6 }
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;
;char I2C_Slave_Receive()
; 0006 00A9 {
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0006 00AA 	char status;								/* Declare variable */
; 0006 00AB 	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);		/* Enable TWI, generation of ack and clear interrupt flag */
;PCODE: $000001B2 VOL: 0
;	status -> R17
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0006 00AC 	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (read operation) */
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0006 00AD 	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0006 00AE 	if (status == 0x80 || status == 0x90)		/* Check weather data received & ack returned (TWEA = 1) */
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0006 00AF 	return TWDR;								/* If yes then return received data */
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0006 00B0 	if (status == 0x88 || status == 0x98)		/* Check weather data received, nack returned and switched to not addressed slav ...
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0006 00B1 	return TWDR;								/* If yes then return received data */
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0006 00B2 	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0006 00B3 	{
; 0006 00B4 		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return 0 */
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0006 00B5 		return -1;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0006 00B6 	}
; 0006 00B7 	else
;PCODE: $000001DF VOL: 0
; 0006 00B8 	return -2;									/* Else return 1 */
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0006 00B9 }
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
