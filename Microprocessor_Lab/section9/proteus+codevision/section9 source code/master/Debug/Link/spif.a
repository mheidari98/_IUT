;
; #include <myheader.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
; int data_spi[2]={99,99};

	.DSEG
; char num_data_spi=0;
; bit new_data_spi=0;
; bit master_micro=1;
;
; void spi_init(void)
; 0003 000A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 000B // SPI initialization
; 0003 000C // SPI Type: Master
; 0003 000D // SPI Clock Rate: 2000.000 kHz
; 0003 000E // SPI Clock Phase: Cycle Start
; 0003 000F // SPI Clock Polarity: Low
; 0003 0010 // SPI Data Order: MSB First
; 0003 0011 SPCR=(1<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0003 0012 SPSR=(0<<SPI2X);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0003 0013 
; 0003 0014 // Clear the SPI interrupt flag
; 0003 0015 #asm
;PCODE: $00000013 VOL: 0
; 0003 0016     in   r30,spsr
    in   r30,spsr
;PCODE: $00000014 VOL: 0
; 0003 0017     in   r30,spdr
    in   r30,spdr
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0003 0018 #endasm
; 0003 0019 
; 0003 001A 
; 0003 001B }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; void spi_init_slave(void)
; 0003 001D {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0003 001E 
; 0003 001F 
; 0003 0020 
; 0003 0021 // SPI initialization
; 0003 0022 // SPI Type: Slave
; 0003 0023 // SPI Clock Rate: 2000.000 kHz
; 0003 0024 // SPI Clock Phase: Cycle Start
; 0003 0025 // SPI Clock Polarity: Low
; 0003 0026 // SPI Data Order: MSB First
; 0003 0027 SPCR=(1<<SPIE) | (1<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0003 0028 SPSR=(0<<SPI2X);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0003 0029 
; 0003 002A #asm
;PCODE: $0000001F VOL: 0
; 0003 002B     in   r30,spsr
    in   r30,spsr
;PCODE: $00000020 VOL: 0
; 0003 002C     in   r30,spdr
    in   r30,spdr
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0003 002D #endasm
; 0003 002E 
; 0003 002F 
; 0003 0030 
; 0003 0031 }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;interrupt [SPI_STC] void spi_isr(void)
; 0003 0034 {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0003 0035 //unsigned char data;
; 0003 0036 //data_spi[0]=SPDR;
; 0003 0037 char scr[20];
; 0003 0038 
; 0003 0039 
; 0003 003A data_spi[num_data_spi]=SPDR;
;PCODE: $00000027 VOL: 0
;	scr -> Y+0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0003 003B num_data_spi++;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0003 003C if (num_data_spi==2)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0003 003D {
; 0003 003E new_data_spi=1;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0003 003F num_data_spi=0;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0003 0040 }
; 0003 0041 if (master_micro==0)
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0003 0042 {
; 0003 0043             if (new_data_spi==1)
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0003 0044        {
; 0003 0045        sprintf(scr,"\r\n ADC0=%d apdated!! \r\n",((data_spi[0]&0x00ff)|(data_spi[1]<<8)));
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0003 0046         puts(scr);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0003 0047        new_data_spi=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0003 0048        }
; 0003 0049  }
;PCODE: $00000059 VOL: 0
; 0003 004A }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
