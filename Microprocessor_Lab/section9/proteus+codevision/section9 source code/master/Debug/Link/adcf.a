;
;
; #include <myheader.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;
;int adc_old_data=0;
;
;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
;
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0006 000F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0006 0010 static unsigned char input_index=0;
; 0006 0011 // Read the AD conversion result
; 0006 0012 adc_data[input_index]=ADCW;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0006 0013 // Select next ADC input
; 0006 0014 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0006 0015    input_index=0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0006 0016 ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0006 0017 // Delay needed for the stabilization of the ADC input voltage
; 0006 0018 delay_us(10);
;PCODE: $00000021 VOL: 0
; 0006 0019 // Start the AD conversion
; 0006 001A ADCSRA|=(1<<ADSC);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0006 001B 
; 0006 001C }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;
; void adc_send_to_spi(void)
; 0006 001F 
; 0006 0020  { char scr[20];
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0006 0021  adc_data[0]= read_adc(0);
;PCODE: $00000029 VOL: 0
;	scr -> Y+0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0006 0022  if (adc_data[0]!=  adc_old_data)
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0006 0023 {
; 0006 0024     SPDR=adc_data[0]&0x00ff;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0006 0025     delay_ms(10);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0006 0026     SPDR=adc_data[0]>>8;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0006 0027     adc_old_data=adc_data[0];
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0006 0028     sprintf(scr,"\r\n ADC0=%d\r\n",adc_old_data);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0006 0029     puts(scr);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0006 002A }
; 0006 002B }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;
;
;
;
;void adc_init_no_intterupt(void)
; 0006 0031 {
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0006 0032 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0006 0033 ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0006 0034 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0006 0035 
; 0006 0036 }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;
;
;void adc_init_interrupt(void)
; 0006 003A {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0006 003B ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0006 003C ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0006 003D SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0006 003E 
; 0006 003F }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;
;
;
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0006 0046 {
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0006 0047 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000063 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0006 0048 // Delay needed for the stabilization of the ADC input voltage
; 0006 0049 delay_us(10);
;PCODE: $00000067 VOL: 0
; 0006 004A // Start the AD conversion
; 0006 004B ADCSRA|=(1<<ADSC);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0006 004C // Wait for the AD conversion to complete
; 0006 004D while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0006 004E ADCSRA|=(1<<ADIF);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0006 004F return ADCW;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0006 0050 }
;PCODE: $00000075 VOL: 0
