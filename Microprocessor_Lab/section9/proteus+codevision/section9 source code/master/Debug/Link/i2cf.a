;  #include <myheader.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;  #include <mandala2.h>
;
;volatile eeprom char data_rec[512];
;
;/* read a byte from the EEPROM */
;unsigned char eeprom_read(unsigned int address)
; 0001 0008 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0009 unsigned char data;
; 0001 000A i2c_start();
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	address -> Y+1
;	data -> R17
;PCODE: $00000011 VOL: 0
; 0001 000B i2c_write(EEPROM_BUS_ADDRESS | 0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0001 000C /* send MSB of address */
; 0001 000D i2c_write(address >> 8);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 000E /* send LSB of address */
; 0001 000F i2c_write((unsigned char) address);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0001 0010 i2c_start();
;PCODE: $00000018 VOL: 0
; 0001 0011 i2c_write(EEPROM_BUS_ADDRESS | 1);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 0012 data=i2c_read(0);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0001 0013 i2c_stop();
;PCODE: $0000001E VOL: 0
; 0001 0014 return data;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0001 0015 }
;PCODE: $00000024 VOL: 0
;
;/*********************************************/
;/* read a byte from the EEPROM */
;unsigned char eeprom_read_frame(unsigned int address,int num)
; 0001 001A {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 001B int i,j;
; 0001 001C 
; 0001 001D unsigned char data;
; 0001 001E 
; 0001 001F if (address!=0)j=4;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;	address -> Y+8
;	num -> Y+6
;	i -> R16,R17
;	j -> R18,R19
;	data -> R21
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0001 0020 else j=0;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 0021 
; 0001 0022 i2c_start();
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 0023 i2c_write(EEPROM_BUS_ADDRESS | 0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 0024 /* send MSB of address */
; 0001 0025 i2c_write(address >> 8);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 0026 /* send LSB of address */
; 0001 0027 //i2c_write((unsigned char) address);
; 0001 0028 i2c_write( address&0x00ff);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0001 0029 i2c_start();
;PCODE: $0000003C VOL: 0
; 0001 002A i2c_write(EEPROM_BUS_ADDRESS | 1);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 002B for(i=j;i<num;i++)
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 002C {
; 0001 002D if(i==(num-1))data_rec[i]=i2c_read(0);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0001 002E else data_rec[i]=i2c_read(1);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0001 002F data=data_rec[i];
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0001 0030 }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 0031 i2c_stop();
;PCODE: $00000066 VOL: 0
; 0001 0032 return data;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0001 0033 }
;PCODE: $0000006B VOL: 0
;/*************************************/
;
;/* write a byte to the EEPROM */
;void eeprom_write(unsigned int address, unsigned char data)
; 0001 0038 {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0001 0039 i2c_start();
;PCODE: $0000006E VOL: 0
;	address -> Y+1
;	data -> Y+0
;PCODE: $0000006F VOL: 0
; 0001 003A i2c_write(EEPROM_BUS_ADDRESS | 0);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0001 003B /* send MSB of address */
; 0001 003C i2c_write(address >> 8);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0001 003D /* send LSB of address */
; 0001 003E i2c_write((unsigned char) address);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0001 003F i2c_write(data);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0001 0040 i2c_stop();
;PCODE: $00000078 VOL: 0
; 0001 0041 /* 10ms delay to complete the write operation */
; 0001 0042 delay_ms(10);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0001 0043 }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;
;
;/* write a frame to the EEPROM */
;void eeprom_write_frame(unsigned int address, char *data,char num )
; 0001 0048 {
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 0049 char i;
; 0001 004A char *ip;
; 0001 004B ip=data;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;	address -> Y+7
;	*data -> Y+5
;	num -> Y+4
;	i -> R17
;	*ip -> R18,R19
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0001 004C 
; 0001 004D i2c_start();
;PCODE: $00000085 VOL: 0
; 0001 004E i2c_write(EEPROM_BUS_ADDRESS | 0);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0001 004F /* send MSB of address */
; 0001 0050 i2c_write(address >> 8);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0001 0051 /* send LSB of address */
; 0001 0052 i2c_write((unsigned char) address);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0001 0053 for (i=0;i<num;i++)
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0001 0054 {
; 0001 0055 i2c_write(*(ip+i));
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 0056 }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0001 0057 i2c_stop();
;PCODE: $0000009F VOL: 0
; 0001 0058 /* 10ms delay to complete the write operation */
; 0001 0059 delay_ms(10);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0001 005A }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;
;
;void eeprom_write_pic(unsigned int address )
; 0001 005E {
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0001 005F char i;
; 0001 0060 
; 0001 0061 
; 0001 0062 
; 0001 0063 i2c_start();
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;	address -> Y+1
;	i -> R17
;PCODE: $000000AB VOL: 0
; 0001 0064 i2c_write(EEPROM_BUS_ADDRESS | 0);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0001 0065 //I2C_Write2(EEPROM_BUS_ADDRESS | 0);
; 0001 0066 
; 0001 0067 /* send MSB of address */
; 0001 0068 i2c_write(address >> 8);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0001 0069 /* send LSB of address */
; 0001 006A i2c_write((unsigned char) address);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0001 006B for (i=0;i<16;i++)
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0001 006C {
; 0001 006D i2c_write(mandalapic[i+address]);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0001 006E 
; 0001 006F }
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0001 0070 i2c_stop();
;PCODE: $000000C7 VOL: 0
; 0001 0071 /* 10ms delay to complete the write operation */
; 0001 0072 delay_ms(10);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0001 0073 }
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;
;
;void i2c_24lc32(void)
; 0001 0077 {
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0001 0078 char data[]={1,2,3};
; 0001 0079 
; 0001 007A i2c_init();
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;	data -> Y+0
;PCODE: $000000D9 VOL: 0
; 0001 007B 
; 0001 007C /* write the byte 55h at address AAh */
; 0001 007D eeprom_write(0xaa,data[0]);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0001 007E eeprom_write(0xab,data[1]);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0001 007F eeprom_write(0xac,data[2]);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0001 0080 
; 0001 0081 
; 0001 0082 /* read the byte from address AAh */
; 0001 0083 eeprom_read(0xaa);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0001 0084 eeprom_read(0xab);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0001 0085 eeprom_read(0xac);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0001 0086 }
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;
;
;void i2c_24lc32_frame(void)
; 0001 008A {
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0001 008B long i;
; 0001 008C long int data2;
; 0001 008D 
; 0001 008E 
; 0001 008F i2c_init();
;PCODE: $000000F4 VOL: 0
;	i -> Y+4
;	data2 -> Y+0
;PCODE: $000000F5 VOL: 0
; 0001 0090 
; 0001 0091 for (i=0;i<64;i++)
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0001 0092 {
; 0001 0093 data2=i*0x0010;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0001 0094 eeprom_write_pic(data2);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0001 0095 }
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0001 0096 }
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;
;
;void i2c_24lc32_read_frame(void)
; 0001 009A {
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0001 009B 
; 0001 009C glcd_clear();
;PCODE: $00000111 VOL: 0
; 0001 009D 
; 0001 009E eeprom_read_frame(0,512);  //4  508
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0001 009F glcd_putimagee(4,0,data_rec,GLCD_PUTCOPY);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0001 00A0 
; 0001 00A1 eeprom_read_frame(516,512);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0001 00A2 glcd_putimagee(4,32,data_rec,GLCD_PUTCOPY);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0001 00A3 }
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;
;
;/*************************************/
;void i2c_24lc32_read_byte(void)
; 0001 00A8 {
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0001 00A9  int i;
; 0001 00AA  char data=0xff;
; 0001 00AB  char scr[20];
; 0001 00AC  for (i=0;i<1024;i++)
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;	i -> R16,R17
;	data -> R19
;	scr -> Y+4
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0001 00AD  {
; 0001 00AE  data=eeprom_read(i);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0001 00AF  if (data !=mandalapic[i])
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0001 00B0   {
; 0001 00B1     sprintf(scr,"error [%d]=%d\r\n",i,data);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0001 00B2     puts(scr);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0001 00B3 
; 0001 00B4     }
; 0001 00B5     }
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0001 00B6 
; 0001 00B7 
; 0001 00B8 }
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;/***************************************/
;void i2c_24lc32_read_byte2(void)
; 0001 00BB {
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0001 00BC  int i;
; 0001 00BD 
; 0001 00BE  char scr[20];
; 0001 00BF  for (i=0;i<512;i++)
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;	i -> R16,R17
;	scr -> Y+2
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0001 00C0  {
; 0001 00C1  data_rec[i]=eeprom_read(i);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0001 00C2  if (data_rec[i] ==mandalapic[i])
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0001 00C3   {
; 0001 00C4     sprintf(scr,"error [%d]=%d--%d\r\n",i,data_rec[i],mandalapic[i]);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0001 00C5     puts(scr);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0001 00C6 
; 0001 00C7     }
; 0001 00C8     }
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0001 00C9      sprintf(scr,"data correct\r\n");
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0001 00CA     puts(scr);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0001 00CB 
; 0001 00CC  for (i=512;i<1024;i++)
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0001 00CD  {
; 0001 00CE  data_rec[i]=eeprom_read(i+512);
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0001 00CF  if (data_rec[i] ==mandalapic[i+512])
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0001 00D0   {
; 0001 00D1     sprintf(scr,"error [%d]=%d--%d\r\n",i,data_rec[i],mandalapic[i+512]);
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0001 00D2     puts(scr);
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0001 00D3 
; 0001 00D4     }
; 0001 00D5     }
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0001 00D6 
; 0001 00D7       sprintf(scr,"data correct\r\n");
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0001 00D8     puts(scr);
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0001 00D9 }
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;
;
;
;/*
;Programming steps in the master device
;
;    Initialize I2C.
;    Generate START condition.
;    Write device Write address (SLA+W) and check for acknowledgement.
;    After acknowledgement write data to slave device.
;    Generate REPEATED START condition with SLA+R.
;    Receive data from slave device.
;
;
;Programming steps in slave device
;
;    Initialize I2C with slave device address.
;    Listen to bus for get addressed by master.
;    While addressed with SLA+W by master device, receive data from master device.
;    Return acknowledgement after each byte received.
;    Clear interrupt flag after REPEATED START/STOP received.
;    Print received data on LCD.
;    Again listen to bus for get addressed by master.
;    While addressed with SLA+R by master device, transmit data to master device.
;    Transmit data till NACK/REPEATED START/STOP receive from master.
;    Clear interrupt flag after NACK/REPEATED START/STOP received.
;
;
;    https://www.avrfreaks.net/forum/twi-module-seems-buggy-multi-master-communications
;*/
;
;
