
AVRASM ver. 2.1.30  C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm Thu Dec 03 12:35:39 2020

C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1095): warning: Register r10 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _adc_old_data=R4
                 	.DEF _adc_old_data_msb=R5
                 	.DEF _rx_wr_index=R7
                 	.DEF _rx_rd_index=R6
                 	.DEF _rx_counter=R8
                 	.DEF _rx_counter_msb=R9
                 	.DEF _tx_wr_index=R11
                 	.DEF _tx_rd_index=R10
                 	.DEF _tx_counter=R12
                 	.DEF _tx_counter_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 03df 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 04f3 	JMP  _spi_isr
000016 940c 0551 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 056f 	JMP  _usart_tx_isr
00001c 940c 047f 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 08b5 	JMP  _twi_int_handler
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _font5x7:
00002a 0705
00002b 6020
00002c 0000
00002d 0000      	.DB  0x5,0x7,0x20,0x60,0x0,0x0,0x0,0x0
00002e 0000
00002f 5f00
000030 0000
000031 0700      	.DB  0x0,0x0,0x0,0x5F,0x0,0x0,0x0,0x7
000032 0700
000033 1400
000034 147f
000035 147f      	.DB  0x0,0x7,0x0,0x14,0x7F,0x14,0x7F,0x14
000036 2a24
000037 2a7f
000038 2312
000039 0813      	.DB  0x24,0x2A,0x7F,0x2A,0x12,0x23,0x13,0x8
00003a 6264
00003b 4936
00003c 2255
00003d 0050      	.DB  0x64,0x62,0x36,0x49,0x55,0x22,0x50,0x0
00003e 0305
00003f 0000
000040 1c00
000041 4122      	.DB  0x5,0x3,0x0,0x0,0x0,0x1C,0x22,0x41
000042 0000
000043 2241
000044 001c
000045 2a08      	.DB  0x0,0x0,0x41,0x22,0x1C,0x0,0x8,0x2A
000046 2a1c
000047 0808
000048 3e08
000049 0808      	.DB  0x1C,0x2A,0x8,0x8,0x8,0x3E,0x8,0x8
00004a 5000
00004b 0030
00004c 0800
00004d 0808      	.DB  0x0,0x50,0x30,0x0,0x0,0x8,0x8,0x8
00004e 0808
00004f 3000
000050 0030
000051 2000      	.DB  0x8,0x8,0x0,0x30,0x30,0x0,0x0,0x20
000052 0810
000053 0204
000054 513e
000055 4549      	.DB  0x10,0x8,0x4,0x2,0x3E,0x51,0x49,0x45
000056 003e
000057 7f42
000058 0040
000059 6142      	.DB  0x3E,0x0,0x42,0x7F,0x40,0x0,0x42,0x61
00005a 4951
00005b 2146
00005c 4541
00005d 314b      	.DB  0x51,0x49,0x46,0x21,0x41,0x45,0x4B,0x31
00005e 1418
00005f 7f12
000060 2710
000061 4545      	.DB  0x18,0x14,0x12,0x7F,0x10,0x27,0x45,0x45
000062 3945
000063 4a3c
000064 4949
000065 0130      	.DB  0x45,0x39,0x3C,0x4A,0x49,0x49,0x30,0x1
000066 0971
000067 0305
000068 4936
000069 4949      	.DB  0x71,0x9,0x5,0x3,0x36,0x49,0x49,0x49
00006a 0636
00006b 4949
00006c 1e29
00006d 3600      	.DB  0x36,0x6,0x49,0x49,0x29,0x1E,0x0,0x36
00006e 0036
00006f 0000
000070 3656
000071 0000      	.DB  0x36,0x0,0x0,0x0,0x56,0x36,0x0,0x0
000072 0800
000073 2214
000074 1441
000075 1414      	.DB  0x0,0x8,0x14,0x22,0x41,0x14,0x14,0x14
000076 1414
000077 2241
000078 0814
000079 0200      	.DB  0x14,0x14,0x41,0x22,0x14,0x8,0x0,0x2
00007a 5101
00007b 0609
00007c 4932
00007d 4179      	.DB  0x1,0x51,0x9,0x6,0x32,0x49,0x79,0x41
00007e 7e3e
00007f 1111
000080 7e11
000081 497f      	.DB  0x3E,0x7E,0x11,0x11,0x11,0x7E,0x7F,0x49
000082 4949
000083 3e36
000084 4141
000085 2241      	.DB  0x49,0x49,0x36,0x3E,0x41,0x41,0x41,0x22
000086 417f
000087 2241
000088 7f1c
000089 4949      	.DB  0x7F,0x41,0x41,0x22,0x1C,0x7F,0x49,0x49
00008a 4149
00008b 097f
00008c 0109
00008d 3e01      	.DB  0x49,0x41,0x7F,0x9,0x9,0x1,0x1,0x3E
00008e 4141
00008f 3251
000090 087f
000091 0808      	.DB  0x41,0x41,0x51,0x32,0x7F,0x8,0x8,0x8
000092 007f
000093 7f41
000094 0041
000095 4020      	.DB  0x7F,0x0,0x41,0x7F,0x41,0x0,0x20,0x40
000096 3f41
000097 7f01
000098 1408
000099 4122      	.DB  0x41,0x3F,0x1,0x7F,0x8,0x14,0x22,0x41
00009a 407f
00009b 4040
00009c 7f40
00009d 0402      	.DB  0x7F,0x40,0x40,0x40,0x40,0x7F,0x2,0x4
00009e 7f02
00009f 047f
0000a0 1008
0000a1 3e7f      	.DB  0x2,0x7F,0x7F,0x4,0x8,0x10,0x7F,0x3E
0000a2 4141
0000a3 3e41
0000a4 097f
0000a5 0909      	.DB  0x41,0x41,0x41,0x3E,0x7F,0x9,0x9,0x9
0000a6 3e06
0000a7 5141
0000a8 5e21
0000a9 097f      	.DB  0x6,0x3E,0x41,0x51,0x21,0x5E,0x7F,0x9
0000aa 2919
0000ab 4646
0000ac 4949
0000ad 3149      	.DB  0x19,0x29,0x46,0x46,0x49,0x49,0x49,0x31
0000ae 0101
0000af 017f
0000b0 3f01
0000b1 4040      	.DB  0x1,0x1,0x7F,0x1,0x1,0x3F,0x40,0x40
0000b2 3f40
0000b3 201f
0000b4 2040
0000b5 7f1f      	.DB  0x40,0x3F,0x1F,0x20,0x40,0x20,0x1F,0x7F
0000b6 1820
0000b7 7f20
0000b8 1463
0000b9 1408      	.DB  0x20,0x18,0x20,0x7F,0x63,0x14,0x8,0x14
0000ba 0363
0000bb 7804
0000bc 0304
0000bd 5161      	.DB  0x63,0x3,0x4,0x78,0x4,0x3,0x61,0x51
0000be 4549
0000bf 0043
0000c0 7f00
0000c1 4141      	.DB  0x49,0x45,0x43,0x0,0x0,0x7F,0x41,0x41
0000c2 0402
0000c3 1008
0000c4 4120
0000c5 7f41      	.DB  0x2,0x4,0x8,0x10,0x20,0x41,0x41,0x7F
0000c6 0000
0000c7 0204
0000c8 0201
0000c9 4004      	.DB  0x0,0x0,0x4,0x2,0x1,0x2,0x4,0x40
0000ca 4040
0000cb 4040
0000cc 0100
0000cd 0402      	.DB  0x40,0x40,0x40,0x40,0x0,0x1,0x2,0x4
0000ce 2000
0000cf 5454
0000d0 7854
0000d1 487f      	.DB  0x0,0x20,0x54,0x54,0x54,0x78,0x7F,0x48
0000d2 4444
0000d3 3838
0000d4 4444
0000d5 2044      	.DB  0x44,0x44,0x38,0x38,0x44,0x44,0x44,0x20
0000d6 4438
0000d7 4844
0000d8 387f
0000d9 5454      	.DB  0x38,0x44,0x44,0x48,0x7F,0x38,0x54,0x54
0000da 1854
0000db 7e08
0000dc 0109
0000dd 0802      	.DB  0x54,0x18,0x8,0x7E,0x9,0x1,0x2,0x8
0000de 5414
0000df 3c54
0000e0 087f
0000e1 0404      	.DB  0x14,0x54,0x54,0x3C,0x7F,0x8,0x4,0x4
0000e2 0078
0000e3 7d44
0000e4 0040
0000e5 4020      	.DB  0x78,0x0,0x44,0x7D,0x40,0x0,0x20,0x40
0000e6 3d44
0000e7 0000
0000e8 107f
0000e9 4428      	.DB  0x44,0x3D,0x0,0x0,0x7F,0x10,0x28,0x44
0000ea 4100
0000eb 407f
0000ec 7c00
0000ed 1804      	.DB  0x0,0x41,0x7F,0x40,0x0,0x7C,0x4,0x18
0000ee 7804
0000ef 087c
0000f0 0404
0000f1 3878      	.DB  0x4,0x78,0x7C,0x8,0x4,0x4,0x78,0x38
0000f2 4444
0000f3 3844
0000f4 147c
0000f5 1414      	.DB  0x44,0x44,0x44,0x38,0x7C,0x14,0x14,0x14
0000f6 0808
0000f7 1414
0000f8 7c18
0000f9 087c      	.DB  0x8,0x8,0x14,0x14,0x18,0x7C,0x7C,0x8
0000fa 0404
0000fb 4808
0000fc 5454
0000fd 2054      	.DB  0x4,0x4,0x8,0x48,0x54,0x54,0x54,0x20
0000fe 3f04
0000ff 4044
000100 3c20
000101 4040      	.DB  0x4,0x3F,0x44,0x40,0x20,0x3C,0x40,0x40
000102 7c20
000103 201c
000104 2040
000105 3c1c      	.DB  0x20,0x7C,0x1C,0x20,0x40,0x20,0x1C,0x3C
000106 3040
000107 3c40
000108 2844
000109 2810      	.DB  0x40,0x30,0x40,0x3C,0x44,0x28,0x10,0x28
00010a 0c44
00010b 5050
00010c 3c50
00010d 6444      	.DB  0x44,0xC,0x50,0x50,0x50,0x3C,0x44,0x64
00010e 4c54
00010f 0044
000110 3608
000111 0041      	.DB  0x54,0x4C,0x44,0x0,0x8,0x36,0x41,0x0
000112 0000
000113 007f
000114 0000
000115 3641      	.DB  0x0,0x0,0x7F,0x0,0x0,0x0,0x41,0x36
000116 0008
000117 0102
000118 0402
000119 7f02      	.DB  0x8,0x0,0x2,0x1,0x2,0x4,0x2,0x7F
00011a 4141
00011b 7f41      	.DB  0x41,0x41,0x41,0x7F
                 _mandalapic:
00011c 0080
00011d 0040
00011e fefe
00011f fcfe      	.DB  0x80,0x0,0x40,0x0,0xFE,0xFE,0xFE,0xFC
000120 ffff
000121 ffff
000122 ffff
000123 ffff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
000124 ffff
000125 9fff
000126 370b
000127 9fe7      	.DB  0xFF,0xFF,0xFF,0x9F,0xB,0x37,0xE7,0x9F
000128 e9cf
000129 fef2
00012a be3d
00012b ffdf      	.DB  0xCF,0xE9,0xF2,0xFE,0x3D,0xBE,0xDF,0xFF
00012c bfff
00012d f17d
00012e cbeb
00012f 8eed      	.DB  0xFF,0xBF,0x7D,0xF1,0xEB,0xCB,0xED,0x8E
000130 ec75
000131 d4b7
000132 1b5d
000133 9fb7      	.DB  0x75,0xEC,0xB7,0xD4,0x5D,0x1B,0xB7,0x9F
000134 fffe
000135 f2fc
000136 ffef
000137 ffff      	.DB  0xFE,0xFF,0xFC,0xF2,0xEF,0xFF,0xFF,0xFF
000138 e2f5
000139 fff2
00013a 5f3f
00013b 2f5f      	.DB  0xF5,0xE2,0xF2,0xFF,0x3F,0x5F,0x5F,0x2F
00013c b7bf
00013d 5f23
00013e 075b
00013f bfb7      	.DB  0xBF,0xB7,0x23,0x5F,0x5B,0x7,0xB7,0xBF
000140 efb7
000141 3fdf
000142 3e5f
000143 ff3d      	.DB  0xB7,0xEF,0xDF,0x3F,0x5F,0x3E,0x3D,0xFF
000144 bf1f
000145 6f1e
000146 9ebe
000147 1f6f      	.DB  0x1F,0xBF,0x1E,0x6F,0xBE,0x9E,0x6F,0x1F
000148 9dff
000149 7a3c
00014a ff7d
00014b eff7      	.DB  0xFF,0x9D,0x3C,0x7A,0x7D,0xFF,0xF7,0xEF
00014c cdd3
00014d fffb
00014e 5c3e
00014f 7bb9      	.DB  0xD3,0xCD,0xFB,0xFF,0x3E,0x5C,0xB9,0x7B
000150 7ffe
000151 ffff
000152 d3f6
000153 fced      	.DB  0xFE,0x7F,0xFF,0xFF,0xF6,0xD3,0xED,0xFC
000154 ffff
000155 efff
000156 e7f7
000157 fff7      	.DB  0xFF,0xFF,0xFF,0xEF,0xF7,0xE7,0xF7,0xFF
000158 e9ff
000159 fde6
00015a bf7f
00015b ff3f      	.DB  0xFF,0xE9,0xE6,0xFD,0x7F,0xBF,0x3F,0xFF
00015c ffdf
00015d ffff
00015e ffff
00015f ffff      	.DB  0xDF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
000160 ffff
000161 ffff
000162 ffff
000163 ffff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
000164 ffff
000165 81ff
000166 fbe4
000167 0304      	.DB  0xFF,0xFF,0xFF,0x81,0xE4,0xFB,0x4,0x3
000168 f3f8
000169 ffff
00016a fffd
00016b f7fb      	.DB  0xF8,0xF3,0xFF,0xFF,0xFD,0xFF,0xFB,0xF7
00016c fbfb
00016d fce1
00016e c3e5
00016f a7b7      	.DB  0xFB,0xFB,0xE1,0xFC,0xE5,0xC3,0xB7,0xA7
000170 5edf
000171 fbfc
000172 fffd
000173 37df      	.DB  0xDF,0x5E,0xFC,0xFB,0xFD,0xFF,0xDF,0x37
000174 09cb
000175 90f5
000176 d9df
000177 ec0d      	.DB  0xCB,0x9,0xF5,0x90,0xDF,0xD9,0xD,0xEC
000178 a9af
000179 d24f
00017a efd7
00017b f7eb      	.DB  0xAF,0xA9,0x4F,0xD2,0xD7,0xEF,0xEB,0xF7
00017c fdfa
00017d fb7b
00017e fdfd
00017f fefe      	.DB  0xFA,0xFD,0x7B,0xFB,0xFD,0xFD,0xFE,0xFE
000180 feff
000181 fffe
000182 effe
000183 ff7f      	.DB  0xFF,0xFE,0xFE,0xFF,0xFE,0xEF,0x7F,0xFF
000184 ffff
000185 ffff
000186 fffe
000187 7fff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0x7F
000188 7c3c
000189 fcbf
00018a fcf9
00018b fff8      	.DB  0x3C,0x7C,0xBF,0xFC,0xF9,0xFC,0xF8,0xFF
00018c 3fff
00018d 9b4f
00018e 9364
00018f fdf8      	.DB  0xFF,0x3F,0x4F,0x9B,0x64,0x93,0xF8,0xFD
000190 fbff
000191 7a7c
000192 fbfd
000193 e5f5      	.DB  0xFF,0xFB,0x7C,0x7A,0xFD,0xFB,0xF5,0xE5
000194 d1f1
000195 e3e7
000196 bbeb
000197 d7b3      	.DB  0xF1,0xD1,0xE7,0xE3,0xEB,0xBB,0xB3,0xD7
000198 7753
000199 8e37
00019a 1fde
00019b bf9f      	.DB  0x53,0x77,0x37,0x8E,0xDE,0x1F,0x9F,0xBF
00019c 3f3f
00019d 7fff
00019e ffe7
00019f efef      	.DB  0x3F,0x3F,0xFF,0x7F,0xE7,0xFF,0xEF,0xEF
0001a0 ffff
0001a1 ffff
0001a2 ffff
0001a3 ffff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
0001a4 ffff
0001a5 3fff
0001a6 27e1
0001a7 7ef8      	.DB  0xFF,0xFF,0xFF,0x3F,0xE1,0x27,0xF8,0x7E
0001a8 6f60
0001a9 fc1f
0001aa f7ff
0001ab 77ff      	.DB  0x60,0x6F,0x1F,0xFC,0xFF,0xF7,0xFF,0x77
0001ac f6fe
0001ad f6ee
0001ae e9f7
0001af ffe7      	.DB  0xFE,0xF6,0xEE,0xF6,0xF7,0xE9,0xE7,0xFF
0001b0 f7e7
0001b1 7ff7
0001b2 bfff
0001b3 2a5e      	.DB  0xE7,0xF7,0xF7,0x7F,0xFF,0xBF,0x5E,0x2A
0001b4 3755
0001b5 6688
0001b6 fed2
0001b7 fcf0      	.DB  0x55,0x37,0x88,0x66,0xD2,0xFE,0xF0,0xFC
0001b8 befe
0001b9 cf7f
0001ba f7f7
0001bb fffb      	.DB  0xFE,0xBE,0x7F,0xCF,0xF7,0xF7,0xFB,0xFF
0001bc fbfb
0001bd f7f3
0001be bfff
0001bf 97af      	.DB  0xFB,0xFB,0xF3,0xF7,0xFF,0xBF,0xAF,0x97
0001c0 f5ef
0001c1 fcfb
0001c2 fdff
0001c3 fdfe      	.DB  0xEF,0xF5,0xFB,0xFC,0xFF,0xFD,0xFE,0xFD
0001c4 fffe
0001c5 77fd
0001c6 7f33
0001c7 3eff      	.DB  0xFE,0xFF,0xFD,0x77,0x33,0x7F,0xFF,0x3E
0001c8 ffff
0001c9 3fff
0001ca 675f
0001cb 6ab5      	.DB  0xFF,0xFF,0xFF,0x3F,0x5F,0x67,0xB5,0x6A
0001cc edd1
0001cd 7efb
0001ce bf9f
0001cf 63af      	.DB  0xD1,0xED,0xFB,0x7E,0x9F,0xBF,0xAF,0x63
0001d0 6ebc
0001d1 359d
0001d2 6aca
0001d3 fdf5      	.DB  0xBC,0x6E,0x9D,0x35,0xCA,0x6A,0xF5,0xFD
0001d4 4c4a
0001d5 0b4b
0001d6 f53d
0001d7 c3f3      	.DB  0x4A,0x4C,0x4B,0xB,0x3D,0xF5,0xF3,0xC3
0001d8 d7cf
0001d9 566f
0001da af1f
0001db bcdf      	.DB  0xCF,0xD7,0x6F,0x56,0x1F,0xAF,0xDF,0xBC
0001dc f9fb
0001dd c9f6
0001de 1abe
0001df ed5f      	.DB  0xFB,0xF9,0xF6,0xC9,0xBE,0x1A,0x5F,0xED
0001e0 ffff
0001e1 ffff
0001e2 ffff
0001e3 ffff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
0001e4 ffff
0001e5 e0ff
0001e6 30af
0001e7 4cbf      	.DB  0xFF,0xFF,0xFF,0xE0,0xAF,0x30,0xBF,0x4C
0001e8 cfd0
0001e9 bfbf
0001ea febf
0001eb ffff      	.DB  0xD0,0xCF,0xBF,0xBF,0xBF,0xFE,0xFF,0xFF
0001ec ffff
0001ed f3f2
0001ee fc74
0001ef ffff      	.DB  0xFF,0xFF,0xF2,0xF3,0x74,0xFC,0xFF,0xFF
0001f0 630f
0001f1 cb15
0001f2 b274
0001f3 d190      	.DB  0xF,0x63,0x15,0xCB,0x74,0xB2,0x90,0xD1
0001f4 fffa
0001f5 fffe
0001f6 ffff
0001f7 ffff      	.DB  0xFA,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF
0001f8 f4ff
0001f9 ffef
0001fa ffff
0001fb ffff      	.DB  0xFF,0xF4,0xEF,0xFF,0xFF,0xFF,0xFF,0xFF
0001fc 5fff
0001fd c74f
0001fe f7ef
0001ff fbfb      	.DB  0xFF,0x5F,0x4F,0xC7,0xEF,0xF7,0xFB,0xFB
000200 fbfb
000201 f9fd
000202 ebf7
000203 eff7      	.DB  0xFB,0xFB,0xFD,0xF9,0xF7,0xEB,0xF7,0xEF
000204 dddf
000205 fefd
000206 ffff
000207 ffff      	.DB  0xDF,0xDD,0xFD,0xFE,0xFF,0xFF,0xFF,0xFF
000208 31bf
000209 b98a
00020a f2c6
00020b 3ffe      	.DB  0xBF,0x31,0x8A,0xB9,0xC6,0xF2,0xFE,0x3F
00020c b3df
00020d 44cd
00020e 9bfe
00020f 7bc4      	.DB  0xDF,0xB3,0xCD,0x44,0xFE,0x9B,0xC4,0x7B
000210 6c8d
000211 9b91
000212 df3f
000213 f47e      	.DB  0x8D,0x6C,0x91,0x9B,0x3F,0xDF,0x7E,0xF4
000214 c8e3
000215 c34a
000216 7803
000217 fe04      	.DB  0xE3,0xC8,0x4A,0xC3,0x3,0x78,0x4,0xFE
000218 fcfe
000219 c9f3
00021a ce0d
00021b efcc      	.DB  0xFE,0xFC,0xF3,0xC9,0xD,0xCE,0xCC,0xEF
00021c d6e8
00021d cbed
00021e efcf
00021f 6bc3      	.DB  0xE8,0xD6,0xED,0xCB,0xCF,0xEF,0xC3,0x6B
000220 ffff
000221 ffff
000222 ffff
000223 ffff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
000224 ffff
000225 ffff
000226 feff
000227 fffc      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFC,0xFF
000228 fafe
000229 1765
00022a 8fb0
00022b ffff      	.DB  0xFE,0xFA,0x65,0x17,0xB0,0x8F,0xFF,0xFF
00022c fffe
00022d fff7
00022e 7f7b
00022f ffbf      	.DB  0xFE,0xFF,0xF7,0xFF,0x7B,0x7F,0xBF,0xFF
000230 f8fc
000231 89f3
000232 5bb4
000233 fea4      	.DB  0xFC,0xF8,0xF3,0x89,0xB4,0x5B,0xA4,0xFE
000234 ffff
000235 bfff
000236 ffff
000237 af5f      	.DB  0xFF,0xFF,0xFF,0xBF,0xFF,0xFF,0x5F,0xAF
000238 f3eb
000239 fdfd
00023a fefc
00023b ffff      	.DB  0xEB,0xF3,0xFD,0xFD,0xFC,0xFE,0xFF,0xFF
00023c 52cc
00023d ffff
00023e ffff
00023f ffff      	.DB  0xCC,0x52,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
000240 3fbf
000241 cb47
000242 fde3
000243 fdf3      	.DB  0xBF,0x3F,0x47,0xCB,0xE3,0xFD,0xF3,0xFD
000244 fdf8
000245 fafa
000246 ffff
000247 3c4f      	.DB  0xF8,0xFD,0xFA,0xFA,0xFF,0xFF,0x4F,0x3C
000248 1b02
000249 fec5
00024a 1fff
00024b 33cc      	.DB  0x2,0x1B,0xC5,0xFE,0xFF,0x1F,0xCC,0x33
00024c 76e6
00024d 629a
00024e b4db
00024f deef      	.DB  0xE6,0x76,0x9A,0x62,0xDB,0xB4,0xEF,0xDE
000250 73b9
000251 f1ec
000252 4b82
000253 2fb4      	.DB  0xB9,0x73,0xEC,0xF1,0x82,0x4B,0xB4,0x2F
000254 ffff
000255 e1fc
000256 f09e
000257 278a      	.DB  0xFF,0xFF,0xFC,0xE1,0x9E,0xF0,0x8A,0x27
000258 ffff
000259 37c8
00025a 7c14
00025b ffec      	.DB  0xFF,0xFF,0xC8,0x37,0x14,0x7C,0xEC,0xFF
00025c ab3f
00025d cb44
00025e fdff
00025f fbf5      	.DB  0x3F,0xAB,0x44,0xCB,0xFF,0xFD,0xF5,0xFB
000260 fffe
000261 ffff
000262 ffff
000263 ffff      	.DB  0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
000264 ffff
000265 ffff
000266 ffff
000267 ffff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
000268 ffff
000269 bfff
00026a 9f7f
00026b d3ef      	.DB  0xFF,0xFF,0xFF,0xBF,0x7F,0x9F,0xEF,0xD3
00026c fde9
00026d bf79
00026e 7cfd
00026f feae      	.DB  0xE9,0xFD,0x79,0xBF,0xFD,0x7C,0xAE,0xFE
000270 ffff
000271 67df
000272 0932
000273 ffe7      	.DB  0xFF,0xFF,0xDF,0x67,0x32,0x9,0xE7,0xFF
000274 ffff
000275 ffff
000276 ffff
000277 eaf3      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF3,0xEA
000278 9fdf
000279 ff7f
00027a bfff
00027b eb37      	.DB  0xDF,0x9F,0x7F,0xFF,0xFF,0xBF,0x37,0xEB
00027c fff7
00027d fcfe
00027e fffd
00027f efff      	.DB  0xF7,0xFF,0xFE,0xFC,0xFD,0xFF,0xFF,0xEF
000280 c7ca
000281 ffff
000282 ffff
000283 ffff      	.DB  0xCA,0xC7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
000284 ffff
000285 ffff
000286 ffff
000287 7bf3      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF3,0x7B
000288 6b95
000289 df90
00028a feff
00028b 68d4      	.DB  0x95,0x6B,0x90,0xDF,0xFF,0xFE,0xD4,0x68
00028c 5634
00028d 5fad
00028e b57a
00028f e479      	.DB  0x34,0x56,0xAD,0x5F,0x7A,0xB5,0x79,0xE4
000290 f1fa
000291 b7ce
000292 3faf
000293 7ddf      	.DB  0xFA,0xF1,0xCE,0xB7,0xAF,0x3F,0xDF,0x7D
000294 f9fa
000295 dfcf
000296 feff
000297 f37d      	.DB  0xFA,0xF9,0xCF,0xDF,0xFF,0xFE,0x7D,0xF3
000298 bf3f
000299 b079
00029a 7fb3
00029b e7ff      	.DB  0x3F,0xBF,0x79,0xB0,0xB3,0x7F,0xFF,0xE7
00029c fcfc
00029d 7ffe
00029e ff7f
00029f 3df6      	.DB  0xFC,0xFC,0xFE,0x7F,0x7F,0xFF,0xF6,0x3D
0002a0 ff86
0002a1 ffff
0002a2 ffff
0002a3 ffff      	.DB  0x86,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
0002a4 ffff
0002a5 ffff
0002a6 ffff
0002a7 ffff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
0002a8 ffff
0002a9 faf6
0002aa 5fff
0002ab 2fe7      	.DB  0xFF,0xFF,0xF6,0xFA,0xFF,0x5F,0xE7,0x2F
0002ac f2d7
0002ad 7dfc
0002ae 3f1c
0002af af07      	.DB  0xD7,0xF2,0xFC,0x7D,0x1C,0x3F,0x7,0xAF
0002b0 ffdf
0002b1 fdfe
0002b2 dcf1
0002b3 0bb1      	.DB  0xDF,0xFF,0xFE,0xFD,0xF1,0xDC,0xB1,0xB
0002b4 7fdf
0002b5 ffff
0002b6 ffe7
0002b7 fff9      	.DB  0xDF,0x7F,0xFF,0xFF,0xE7,0xFF,0xF9,0xFF
0002b8 7fff
0002b9 bf7f
0002ba 1edf
0002bb df2e      	.DB  0xFF,0x7F,0x7F,0xBF,0xDF,0x1E,0x2E,0xDF
0002bc 0f67
0002bd b7b3
0002be e3c7
0002bf e5ed      	.DB  0x67,0xF,0xB3,0xB7,0xC7,0xE3,0xED,0xE5
0002c0 f7f3
0002c1 f8f4
0002c2 61e3
0002c3 fc6d      	.DB  0xF3,0xF7,0xF4,0xF8,0xE3,0x61,0x6D,0xFC
0002c4 e2f2
0002c5 d1ed
0002c6 bfcb
0002c7 feff      	.DB  0xF2,0xE2,0xED,0xD1,0xCB,0xBF,0xFF,0xFE
0002c8 eef1
0002c9 545b
0002ca b7ab
0002cb ffef      	.DB  0xF1,0xEE,0x5B,0x54,0xAB,0xB7,0xEF,0xFF
0002cc f3fe
0002cd 38fc
0002ce bd7b
0002cf 7af8      	.DB  0xFE,0xF3,0xFC,0x38,0x7B,0xBD,0xF8,0x7A
0002d0 bbbd
0002d1 7bff
0002d2 efe7
0002d3 fffe      	.DB  0xBD,0xBB,0xFF,0x7B,0xE7,0xEF,0xFE,0xFF
0002d4 83af
0002d5 4b6d
0002d6 7d56
0002d7 a6ab      	.DB  0xAF,0x83,0x6D,0x4B,0x56,0x7D,0xAB,0xA6
0002d8 6a68
0002d9 b484
0002da b09b
0002db ccfd      	.DB  0x68,0x6A,0x84,0xB4,0x9B,0xB0,0xFD,0xCC
0002dc b3a3
0002dd 1f6f
0002de fffe
0002df feff      	.DB  0xA3,0xB3,0x6F,0x1F,0xFE,0xFF,0xFF,0xFE
0002e0 ffff
0002e1 ffff
0002e2 ffff
0002e3 ffff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
0002e4 ffff
0002e5 ffff
0002e6 ffff
0002e7 ffff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
0002e8 ffff
0002e9 0a4b
0002ea f374
0002eb 3ffc      	.DB  0xFF,0xFF,0x4B,0xA,0x74,0xF3,0xFC,0x3F
0002ec f5b7
0002ed e58a
0002ee fffb
0002ef ff3f      	.DB  0xB7,0xF5,0x8A,0xE5,0xFB,0xFF,0x3F,0xFF
0002f0 f2eb
0002f1 77fb
0002f2 3fb7
0002f3 bfff      	.DB  0xEB,0xF2,0xFB,0x77,0xB7,0x3F,0xFF,0xBF
0002f4 9e3e
0002f5 4faf
0002f6 b3d7
0002f7 e6e9      	.DB  0x3E,0x9E,0xAF,0x4F,0xD7,0xB3,0xE9,0xE6
0002f8 f2e2
0002f9 f875
0002fa dd3e
0002fb af2e      	.DB  0xE2,0xF2,0x75,0xF8,0x3E,0xDD,0x2E,0xAF
0002fc 2fd7
0002fd 03bf
0002fe 456d
0002ff 93d3      	.DB  0xD7,0x2F,0xBF,0x3,0x6D,0x45,0xD3,0x93
000300 5df5
000301 aa8a
000302 dd6d
000303 6ab2      	.DB  0xF5,0x5D,0x8A,0xAA,0x6D,0xDD,0xB2,0x6A
000304 7adc
000305 e1ec
000306 2bd3
000307 2bf3      	.DB  0xDC,0x7A,0xEC,0xE1,0xD3,0x2B,0xF3,0x2B
000308 ffc7
000309 ffff
00030a 9f5f
00030b 914b      	.DB  0xC7,0xFF,0xFF,0xFF,0x5F,0x9F,0x4B,0x91
00030c 2a69
00030d 356d
00030e 6cdd
00030f 9a36      	.DB  0x69,0x2A,0x6D,0x35,0xDD,0x6C,0x36,0x9A
000310 6371
000311 99f4
000312 c9e6
000313 ffef      	.DB  0x71,0x63,0xF4,0x99,0xE6,0xC9,0xEF,0xFF
000314 f6fe
000315 95ab
000316 fff9
000317 febc      	.DB  0xFE,0xF6,0xAB,0x95,0xF9,0xFF,0xBC,0xFE
000318 572f
000319 e7e3
00031a f1ff
00031b ebf5      	.DB  0x2F,0x57,0xE3,0xE7,0xFF,0xF1,0xF5,0xEB
00031c e3df
00031d 2f97      	.DB  0xDF,0xE3,0x97,0x2F
                 _tbl10_G100:
00031e 2710
00031f 03e8
000320 0064
000321 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000322 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000323 1000
000324 0100
000325 0010
000326 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 __glcd_mask:
000327 0100
000328 0703
000329 1f0f
00032a 7f3f      	.DB  0x0,0x1,0x3,0x7,0xF,0x1F,0x3F,0x7F
C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1327): warning: .cseg .db misalignment - padding zero byte
00032b 00ff      	.DB  0xFF
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00032c 0002      	.DW  0x0002
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00032d 0000
00032e 0000      	.DB  0x0,0x0,0x0,0x0
00032f 0000
000330 0000      	.DB  0x0,0x0,0x0,0x0
000331 0000      	.DB  0x0,0x0
                 
                 _0x0:
000332 6548
000333 6c6c
000334 2c6f
000335 2020      	.DB  0x48,0x65,0x6C,0x6C,0x6F,0x2C,0x20,0x20
000336 6557
000337 636c
000338 6d6f
000339 2065      	.DB  0x57,0x65,0x6C,0x63,0x6F,0x6D,0x65,0x20
00033a 6f74
00033b 6c20
00033c 7361
00033d 2074      	.DB  0x74,0x6F,0x20,0x6C,0x61,0x73,0x74,0x20
00033e 6e6f
00033f 696c
000340 656e
000341 6320      	.DB  0x6F,0x6E,0x6C,0x69,0x6E,0x65,0x20,0x63
000342 616c
000343 7373
000344 6920
000345 206e      	.DB  0x6C,0x61,0x73,0x73,0x20,0x69,0x6E,0x20
000346 3331
000347 3939
000348 0a0d
000349 2020      	.DB  0x31,0x33,0x39,0x39,0xD,0xA,0x20,0x20
00034a 2020
00034b 2020
00034c 2020
00034d 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00034e 2a20
00034f 2a2a
000350 2020
000351 2020      	.DB  0x20,0x2A,0x2A,0x2A,0x20,0x20,0x20,0x20
000352 4d20
000353 5341
000354 4554
000355 2052      	.DB  0x20,0x4D,0x41,0x53,0x54,0x45,0x52,0x20
000356 494d
000357 5243
000358 204f
000359 2020      	.DB  0x4D,0x49,0x43,0x52,0x4F,0x20,0x20,0x20
00035a 2a20
00035b 2a2a
00035c 0d0d
00035d 0a0d      	.DB  0x20,0x2A,0x2A,0x2A,0xD,0xD,0xD,0xA
00035e 5700
00035f 4520
000360 5045
000361 4f52      	.DB  0x0,0x57,0x20,0x45,0x45,0x50,0x52,0x4F
000362 0d4d
000363 000a
000364 2052
000365 4545      	.DB  0x4D,0xD,0xA,0x0,0x52,0x20,0x45,0x45
000366 5250
000367 4d4f
000368 0a0d
000369 4400      	.DB  0x50,0x52,0x4F,0x4D,0xD,0xA,0x0,0x44
00036a 7369
00036b 6c70
00036c 7961
00036d 0a0d      	.DB  0x69,0x73,0x70,0x6C,0x61,0x79,0xD,0xA
00036e 0d00
00036f 200a
000370 6553
000371 646e      	.DB  0x0,0xD,0xA,0x20,0x53,0x65,0x6E,0x64
000372 6e69
000373 2067
000374 203a
000375 2020      	.DB  0x69,0x6E,0x67,0x20,0x3A,0x20,0x20,0x20
000376 2020
000377 2020
000378 2500
000379 2064      	.DB  0x20,0x20,0x20,0x20,0x0,0x25,0x64,0x20
00037a 2020
00037b 0020
00037c 0a0d
00037d 5220      	.DB  0x20,0x20,0x20,0x0,0xD,0xA,0x20,0x52
00037e 6365
00037f 6965
000380 6976
000381 676e      	.DB  0x65,0x63,0x65,0x69,0x76,0x69,0x6E,0x67
000382 3a20
000383 2020
000384 2020
000385 2020      	.DB  0x20,0x3A,0x20,0x20,0x20,0x20,0x20,0x20
000386 0020      	.DB  0x20,0x0
                 _0x20000:
000387 0a0d
000388 4120
000389 4344
00038a 3d30      	.DB  0xD,0xA,0x20,0x41,0x44,0x43,0x30,0x3D
00038b 6425
00038c 0a0d
C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1364): warning: .cseg .db misalignment - padding zero byte
00038d 0000      	.DB  0x25,0x64,0xD,0xA,0x0
                 _0x40003:
00038e 0063
C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1366): warning: .cseg .db misalignment - padding zero byte
00038f 0063      	.DB  0x63,0x0,0x63
                 _0x40000:
000390 0a0d
000391 4120
000392 4344
000393 3d30      	.DB  0xD,0xA,0x20,0x41,0x44,0x43,0x30,0x3D
000394 6425
000395 6120
000396 6470
000397 7461      	.DB  0x25,0x64,0x20,0x61,0x70,0x64,0x61,0x74
000398 6465
000399 2121
00039a 0d20
00039b 000a      	.DB  0x65,0x64,0x21,0x21,0x20,0xD,0xA,0x0
                 _0xE0000:
00039c 7265
00039d 6f72
00039e 2072
00039f 255b      	.DB  0x65,0x72,0x72,0x6F,0x72,0x20,0x5B,0x25
0003a0 5d64
0003a1 253d
0003a2 0d64
0003a3 000a      	.DB  0x64,0x5D,0x3D,0x25,0x64,0xD,0xA,0x0
0003a4 7265
0003a5 6f72
0003a6 2072
0003a7 255b      	.DB  0x65,0x72,0x72,0x6F,0x72,0x20,0x5B,0x25
0003a8 5d64
0003a9 253d
0003aa 2d64
0003ab 252d      	.DB  0x64,0x5D,0x3D,0x25,0x64,0x2D,0x2D,0x25
0003ac 0d64
0003ad 000a
0003ae 6164
0003af 6174      	.DB  0x64,0xD,0xA,0x0,0x64,0x61,0x74,0x61
0003b0 6320
0003b1 726f
0003b2 6572
0003b3 7463      	.DB  0x20,0x63,0x6F,0x72,0x72,0x65,0x63,0x74
0003b4 0a0d
C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1378): warning: .cseg .db misalignment - padding zero byte
0003b5 0000      	.DB  0xD,0xA,0x0
                 _0x2020003:
C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1380): warning: .cseg .db misalignment - padding zero byte
0003b6 0007      	.DB  0x7
                 _0x20C0060:
C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1382): warning: .cseg .db misalignment - padding zero byte
0003b7 0001      	.DB  0x1
                 _0x20C0000:
0003b8 4e2d
0003b9 4e41
0003ba 4900
0003bb 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\cvavr\BIN\work\az9\az9\master\Debug\List\part1.asm(1385): warning: .cseg .db misalignment - padding zero byte
0003bc 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
0003bd 0001      	.DW  0x01
0003be 0002      	.DW  0x02
0003bf 0658      	.DW  __REG_BIT_VARS*2
                 
0003c0 000a      	.DW  0x0A
0003c1 0004      	.DW  0x04
0003c2 065a      	.DW  __REG_VARS*2
                 
0003c3 0059      	.DW  0x59
0003c4 0160      	.DW  _0x3
0003c5 0664      	.DW  _0x0*2
                 
0003c6 000b      	.DW  0x0B
0003c7 01b9      	.DW  _0x3+89
0003c8 06bd      	.DW  _0x0*2+89
                 
0003c9 000b      	.DW  0x0B
0003ca 01c4      	.DW  _0x3+100
0003cb 06c8      	.DW  _0x0*2+100
                 
0003cc 000a      	.DW  0x0A
0003cd 01cf      	.DW  _0x3+111
0003ce 06d3      	.DW  _0x0*2+111
                 
0003cf 0014      	.DW  0x14
0003d0 01d9      	.DW  _0x3+121
0003d1 06dd      	.DW  _0x0*2+121
                 
0003d2 0016      	.DW  0x16
0003d3 01ed      	.DW  _0x3+141
0003d4 06f8      	.DW  _0x0*2+148
                 
0003d5 0003      	.DW  0x03
0003d6 0205      	.DW  _data_spi
0003d7 071c      	.DW  _0x40003*2
                 
0003d8 0001      	.DW  0x01
0003d9 020c      	.DW  _twi_result
0003da 076c      	.DW  _0x2020003*2
                 
0003db 0001      	.DW  0x01
0003dc 043a      	.DW  __seed_G106
0003dd 076e      	.DW  _0x20C0060*2
                 
                 _0xFFFFFFFF:
0003de 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0003df 94f8      	CLI
0003e0 27ee      	CLR  R30
0003e1 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0003e2 e0f1      	LDI  R31,1
0003e3 bffb      	OUT  GICR,R31
0003e4 bfeb      	OUT  GICR,R30
0003e5 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0003e6 e08d      	LDI  R24,(14-2)+1
0003e7 e0a2      	LDI  R26,2
0003e8 27bb      	CLR  R27
                 __CLEAR_REG:
0003e9 93ed      	ST   X+,R30
0003ea 958a      	DEC  R24
0003eb f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0003ec e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0003ed e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0003ee e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0003ef 93ed      	ST   X+,R30
0003f0 9701      	SBIW R24,1
0003f1 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0003f2 e7ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0003f3 e0f7      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0003f4 9185      	LPM  R24,Z+
0003f5 9195      	LPM  R25,Z+
0003f6 9700      	SBIW R24,0
0003f7 f061      	BREQ __GLOBAL_INI_END
0003f8 91a5      	LPM  R26,Z+
0003f9 91b5      	LPM  R27,Z+
0003fa 9005      	LPM  R0,Z+
0003fb 9015      	LPM  R1,Z+
0003fc 01bf      	MOVW R22,R30
0003fd 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0003fe 9005      	LPM  R0,Z+
0003ff 920d      	ST   X+,R0
000400 9701      	SBIW R24,1
000401 f7e1      	BRNE __GLOBAL_INI_LOOP
000402 01fb      	MOVW R30,R22
000403 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000404 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000405 bfed      	OUT  SPL,R30
000406 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000407 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000408 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000409 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00040a 940c 040c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;#include <myheader.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <i2c_e.h>
                 ;#include <mandala2.h>
                 ;#include <glcdf.h>
                 ;
                 ;void main(void)
                 ; 0000 0008 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0009 
                 ; 0000 000A 
                 ; 0000 000B     int i;
                 ; 0000 000C     char buffer[12];
                 ; 0000 000D 
                 ; 0000 000E     port_init();
00040c 972c      	SBIW R28,12
                 ;	i -> R16,R17
                 ;	buffer -> Y+0
00040d 940e 0545 	CALL _port_init
                 ; 0000 000F     spi_init();
00040f 940e 04ec 	CALL _spi_init
                 ; 0000 0010     uart_init();
000411 940e 05a3 	CALL _uart_init
                 ; 0000 0011 
                 ; 0000 0012 
                 ; 0000 0013 
                 ; 0000 0014     puts("Hello,  Welcome to last online class in 1399\r\n           ***     MASTER MICRO    ***\r\r\r\n");
                +
000413 e6a0     +LDI R26 , LOW ( _0x3 + ( 0 ) )
000414 e0b1     +LDI R27 , HIGH ( _0x3 + ( 0 ) )
                 	__POINTW2MN _0x3,0
000415 940e 06f8 	CALL _puts
                 ; 0000 0015     adc_init_no_intterupt();
000417 d0be      	RCALL _adc_init_no_intterupt
                 ; 0000 0016 
                 ; 0000 0017 
                 ; 0000 0018     #asm("sei")
000418 9478      	sei
                 ; 0000 0019 
                 ; 0000 001A 
                 ; 0000 001B     glcddisplay();
000419 940e 06df 	CALL _glcddisplay
                 ; 0000 001C     delay_ms(1000);
00041b eea8      	LDI  R26,LOW(1000)
00041c e0b3      	LDI  R27,HIGH(1000)
00041d 940e 1229 	CALL _delay_ms
                 ; 0000 001D 
                 ; 0000 001E     puts("W EEPROM\r\n");
                +
00041f eba9     +LDI R26 , LOW ( _0x3 + ( 89 ) )
000420 e0b1     +LDI R27 , HIGH ( _0x3 + ( 89 ) )
                 	__POINTW2MN _0x3,89
000421 940e 06f8 	CALL _puts
                 ; 0000 001F     i2c_24lc32_frame();   //write to eeprom
000423 940e 06ac 	CALL _i2c_24lc32_frame
                 ; 0000 0020 
                 ; 0000 0021     puts("R EEPROM\r\n");
                +
000425 eca4     +LDI R26 , LOW ( _0x3 + ( 100 ) )
000426 e0b1     +LDI R27 , HIGH ( _0x3 + ( 100 ) )
                 	__POINTW2MN _0x3,100
000427 940e 06f8 	CALL _puts
                 ; 0000 0022     puts("Display\r\n");
                +
000429 ecaf     +LDI R26 , LOW ( _0x3 + ( 111 ) )
00042a e0b1     +LDI R27 , HIGH ( _0x3 + ( 111 ) )
                 	__POINTW2MN _0x3,111
00042b 940e 06f8 	CALL _puts
                 ; 0000 0023 
                 ; 0000 0024     i2c_24lc32_read_frame();  //read eeprom
00042d 940e 06c8 	CALL _i2c_24lc32_read_frame
                 ; 0000 0025 
                 ; 0000 0026 
                 ; 0000 0027     while (1)
                 _0x4:
                 ; 0000 0028     {
                 ; 0000 0029         I2C_Init2();
00042f 940e 05ae 	CALL _I2C_Init2
                 ; 0000 002A         puts( "\r\n Sending :       ");
                +
000431 eda9     +LDI R26 , LOW ( _0x3 + ( 121 ) )
000432 e0b1     +LDI R27 , HIGH ( _0x3 + ( 121 ) )
                 	__POINTW2MN _0x3,121
000433 940e 06f8 	CALL _puts
                 ; 0000 002B         I2C_Start_Wait(Slave_Write_Address);/* Start I2C communication with SLA+W */
000435 e2a0      	LDI  R26,LOW(32)
000436 940e 05f8 	CALL _I2C_Start_Wait
                 ; 0000 002C 		delay_ms(5);
000438 940e 109a 	CALL SUBOPT_0x0
                 ; 0000 002D 		for ( i = 0; i < count ; i++)
                 _0x8:
                +
00043a 300a     +CPI R16 , LOW ( 10 )
00043b e0e0     +LDI R30 , HIGH ( 10 )
00043c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
00043d f47c      	BRGE _0x9
                 ; 0000 002E 		{
                 ; 0000 002F 			sprintf(buffer, "%d    ",i);
00043e 940e 10a1 	CALL SUBOPT_0x1
000440 01f8      	MOVW R30,R16
000441 940e 10a9 	CALL SUBOPT_0x2
                 ; 0000 0030 			puts(buffer);
                 ; 0000 0031 			I2C_Write2(i);					/* Send Incrementing count */
000443 2fa0      	MOV  R26,R16
000444 940e 0612 	CALL _I2C_Write2
                 ; 0000 0032 			delay_ms(500);
000446 efa4      	LDI  R26,LOW(500)
000447 e0b1      	LDI  R27,HIGH(500)
000448 940e 1229 	CALL _delay_ms
                 ; 0000 0033 		}
                +
00044a 5f0f     +SUBI R16 , LOW ( - 1 )
00044b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00044c cfed      	RJMP _0x8
                 _0x9:
                 ; 0000 0034 		puts("\r\n Receiving :       ");
                +
00044d eead     +LDI R26 , LOW ( _0x3 + ( 141 ) )
00044e e0b1     +LDI R27 , HIGH ( _0x3 + ( 141 ) )
                 	__POINTW2MN _0x3,141
00044f 940e 06f8 	CALL _puts
                 ; 0000 0035 		I2C_Repeated_Start(Slave_Read_Address);	/* Repeated Start I2C communication with SLA+R */
000451 e2a1      	LDI  R26,LOW(33)
000452 940e 05ce 	CALL _I2C_Repeated_Start
                 ; 0000 0036 		delay_ms(5);
000454 940e 109a 	CALL SUBOPT_0x0
                 ; 0000 0037 		for ( i = 0; i < count; i++)
                 _0xB:
                +
000456 300a     +CPI R16 , LOW ( 10 )
000457 e0e0     +LDI R30 , HIGH ( 10 )
000458 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
000459 f504      	BRGE _0xC
                 ; 0000 0038 		{
                 ; 0000 0039 			if(i < count - 1)
                +
00045a 3009     +CPI R16 , LOW ( 9 )
00045b e0e0     +LDI R30 , HIGH ( 9 )
00045c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,9
00045d f42c      	BRGE _0xD
                 ; 0000 003A 				sprintf(buffer, "%d    ", I2C_Read_Ack());/* Read and send Acknowledge of data */
00045e 940e 10a1 	CALL SUBOPT_0x1
000460 940e 0629 	CALL _I2C_Read_Ack
000462 c004      	RJMP _0x10
                 ; 0000 003B 			else
                 _0xD:
                 ; 0000 003C 				sprintf(buffer, "%d    ", I2C_Read_Nack());/* Read and Not Acknowledge to data */
000463 940e 10a1 	CALL SUBOPT_0x1
000465 940e 062f 	CALL _I2C_Read_Nack
                 _0x10:
000467 27ff      	CLR  R31
000468 2766      	CLR  R22
000469 2777      	CLR  R23
00046a 940e 1471 	CALL __PUTPARD1
00046c e084      	LDI  R24,4
00046d 940e 0881 	CALL _sprintf
00046f 9628      	ADIW R28,8
                 ; 0000 003D 			puts(buffer);
000470 01de      	MOVW R26,R28
000471 940e 06f8 	CALL _puts
                 ; 0000 003E 			delay_ms(500);
000473 efa4      	LDI  R26,LOW(500)
000474 e0b1      	LDI  R27,HIGH(500)
000475 940e 1229 	CALL _delay_ms
                 ; 0000 003F 		}
                +
000477 5f0f     +SUBI R16 , LOW ( - 1 )
000478 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000479 cfdc      	RJMP _0xB
                 _0xC:
                 ; 0000 0040 		I2C_Stop2();   /* Stop I2C */
00047a 940e 05f2 	CALL _I2C_Stop2
                 ; 0000 0041         adc_send_to_spi();	// check the adc value change
00047c d030      	RCALL _adc_send_to_spi
                 ; 0000 0042 	}
00047d cfb1      	RJMP _0x4
                 ; 0000 0043 }
                 _0xF:
00047e cfff      	RJMP _0xF
                 ; .FEND
                 
                 	.DSEG
                 _0x3:
000160           	.BYTE 0xA3
                 ;
                 ;
                 ;
                 ;
                 ;
                 ; #include <myheader.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;
                 ;int adc_old_data=0;
                 ;
                 ;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
                 ;
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0001 000F {
                 
                 	.CSEG
                 _adc_isr:
                 ; .FSTART _adc_isr
00047f 938a      	ST   -Y,R24
000480 93aa      	ST   -Y,R26
000481 93ba      	ST   -Y,R27
000482 93ea      	ST   -Y,R30
000483 93fa      	ST   -Y,R31
000484 b7ef      	IN   R30,SREG
000485 93ea      	ST   -Y,R30
                 ; 0001 0010 static unsigned char input_index=0;
                 ; 0001 0011 // Read the AD conversion result
                 ; 0001 0012 adc_data[input_index]=ADCW;
000486 91e0 022a 	LDS  R30,_input_index_S0010000000
000488 e0a3      	LDI  R26,LOW(_adc_data)
000489 e0b2      	LDI  R27,HIGH(_adc_data)
00048a e0f0      	LDI  R31,0
00048b 0fee      	LSL  R30
00048c 1fff      	ROL  R31
00048d 0fae      	ADD  R26,R30
00048e 1fbf      	ADC  R27,R31
00048f b1e4      	IN   R30,0x4
000490 b1f5      	IN   R31,0x4+1
000491 93ed      	ST   X+,R30
000492 93fc      	ST   X,R31
                 ; 0001 0013 // Select next ADC input
                 ; 0001 0014 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
000493 91a0 022a 	LDS  R26,_input_index_S0010000000
000495 5faf      	SUBI R26,-LOW(1)
000496 93a0 022a 	STS  _input_index_S0010000000,R26
000498 30a1      	CPI  R26,LOW(0x1)
000499 f018      	BRLO _0x20003
                 ; 0001 0015    input_index=0;
00049a e0e0      	LDI  R30,LOW(0)
00049b 93e0 022a 	STS  _input_index_S0010000000,R30
                 ; 0001 0016 ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
                 _0x20003:
00049d 91e0 022a 	LDS  R30,_input_index_S0010000000
00049f 5ce0      	SUBI R30,-LOW(64)
0004a0 b9e7      	OUT  0x7,R30
                 ; 0001 0017 // Delay needed for the stabilization of the ADC input voltage
                 ; 0001 0018 delay_us(10);
                +
0004a1 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0004a2 958a     +DEC R24
0004a3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0001 0019 // Start the AD conversion
                 ; 0001 001A ADCSRA|=(1<<ADSC);
0004a4 9a36      	SBI  0x6,6
                 ; 0001 001B 
                 ; 0001 001C }
0004a5 91e9      	LD   R30,Y+
0004a6 bfef      	OUT  SREG,R30
0004a7 91f9      	LD   R31,Y+
0004a8 91e9      	LD   R30,Y+
0004a9 91b9      	LD   R27,Y+
0004aa 91a9      	LD   R26,Y+
0004ab 9189      	LD   R24,Y+
0004ac 9518      	RETI
                 ; .FEND
                 ;
                 ; void adc_send_to_spi(void)
                 ; 0001 001F 
                 ; 0001 0020  { char scr[20];
                 _adc_send_to_spi:
                 ; .FSTART _adc_send_to_spi
                 ; 0001 0021  adc_data[0]= read_adc(0);
0004ad 9764      	SBIW R28,20
                 ;	scr -> Y+0
0004ae e0a0      	LDI  R26,LOW(0)
0004af d02d      	RCALL _read_adc
0004b0 93e0 0203 	STS  _adc_data,R30
0004b2 93f0 0204 	STS  _adc_data+1,R31
                 ; 0001 0022  if (adc_data[0]!=  adc_old_data)
0004b4 91a0 0203 	LDS  R26,_adc_data
0004b6 91b0 0204 	LDS  R27,_adc_data+1
0004b8 164a      	CP   R4,R26
0004b9 065b      	CPC  R5,R27
0004ba f0c9      	BREQ _0x20004
                 ; 0001 0023 {
                 ; 0001 0024     SPDR=adc_data[0]&0x00ff;
0004bb 91e0 0203 	LDS  R30,_adc_data
0004bd b9ef      	OUT  0xF,R30
                 ; 0001 0025     delay_ms(10);
0004be e0aa      	LDI  R26,LOW(10)
0004bf e0b0      	LDI  R27,0
0004c0 940e 1229 	CALL _delay_ms
                 ; 0001 0026     SPDR=adc_data[0]>>8;
0004c2 91e0 0204 	LDS  R30,_adc_data+1
0004c4 70f0      	ANDI R31,HIGH(0x0)
0004c5 b9ef      	OUT  0xF,R30
                 ; 0001 0027     adc_old_data=adc_data[0];
                +
0004c6 9040 0203+LDS R4 , 0 + ( _adc_data )
0004c8 9050 0204+LDS R5 , 0 + ( _adc_data ) + 1
                 	__GETWRMN 4,5,0,_adc_data
                 ; 0001 0028     sprintf(scr,"\r\n ADC0=%d\r\n",adc_old_data);
0004ca 01fe      	MOVW R30,R28
0004cb 93fa      	ST   -Y,R31
0004cc 93ea      	ST   -Y,R30
                +
0004cd e0ee     +LDI R30 , LOW ( 2 * _0x20000 + ( 0 ) )
0004ce e0f7     +LDI R31 , HIGH ( 2 * _0x20000 + ( 0 ) )
                 	__POINTW1FN _0x20000,0
0004cf 93fa      	ST   -Y,R31
0004d0 93ea      	ST   -Y,R30
0004d1 01f2      	MOVW R30,R4
0004d2 940e 10a9 	CALL SUBOPT_0x2
                 ; 0001 0029     puts(scr);
                 ; 0001 002A }
                 ; 0001 002B }
                 _0x20004:
0004d4 940c 087f 	JMP  _0x214000E
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;void adc_init_no_intterupt(void)
                 ; 0001 0031 {
                 _adc_init_no_intterupt:
                 ; .FSTART _adc_init_no_intterupt
                 ; 0001 0032 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
0004d6 e4e0      	LDI  R30,LOW(64)
0004d7 b9e7      	OUT  0x7,R30
                 ; 0001 0033 ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0004d8 eee7      	LDI  R30,LOW(231)
0004d9 b9e6      	OUT  0x6,R30
                 ; 0001 0034 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0004da e0e0      	LDI  R30,LOW(0)
0004db bfe0      	OUT  0x30,R30
                 ; 0001 0035 
                 ; 0001 0036 }
0004dc 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void adc_init_interrupt(void)
                 ; 0001 003A {
                 ; 0001 003B ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
                 ; 0001 003C ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
                 ; 0001 003D SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
                 ; 0001 003E 
                 ; 0001 003F }
                 ;
                 ;
                 ;
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0001 0046 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0001 0047 ADMUX=adc_input | ADC_VREF_TYPE;
0004dd 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0004de 81e8      	LD   R30,Y
0004df 64e0      	ORI  R30,0x40
0004e0 b9e7      	OUT  0x7,R30
                 ; 0001 0048 // Delay needed for the stabilization of the ADC input voltage
                 ; 0001 0049 delay_us(10);
                +
0004e1 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0004e2 958a     +DEC R24
0004e3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0001 004A // Start the AD conversion
                 ; 0001 004B ADCSRA|=(1<<ADSC);
0004e4 9a36      	SBI  0x6,6
                 ; 0001 004C // Wait for the AD conversion to complete
                 ; 0001 004D while ((ADCSRA & (1<<ADIF))==0);
                 _0x20005:
0004e5 9b34      	SBIS 0x6,4
0004e6 cffe      	RJMP _0x20005
                 ; 0001 004E ADCSRA|=(1<<ADIF);
0004e7 9a34      	SBI  0x6,4
                 ; 0001 004F return ADCW;
0004e8 b1e4      	IN   R30,0x4
0004e9 b1f5      	IN   R31,0x4+1
0004ea 940c 0af7 	JMP  _0x214000B
                 ; 0001 0050 }
                 ; .FEND
                 ;
                 ; #include <myheader.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ; int data_spi[2]={99,99};
                 
                 	.DSEG
                 ; char num_data_spi=0;
                 ; bit new_data_spi=0;
                 ; bit master_micro=1;
                 ;
                 ; void spi_init(void)
                 ; 0002 000A {
                 
                 	.CSEG
                 _spi_init:
                 ; .FSTART _spi_init
                 ; 0002 000B // SPI initialization
                 ; 0002 000C // SPI Type: Master
                 ; 0002 000D // SPI Clock Rate: 2000.000 kHz
                 ; 0002 000E // SPI Clock Phase: Cycle Start
                 ; 0002 000F // SPI Clock Polarity: Low
                 ; 0002 0010 // SPI Data Order: MSB First
                 ; 0002 0011 SPCR=(1<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0004ec ede0      	LDI  R30,LOW(208)
0004ed b9ed      	OUT  0xD,R30
                 ; 0002 0012 SPSR=(0<<SPI2X);
0004ee e0e0      	LDI  R30,LOW(0)
0004ef b9ee      	OUT  0xE,R30
                 ; 0002 0013 
                 ; 0002 0014 // Clear the SPI interrupt flag
                 ; 0002 0015 #asm
                 ; 0002 0016     in   r30,spsr
0004f0 b1ee          in   r30,spsr
                 ; 0002 0017     in   r30,spdr
0004f1 b1ef          in   r30,spdr
                 ; 0002 0018 #endasm
                 ; 0002 0019 
                 ; 0002 001A 
                 ; 0002 001B }
0004f2 9508      	RET
                 ; .FEND
                 ; void spi_init_slave(void)
                 ; 0002 001D {
                 ; 0002 001E 
                 ; 0002 001F 
                 ; 0002 0020 
                 ; 0002 0021 // SPI initialization
                 ; 0002 0022 // SPI Type: Slave
                 ; 0002 0023 // SPI Clock Rate: 2000.000 kHz
                 ; 0002 0024 // SPI Clock Phase: Cycle Start
                 ; 0002 0025 // SPI Clock Polarity: Low
                 ; 0002 0026 // SPI Data Order: MSB First
                 ; 0002 0027 SPCR=(1<<SPIE) | (1<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
                 ; 0002 0028 SPSR=(0<<SPI2X);
                 ; 0002 0029 
                 ; 0002 002A #asm
                 ; 0002 002B     in   r30,spsr
                 ; 0002 002C     in   r30,spdr
                 ; 0002 002D #endasm
                 ; 0002 002E 
                 ; 0002 002F 
                 ; 0002 0030 
                 ; 0002 0031 }
                 ;
                 ;interrupt [SPI_STC] void spi_isr(void)
                 ; 0002 0034 {
                 _spi_isr:
                 ; .FSTART _spi_isr
0004f3 920a      	ST   -Y,R0
0004f4 921a      	ST   -Y,R1
0004f5 92fa      	ST   -Y,R15
0004f6 936a      	ST   -Y,R22
0004f7 937a      	ST   -Y,R23
0004f8 938a      	ST   -Y,R24
0004f9 939a      	ST   -Y,R25
0004fa 93aa      	ST   -Y,R26
0004fb 93ba      	ST   -Y,R27
0004fc 93ea      	ST   -Y,R30
0004fd 93fa      	ST   -Y,R31
0004fe b7ef      	IN   R30,SREG
0004ff 93ea      	ST   -Y,R30
                 ; 0002 0035 //unsigned char data;
                 ; 0002 0036 //data_spi[0]=SPDR;
                 ; 0002 0037 char scr[20];
                 ; 0002 0038 
                 ; 0002 0039 
                 ; 0002 003A data_spi[num_data_spi]=SPDR;
000500 9764      	SBIW R28,20
                 ;	scr -> Y+0
000501 91e0 0209 	LDS  R30,_num_data_spi
000503 e0a5      	LDI  R26,LOW(_data_spi)
000504 e0b2      	LDI  R27,HIGH(_data_spi)
000505 e0f0      	LDI  R31,0
000506 0fee      	LSL  R30
000507 1fff      	ROL  R31
000508 0fae      	ADD  R26,R30
000509 1fbf      	ADC  R27,R31
00050a b1ef      	IN   R30,0xF
00050b e0f0      	LDI  R31,0
00050c 93ed      	ST   X+,R30
00050d 93fc      	ST   X,R31
                 ; 0002 003B num_data_spi++;
00050e 91e0 0209 	LDS  R30,_num_data_spi
000510 5fef      	SUBI R30,-LOW(1)
000511 93e0 0209 	STS  _num_data_spi,R30
                 ; 0002 003C if (num_data_spi==2)
000513 91a0 0209 	LDS  R26,_num_data_spi
000515 30a2      	CPI  R26,LOW(0x2)
000516 f429      	BRNE _0x40004
                 ; 0002 003D {
                 ; 0002 003E new_data_spi=1;
000517 9468      	SET
000518 f820      	BLD  R2,0
                 ; 0002 003F num_data_spi=0;
000519 e0e0      	LDI  R30,LOW(0)
00051a 93e0 0209 	STS  _num_data_spi,R30
                 ; 0002 0040 }
                 ; 0002 0041 if (master_micro==0)
                 _0x40004:
00051c fc21      	SBRC R2,1
00051d c018      	RJMP _0x40005
                 ; 0002 0042 {
                 ; 0002 0043             if (new_data_spi==1)
00051e fe20      	SBRS R2,0
00051f c016      	RJMP _0x40006
                 ; 0002 0044        {
                 ; 0002 0045        sprintf(scr,"\r\n ADC0=%d apdated!! \r\n",((data_spi[0]&0x00ff)|(data_spi[1]<<8)));
000520 01fe      	MOVW R30,R28
000521 93fa      	ST   -Y,R31
000522 93ea      	ST   -Y,R30
                +
000523 e2e0     +LDI R30 , LOW ( 2 * _0x40000 + ( 0 ) )
000524 e0f7     +LDI R31 , HIGH ( 2 * _0x40000 + ( 0 ) )
                 	__POINTW1FN _0x40000,0
000525 93fa      	ST   -Y,R31
000526 93ea      	ST   -Y,R30
000527 91e0 0205 	LDS  R30,_data_spi
000529 91f0 0206 	LDS  R31,_data_spi+1
00052b 70f0      	ANDI R31,HIGH(0xFF)
00052c 01df      	MOVW R26,R30
                +
00052d 91f0 0207+LDS R31 , _data_spi + ( 2 )
                 	__GETB1HMN _data_spi,2
00052f e0e0      	LDI  R30,LOW(0)
000530 2bea      	OR   R30,R26
000531 2bfb      	OR   R31,R27
000532 940e 10a9 	CALL SUBOPT_0x2
                 ; 0002 0046         puts(scr);
                 ; 0002 0047        new_data_spi=0;
000534 94e8      	CLT
000535 f820      	BLD  R2,0
                 ; 0002 0048        }
                 ; 0002 0049  }
                 _0x40006:
                 ; 0002 004A }
                 _0x40005:
000536 9664      	ADIW R28,20
000537 91e9      	LD   R30,Y+
000538 bfef      	OUT  SREG,R30
000539 91f9      	LD   R31,Y+
00053a 91e9      	LD   R30,Y+
00053b 91b9      	LD   R27,Y+
00053c 91a9      	LD   R26,Y+
00053d 9199      	LD   R25,Y+
00053e 9189      	LD   R24,Y+
00053f 9179      	LD   R23,Y+
000540 9169      	LD   R22,Y+
000541 90f9      	LD   R15,Y+
000542 9019      	LD   R1,Y+
000543 9009      	LD   R0,Y+
000544 9518      	RETI
                 ; .FEND
                 ;
                 ; #include <myheader.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void port_init(void)
                 ; 0003 0005 {
                 
                 	.CSEG
                 _port_init:
                 ; .FSTART _port_init
                 ; 0003 0006 // Declare your local variables here
                 ; 0003 0007 
                 ; 0003 0008 // Input/Output Ports initialization
                 ; 0003 0009 // Port A initialization
                 ; 0003 000A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0003 000B DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000545 e0e0      	LDI  R30,LOW(0)
000546 bbea      	OUT  0x1A,R30
                 ; 0003 000C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0003 000D PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000547 bbeb      	OUT  0x1B,R30
                 ; 0003 000E 
                 ; 0003 000F // Port B initialization
                 ; 0003 0010 // Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0003 0011 DDRB=(1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000548 ebe0      	LDI  R30,LOW(176)
000549 bbe7      	OUT  0x17,R30
                 ; 0003 0012 // State: Bit7=0 Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0003 0013 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00054a e0e0      	LDI  R30,LOW(0)
00054b bbe8      	OUT  0x18,R30
                 ; 0003 0014 
                 ; 0003 0015 // Port C initialization
                 ; 0003 0016 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0003 0017 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00054c bbe4      	OUT  0x14,R30
                 ; 0003 0018 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0003 0019 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00054d bbe5      	OUT  0x15,R30
                 ; 0003 001A 
                 ; 0003 001B // Port D initialization
                 ; 0003 001C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0003 001D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00054e bbe1      	OUT  0x11,R30
                 ; 0003 001E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0003 001F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00054f bbe2      	OUT  0x12,R30
                 ; 0003 0020  }
000550 9508      	RET
                 ; .FEND
                 ;
                 ;/****************************************************************************
                 ;Image data created by the LCD Vision V1.05 font & image editor/converter
                 ;(C) Copyright 2011-2013 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Graphic LCD controller: KS0108 128x64 /CS1,/CS2
                 ;Image width: 425 pixels
                 ;Image height: 425 pixels
                 ;Color depth: 1 bits/pixel
                 ;Imported image file name: 61Z2JVe10wL._SX425_.jpg
                 ;
                 ;Exported monochrome image data size:
                 ;1028 bytes for displays organized as horizontal rows of bytes
                 ;1028 bytes for displays organized as rows of vertical bytes.
                 ;****************************************************************************/
                 ;
                 ;
                 ;
                 ;
                 ;flash unsigned char mandalapic[]=
                 ;{
                 ;/* Image width: 128 pixels */
                 ;0x80, 0x00,
                 ;/* Image height: 64 pixels */
                 ;0x40, 0x00,
                 ;//#ifndef _GLCD_DATA_BYTEY_
                 ;///* Image data for monochrome displays organized
                 ;//   as horizontal rows of bytes */
                 ;//0xF0, 0xFF, 0x3F, 0xFD, 0x57, 0x2F, 0x9F, 0xFF,
                 ;//0xFF, 0xBD, 0x3C, 0xFF, 0xEC, 0xF6, 0xBF, 0xFF,
                 ;//0xF7, 0xFF, 0xDF, 0x3E, 0x4B, 0xBE, 0xEF, 0xFF,
                 ;//0xFF, 0xFB, 0x9F, 0xDE, 0xF9, 0xF3, 0x5F, 0xFF,
                 ;//0xFF, 0xFF, 0x9E, 0x7F, 0xFC, 0x7D, 0x9F, 0xBF,
                 ;//0xFE, 0xFF, 0x7F, 0xAF, 0xF3, 0xFD, 0xDF, 0xFF,
                 ;//0xFF, 0xFF, 0xB9, 0x7F, 0x2F, 0x7B, 0x8F, 0x9F,
                 ;//0xE9, 0xFF, 0xFF, 0xEB, 0xFF, 0xFC, 0xB8, 0xFF,
                 ;//0xFF, 0xFF, 0xCA, 0xFF, 0xD0, 0xFF, 0xDE, 0xB7,
                 ;//0xDD, 0x7F, 0xFB, 0xD7, 0xFF, 0x7B, 0x9D, 0xFF,
                 ;//0xFF, 0x7F, 0xE6, 0xFB, 0x75, 0xF4, 0xFF, 0x79,
                 ;//0xBC, 0xAE, 0xD5, 0xCF, 0xFD, 0xFD, 0xFF, 0xEF,
                 ;//0xFF, 0x7F, 0xF4, 0xDC, 0xB7, 0xF1, 0xFF, 0x86,
                 ;//0x61, 0x89, 0x94, 0xFF, 0xFA, 0xFF, 0xFF, 0xF9,
                 ;//0xFF, 0xFF, 0xFC, 0xBE, 0xEF, 0xFC, 0xFF, 0x30,
                 ;//0x7C, 0x28, 0x33, 0xFE, 0xD4, 0xFF, 0xFF, 0xFA,
                 ;//0xFF, 0xFF, 0xEA, 0x7F, 0x9F, 0x7F, 0x77, 0xEF,
                 ;//0x93, 0xFE, 0x4E, 0xF9, 0x3A, 0xFF, 0x7F, 0xFE,
                 ;//0xFF, 0x7F, 0xEA, 0x3E, 0xBE, 0x1E, 0xD1, 0xDF,
                 ;//0xFC, 0xFF, 0x4F, 0xF8, 0xB2, 0xC2, 0xFF, 0xFF,
                 ;//0xFF, 0x7F, 0xC5, 0x8B, 0x7D, 0x4F, 0x5D, 0x2B,
                 ;//0xFF, 0xFF, 0xFF, 0x7A, 0x59, 0x4D, 0xE8, 0xFF,
                 ;//0xFF, 0x7F, 0xD2, 0xB7, 0xF0, 0x37, 0x7F, 0xF6,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x03, 0x83, 0xFF,
                 ;//0xFF, 0x7F, 0xF2, 0xBF, 0xF4, 0xCF, 0x83, 0xF9,
                 ;//0xFF, 0xFD, 0xFF, 0xBF, 0xFE, 0x37, 0x7E, 0xFF,
                 ;//0xFF, 0x7F, 0xF3, 0xFF, 0xCD, 0x4B, 0x38, 0xFE,
                 ;//0xFF, 0xFF, 0xFF, 0x3F, 0xFD, 0xDF, 0x67, 0xF8,
                 ;//0xFF, 0x7F, 0xF3, 0xFF, 0xF3, 0x57, 0xCB, 0xFF,
                 ;//0xFF, 0xFF, 0xAF, 0x5F, 0xFD, 0xFF, 0x39, 0xC1,
                 ;//0xFF, 0xFF, 0xF3, 0xFF, 0xDF, 0xD7, 0xBB, 0xBF,
                 ;//0xFF, 0xFB, 0xC7, 0x9F, 0x3E, 0xFF, 0x8F, 0x4D,
                 ;//0xFF, 0xFF, 0x63, 0x0F, 0xFF, 0x33, 0xC0, 0xFF,
                 ;//0x7F, 0xEB, 0xF7, 0x77, 0xCF, 0xCC, 0x7F, 0xB7,
                 ;//0xFF, 0xFF, 0x6A, 0xFF, 0xFD, 0xAF, 0xF3, 0xFF,
                 ;//0x5F, 0xB5, 0xFF, 0xCB, 0x2F, 0xD3, 0xFC, 0x57,
                 ;//0xFF, 0xFF, 0xEA, 0xFF, 0xFD, 0xB7, 0xFA, 0x8B,
                 ;//0xBF, 0xFF, 0xFE, 0xA7, 0xF7, 0x2C, 0xF3, 0x4F,
                 ;//0xFE, 0xFF, 0xEC, 0x55, 0x8A, 0x4F, 0xFA, 0x3C,
                 ;//0xD7, 0x7F, 0xFE, 0xE9, 0x77, 0xFB, 0x51, 0xBF,
                 ;//0xF2, 0xFF, 0xCC, 0xBF, 0xE9, 0x37, 0x7F, 0xFF,
                 ;//0xEB, 0xFF, 0xFF, 0xD5, 0xD3, 0x0C, 0xA7, 0x7D,
                 ;//0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xAB, 0x7E, 0xFF,
                 ;//0xF7, 0xFF, 0xFF, 0xEE, 0xBE, 0x0E, 0x47, 0x7A,
                 ;//0xFF, 0x7F, 0xBD, 0xFF, 0xFF, 0x95, 0xDF, 0xFF,
                 ;//0xF1, 0xFF, 0x76, 0xFB, 0x28, 0x7F, 0xFE, 0xF4,
                 ;//0xFF, 0x7F, 0x85, 0xF7, 0x7F, 0x43, 0xBF, 0xFF,
                 ;//0xFF, 0x7F, 0x74, 0x74, 0x57, 0x0D, 0x3E, 0xFE,
                 ;//0xFC, 0x7F, 0xE5, 0xBD, 0xFC, 0xA8, 0xDF, 0xFF,
                 ;//0xFF, 0x7F, 0xBF, 0x78, 0xDA, 0x93, 0xC1, 0xC9,
                 ;//0xF7, 0x7F, 0xE5, 0xFF, 0xBC, 0xF2, 0xDF, 0xFF,
                 ;//0x3F, 0x9F, 0x5F, 0x3F, 0x8B, 0xD7, 0x59, 0xAA,
                 ;//0xFD, 0x7F, 0xED, 0x3F, 0x5F, 0xE1, 0xFF, 0xFF,
                 ;//0x43, 0xFD, 0x1F, 0xDD, 0x35, 0x0F, 0x3C, 0x6F,
                 ;//0xFF, 0x7F, 0xED, 0x3F, 0x9E, 0xF0, 0xDF, 0x7F,
                 ;//0xFD, 0xFA, 0xDF, 0x5C, 0xBB, 0x67, 0xBA, 0xDF,
                 ;//0xF7, 0x7F, 0xD6, 0xFF, 0x4F, 0xFF, 0xBF, 0x3F,
                 ;//0xFE, 0xF5, 0xBF, 0x3E, 0xCB, 0x0F, 0x7A, 0x20,
                 ;//0xF9, 0xFF, 0xC7, 0xFF, 0x2F, 0xF3, 0xFF, 0x1F,
                 ;//0xFF, 0xCF, 0xBF, 0x2E, 0x29, 0x1D, 0x7A, 0x58,
                 ;//0xFC, 0xFF, 0x38, 0xFE, 0xAF, 0xF9, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0x0F, 0xD7, 0x2D, 0xFE, 0xFA, 0xFE,
                 ;//0xF9, 0xFF, 0xF5, 0xFF, 0x8E, 0xFE, 0xFF, 0x9F,
                 ;//0xFF, 0xFF, 0xDF, 0x77, 0xD7, 0xBA, 0xF8, 0xFE,
                 ;//0xFF, 0xFF, 0xC9, 0xEE, 0xCF, 0xF2, 0xFF, 0xCC,
                 ;//0xFF, 0x2F, 0x67, 0x0B, 0xB5, 0xBA, 0xB8, 0xB8,
                 ;//0xFF, 0xFF, 0xBB, 0xFE, 0x4F, 0xFA, 0x3F, 0xEE,
                 ;//0xFF, 0xC5, 0xB7, 0xFB, 0x2D, 0x3B, 0xBD, 0xB8,
                 ;//0xF3, 0xFF, 0xDF, 0xFE, 0x1E, 0xFD, 0xCF, 0xDF,
                 ;//0x7F, 0x2A, 0xCF, 0x37, 0x4E, 0x7C, 0xB9, 0x5F,
                 ;//0xFB, 0xFF, 0x3F, 0xBE, 0xBF, 0xFA, 0xDF, 0xDF,
                 ;//0xBF, 0xFA, 0xAF, 0x47, 0x5D, 0x7A, 0x75, 0xBE,
                 ;//0xF0, 0xFF, 0xBF, 0xFD, 0x7F, 0xFB, 0xE7, 0xEF,
                 ;//0x3F, 0xFE, 0xAB, 0x6B, 0xBB, 0x74, 0xB3, 0x1B,
                 ;//0xFA, 0xFF, 0x7F, 0xFD, 0x7F, 0xFD, 0xFB, 0xCF,
                 ;//0x3F, 0xFF, 0x8B, 0xB9, 0xF6, 0xFC, 0xBA, 0x3E,
                 ;//0xFF, 0xFF, 0x7F, 0xFC, 0x7B, 0x7A, 0xF7, 0xFF,
                 ;//0xCF, 0xFF, 0xC7, 0xB5, 0xED, 0xF2, 0x72, 0xCE,
                 ;//0xF7, 0xFF, 0x3F, 0xFF, 0xFC, 0xFD, 0xFB, 0xDF,
                 ;//0x9F, 0xFF, 0xC3, 0x55, 0xDF, 0xF5, 0x77, 0xAC,
                 ;//0xEF, 0xFF, 0xFF, 0xFF, 0xF1, 0xFE, 0xF7, 0x3F,
                 ;//0xEF, 0xFF, 0xBF, 0xC1, 0xA6, 0xEF, 0x7D, 0x8F,
                 ;//0xF9, 0xFF, 0xFF, 0x8F, 0xFC, 0xFD, 0xFF, 0x7F,
                 ;//0xFE, 0xFF, 0xAF, 0xA3, 0xD1, 0xD7, 0x3B, 0xCF,
                 ;//0xF7, 0xFF, 0xFF, 0xA7, 0xFF, 0xFC, 0xF3, 0xF7,
                 ;//0xEF, 0xFF, 0x93, 0xF7, 0xCA, 0xCF, 0x37, 0xFE,
                 ;//0xFB, 0xFF, 0xFF, 0xF7, 0x7F, 0xFA, 0xFB, 0xEB,
                 ;//0xDF, 0xFF, 0xAB, 0xCB, 0x55, 0xFF, 0x77, 0xF6,
                 ;//0xFF, 0xFF, 0xFF, 0xEB, 0x7B, 0xF9, 0xF7, 0xF7,
                 ;//0xC7, 0xFF, 0xDF, 0xB7, 0xB7, 0xBE, 0xFF, 0xF7,
                 ;//0xFF, 0xFF, 0xFF, 0xF5, 0xBF, 0xFD, 0xCF, 0xFF,
                 ;//0xCF, 0xFF, 0x2F, 0x5B, 0xBF, 0x3B, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0x7F, 0x7D, 0xFB, 0xFC, 0xDF, 0xF9,
                 ;//0xFF, 0xFF, 0xAF, 0xAF, 0x7D, 0xFC, 0x4F, 0xFE,
                 ;//0xFF, 0xFF, 0xFF, 0xBE, 0x7D, 0xFC, 0xBF, 0xFB,
                 ;//0xFF, 0xFF, 0xD7, 0x47, 0xFA, 0xF5, 0xAB, 0x7D,
                 ;//0xEB, 0xFF, 0x3F, 0x9F, 0xBE, 0xFD, 0xFF, 0xF9,
                 ;//0x3F, 0xC7, 0x57, 0x2F, 0xF3, 0xFB, 0x06, 0xF5,
                 ;//0xF7, 0xFF, 0xFF, 0x3F, 0x7E, 0xF8, 0xFB, 0xFF,
                 ;//0x33, 0x31, 0x6F, 0x3F, 0xE9, 0xBF, 0x2D, 0xF1,
                 ;//0xFF, 0xFF, 0x7F, 0xDF, 0xFF, 0xF2, 0xFB, 0xBF,
                 ;//0x6D, 0x4C, 0xAE, 0x5E, 0x52, 0x5F, 0xCB, 0xCC,
                 ;//0xEB, 0xFF, 0xBF, 0xCB, 0xFB, 0xFA, 0xFE, 0x2F,
                 ;//0x84, 0x4C, 0x6F, 0xDD, 0xFF, 0xDE, 0x36, 0xCD,
                 ;//0xEF, 0xFF, 0xFF, 0xF3, 0xF3, 0xF7, 0xFE, 0xCB,
                 ;//0xF0, 0x98, 0xDE, 0xFA, 0xFF, 0x0C, 0x83, 0xA7,
                 ;//0xEF, 0xFF, 0xFF, 0xED, 0xEA, 0xE5, 0xFF, 0xD4,
                 ;//0xFE, 0x7F, 0x3E, 0xFF, 0xFF, 0x5F, 0xBE, 0x76,
                 ;//0xE7, 0xFF, 0xFF, 0xF7, 0xF0, 0xF3, 0x7F, 0x19,
                 ;//0xFF, 0xFF, 0xFD, 0x7C, 0xCD, 0xCF, 0x33, 0x4C,
                 ;//0xF6, 0xFF, 0xFF, 0x75, 0xF8, 0xD7, 0x9F, 0xC9,
                 ;//0xFF, 0xF9, 0x3F, 0x7F, 0x76, 0x3F, 0xCC, 0x3F,
                 ;//0xF6, 0xFF, 0x7F, 0xBA, 0xDF, 0xCF, 0x47, 0xFA,
                 ;//0x3F, 0x83, 0xFF, 0xDF, 0xB1, 0xCE, 0xF3, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0x5A, 0xFF, 0xFF, 0x3B, 0xFD,
                 ;//0xCC, 0x2C, 0xFF, 0x27, 0x2C, 0x7D, 0xFA, 0xF9,
                 ;//0xFF, 0xFF, 0x3F, 0xBD, 0x8E, 0xFF, 0x49, 0x7F,
                 ;//0x33, 0x53, 0xF0, 0xC3, 0x47, 0xBD, 0xBE, 0xD5,
                 ;//0xFF, 0xFF, 0xFF, 0x4C, 0x5F, 0xFE, 0x84, 0x6F,
                 ;//0xE1, 0x7B, 0xEA, 0x77, 0x8B, 0x5E, 0x1F, 0x99,
                 ;//0xFF, 0xFF, 0x3F, 0x3F, 0xEF, 0x3F, 0xE3, 0x53,
                 ;//0x3C, 0x36, 0xE5, 0x8B, 0xDD, 0xB8, 0x2F, 0x57,
                 ;//0xFF, 0xFF, 0x3F, 0xBF, 0xFF, 0x5F, 0xFE, 0x6D,
                 ;//0x91, 0xED, 0xEE, 0xF0, 0x76, 0x7D, 0xDF, 0xAF,
                 ;//0xFF, 0xFF, 0x7F, 0xA7, 0xFB, 0x84, 0xFD, 0x12,
                 ;//0x37, 0xFB, 0xF5, 0x55, 0x73, 0x3F, 0xEB, 0x3F,
                 ;//0xFF, 0xFF, 0x3F, 0xF6, 0x7B, 0x6D, 0xBF, 0x5A,
                 ;//0xDC, 0xD6, 0xF5, 0x0A, 0xC9, 0xFF, 0xCF, 0x7F,
                 ;//#else
                 ;///* Image data for monochrome displays organized
                 ;//   as rows of vertical bytes */
                 ;
                 ;0xFE, 0xFE, 0xFE, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F,
                 ;0x0B, 0x37, 0xE7, 0x9F, 0xCF, 0xE9, 0xF2, 0xFE,
                 ;0x3D, 0xBE, 0xDF, 0xFF, 0xFF, 0xBF, 0x7D, 0xF1,
                 ;0xEB, 0xCB, 0xED, 0x8E, 0x75, 0xEC, 0xB7, 0xD4,
                 ;0x5D, 0x1B, 0xB7, 0x9F, 0xFE, 0xFF, 0xFC, 0xF2,
                 ;0xEF, 0xFF, 0xFF, 0xFF, 0xF5, 0xE2, 0xF2, 0xFF,
                 ;0x3F, 0x5F, 0x5F, 0x2F, 0xBF, 0xB7, 0x23, 0x5F,
                 ;0x5B, 0x07, 0xB7, 0xBF, 0xB7, 0xEF, 0xDF, 0x3F,
                 ;0x5F, 0x3E, 0x3D, 0xFF, 0x1F, 0xBF, 0x1E, 0x6F,
                 ;0xBE, 0x9E, 0x6F, 0x1F, 0xFF, 0x9D, 0x3C, 0x7A,
                 ;0x7D, 0xFF, 0xF7, 0xEF, 0xD3, 0xCD, 0xFB, 0xFF,
                 ;0x3E, 0x5C, 0xB9, 0x7B, 0xFE, 0x7F, 0xFF, 0xFF,
                 ;0xF6, 0xD3, 0xED, 0xFC, 0xFF, 0xFF, 0xFF, 0xEF,
                 ;0xF7, 0xE7, 0xF7, 0xFF, 0xFF, 0xE9, 0xE6, 0xFD,
                 ;0x7F, 0xBF, 0x3F, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF,
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x81,
                 ;0xE4, 0xFB, 0x04, 0x03, 0xF8, 0xF3, 0xFF, 0xFF,
                 ;0xFD, 0xFF, 0xFB, 0xF7, 0xFB, 0xFB, 0xE1, 0xFC,
                 ;0xE5, 0xC3, 0xB7, 0xA7, 0xDF, 0x5E, 0xFC, 0xFB,
                 ;0xFD, 0xFF, 0xDF, 0x37, 0xCB, 0x09, 0xF5, 0x90,
                 ;0xDF, 0xD9, 0x0D, 0xEC, 0xAF, 0xA9, 0x4F, 0xD2,
                 ;0xD7, 0xEF, 0xEB, 0xF7, 0xFA, 0xFD, 0x7B, 0xFB,
                 ;0xFD, 0xFD, 0xFE, 0xFE, 0xFF, 0xFE, 0xFE, 0xFF,
                 ;0xFE, 0xEF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;0xFE, 0xFF, 0xFF, 0x7F, 0x3C, 0x7C, 0xBF, 0xFC,
                 ;0xF9, 0xFC, 0xF8, 0xFF, 0xFF, 0x3F, 0x4F, 0x9B,
                 ;0x64, 0x93, 0xF8, 0xFD, 0xFF, 0xFB, 0x7C, 0x7A,
                 ;0xFD, 0xFB, 0xF5, 0xE5, 0xF1, 0xD1, 0xE7, 0xE3,
                 ;0xEB, 0xBB, 0xB3, 0xD7, 0x53, 0x77, 0x37, 0x8E,
                 ;0xDE, 0x1F, 0x9F, 0xBF, 0x3F, 0x3F, 0xFF, 0x7F,
                 ;0xE7, 0xFF, 0xEF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F,
                 ;0xE1, 0x27, 0xF8, 0x7E, 0x60, 0x6F, 0x1F, 0xFC,
                 ;0xFF, 0xF7, 0xFF, 0x77, 0xFE, 0xF6, 0xEE, 0xF6,
                 ;0xF7, 0xE9, 0xE7, 0xFF, 0xE7, 0xF7, 0xF7, 0x7F,
                 ;0xFF, 0xBF, 0x5E, 0x2A, 0x55, 0x37, 0x88, 0x66,
                 ;0xD2, 0xFE, 0xF0, 0xFC, 0xFE, 0xBE, 0x7F, 0xCF,
                 ;0xF7, 0xF7, 0xFB, 0xFF, 0xFB, 0xFB, 0xF3, 0xF7,
                 ;0xFF, 0xBF, 0xAF, 0x97, 0xEF, 0xF5, 0xFB, 0xFC,
                 ;0xFF, 0xFD, 0xFE, 0xFD, 0xFE, 0xFF, 0xFD, 0x77,
                 ;0x33, 0x7F, 0xFF, 0x3E, 0xFF, 0xFF, 0xFF, 0x3F,
                 ;0x5F, 0x67, 0xB5, 0x6A, 0xD1, 0xED, 0xFB, 0x7E,
                 ;
                 ;0x9F, 0xBF, 0xAF, 0x63, 0xBC, 0x6E, 0x9D, 0x35,
                 ;0xCA, 0x6A, 0xF5, 0xFD, 0x4A, 0x4C, 0x4B, 0x0B,
                 ;
                 ;0x3D, 0xF5, 0xF3, 0xC3, 0xCF, 0xD7, 0x6F, 0x56,
                 ;0x1F, 0xAF, 0xDF, 0xBC, 0xFB, 0xF9, 0xF6, 0xC9,
                 ;0xBE, 0x1A, 0x5F, 0xED, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
                 ;
                 ;0xAF, 0x30, 0xBF, 0x4C, 0xD0, 0xCF, 0xBF, 0xBF,
                 ;0xBF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xF2, 0xF3,
                 ;0x74, 0xFC, 0xFF, 0xFF, 0x0F, 0x63, 0x15, 0xCB,
                 ;0x74, 0xB2, 0x90, 0xD1, 0xFA, 0xFF, 0xFE, 0xFF,
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF4, 0xEF, 0xFF,
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0x4F, 0xC7,
                 ;
                 ;0xEF, 0xF7, 0xFB, 0xFB, 0xFB, 0xFB, 0xFD, 0xF9,
                 ;0xF7, 0xEB, 0xF7, 0xEF, 0xDF, 0xDD, 0xFD, 0xFE,
                 ;
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x31, 0x8A, 0xB9,
                 ;0xC6, 0xF2, 0xFE, 0x3F, 0xDF, 0xB3, 0xCD, 0x44,
                 ;0xFE, 0x9B, 0xC4, 0x7B, 0x8D, 0x6C, 0x91, 0x9B,
                 ;0x3F, 0xDF, 0x7E, 0xF4, 0xE3, 0xC8, 0x4A, 0xC3,
                 ;0x03, 0x78, 0x04, 0xFE, 0xFE, 0xFC, 0xF3, 0xC9,
                 ;0x0D, 0xCE, 0xCC, 0xEF, 0xE8, 0xD6, 0xED, 0xCB,
                 ;
                 ;0xCF, 0xEF, 0xC3, 0x6B, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;0xFF, 0xFE, 0xFC, 0xFF, 0xFE, 0xFA, 0x65, 0x17,
                 ;0xB0, 0x8F, 0xFF, 0xFF, 0xFE, 0xFF, 0xF7, 0xFF,
                 ;
                 ;0x7B, 0x7F, 0xBF, 0xFF, 0xFC, 0xF8, 0xF3, 0x89,
                 ;0xB4, 0x5B, 0xA4, 0xFE, 0xFF, 0xFF, 0xFF, 0xBF,
                 ;0xFF, 0xFF, 0x5F, 0xAF, 0xEB, 0xF3, 0xFD, 0xFD,
                 ;0xFC, 0xFE, 0xFF, 0xFF, 0xCC, 0x52, 0xFF, 0xFF,
                 ;
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x3F, 0x47, 0xCB,
                 ;0xE3, 0xFD, 0xF3, 0xFD, 0xF8, 0xFD, 0xFA, 0xFA,
                 ;0xFF, 0xFF, 0x4F, 0x3C, 0x02, 0x1B, 0xC5, 0xFE,
                 ;0xFF, 0x1F, 0xCC, 0x33, 0xE6, 0x76, 0x9A, 0x62,
                 ;0xDB, 0xB4, 0xEF, 0xDE, 0xB9, 0x73, 0xEC, 0xF1,
                 ;0x82, 0x4B, 0xB4, 0x2F, 0xFF, 0xFF, 0xFC, 0xE1,
                 ;0x9E, 0xF0, 0x8A, 0x27, 0xFF, 0xFF, 0xC8, 0x37,
                 ;0x14, 0x7C, 0xEC, 0xFF, 0x3F, 0xAB, 0x44, 0xCB,
                 ;
                 ;0xFF, 0xFD, 0xF5, 0xFB, 0xFE, 0xFF, 0xFF, 0xFF,
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF,
                 ;0x7F, 0x9F, 0xEF, 0xD3, 0xE9, 0xFD, 0x79, 0xBF,
                 ;0xFD, 0x7C, 0xAE, 0xFE, 0xFF, 0xFF, 0xDF, 0x67,
                 ;0x32, 0x09, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;0xFF, 0xFF, 0xF3, 0xEA, 0xDF, 0x9F, 0x7F, 0xFF,
                 ;0xFF, 0xBF, 0x37, 0xEB, 0xF7, 0xFF, 0xFE, 0xFC,
                 ;0xFD, 0xFF, 0xFF, 0xEF, 0xCA, 0xC7, 0xFF, 0xFF,
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;0xFF, 0xFF, 0xF3, 0x7B, 0x95, 0x6B, 0x90, 0xDF,
                 ;0xFF, 0xFE, 0xD4, 0x68, 0x34, 0x56, 0xAD, 0x5F,
                 ;
                 ;0x7A, 0xB5, 0x79, 0xE4, 0xFA, 0xF1, 0xCE, 0xB7,
                 ;0xAF, 0x3F, 0xDF, 0x7D, 0xFA, 0xF9, 0xCF, 0xDF,
                 ;0xFF, 0xFE, 0x7D, 0xF3, 0x3F, 0xBF, 0x79, 0xB0,
                 ;0xB3, 0x7F, 0xFF, 0xE7, 0xFC, 0xFC, 0xFE, 0x7F,
                 ;0x7F, 0xFF, 0xF6, 0x3D, 0x86, 0xFF, 0xFF, 0xFF,
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 0xFA,
                 ;0xFF, 0x5F, 0xE7, 0x2F, 0xD7, 0xF2, 0xFC, 0x7D,
                 ;
                 ;0x1C, 0x3F, 0x07, 0xAF, 0xDF, 0xFF, 0xFE, 0xFD,
                 ;0xF1, 0xDC, 0xB1, 0x0B, 0xDF, 0x7F, 0xFF, 0xFF,
                 ;0xE7, 0xFF, 0xF9, 0xFF, 0xFF, 0x7F, 0x7F, 0xBF,
                 ;0xDF, 0x1E, 0x2E, 0xDF, 0x67, 0x0F, 0xB3, 0xB7,
                 ;
                 ;0xC7, 0xE3, 0xED, 0xE5, 0xF3, 0xF7, 0xF4, 0xF8,
                 ;0xE3, 0x61, 0x6D, 0xFC, 0xF2, 0xE2, 0xED, 0xD1,
                 ;0xCB, 0xBF, 0xFF, 0xFE, 0xF1, 0xEE, 0x5B, 0x54,
                 ;0xAB, 0xB7, 0xEF, 0xFF, 0xFE, 0xF3, 0xFC, 0x38,
                 ;0x7B, 0xBD, 0xF8, 0x7A, 0xBD, 0xBB, 0xFF, 0x7B,
                 ;0xE7, 0xEF, 0xFE, 0xFF, 0xAF, 0x83, 0x6D, 0x4B,
                 ;0x56, 0x7D, 0xAB, 0xA6, 0x68, 0x6A, 0x84, 0xB4,
                 ;0x9B, 0xB0, 0xFD, 0xCC, 0xA3, 0xB3, 0x6F, 0x1F,
                 ;0xFE, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x4B, 0x0A,
                 ;0x74, 0xF3, 0xFC, 0x3F, 0xB7, 0xF5, 0x8A, 0xE5,
                 ;
                 ;0xFB, 0xFF, 0x3F, 0xFF, 0xEB, 0xF2, 0xFB, 0x77,
                 ;0xB7, 0x3F, 0xFF, 0xBF, 0x3E, 0x9E, 0xAF, 0x4F,
                 ;0xD7, 0xB3, 0xE9, 0xE6, 0xE2, 0xF2, 0x75, 0xF8,
                 ;0x3E, 0xDD, 0x2E, 0xAF, 0xD7, 0x2F, 0xBF, 0x03,
                 ;0x6D, 0x45, 0xD3, 0x93, 0xF5, 0x5D, 0x8A, 0xAA,
                 ;0x6D, 0xDD, 0xB2, 0x6A, 0xDC, 0x7A, 0xEC, 0xE1,
                 ;0xD3, 0x2B, 0xF3, 0x2B, 0xC7, 0xFF, 0xFF, 0xFF,
                 ;0x5F, 0x9F, 0x4B, 0x91, 0x69, 0x2A, 0x6D, 0x35,
                 ;0xDD, 0x6C, 0x36, 0x9A, 0x71, 0x63, 0xF4, 0x99,
                 ;0xE6, 0xC9, 0xEF, 0xFF, 0xFE, 0xF6, 0xAB, 0x95,
                 ;0xF9, 0xFF, 0xBC, 0xFE, 0x2F, 0x57, 0xE3, 0xE7,
                 ;0xFF, 0xF1, 0xF5, 0xEB, 0xDF, 0xE3, 0x97, 0x2F,
                 ;//#endif
                 ;};
                 ;
                 ;//
                 ;// flash unsigned char mandalapic[]=
                 ;//{
                 ;//0xFE, 0xFE, 0xFE, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F,
                 ;//0x0B, 0x37, 0xE7, 0x9F, 0xCF, 0xE9, 0xF2, 0xFE,
                 ;//0x3D, 0xBE, 0xDF, 0xFF, 0xFF, 0xBF, 0x7D, 0xF1,
                 ;//0xEB, 0xCB, 0xED, 0x8E, 0x75, 0xEC, 0xB7, 0xD4,
                 ;//0x5D, 0x1B, 0xB7, 0x9F, 0xFE, 0xFF, 0xFC, 0xF2,
                 ;//0xEF, 0xFF, 0xFF, 0xFF, 0xF5, 0xE2, 0xF2, 0xFF,
                 ;//0x3F, 0x5F, 0x5F, 0x2F, 0xBF, 0xB7, 0x23, 0x5F,
                 ;//0x5B, 0x07, 0xB7, 0xBF, 0xB7, 0xEF, 0xDF, 0x3F,
                 ;//0x5F, 0x3E, 0x3D, 0xFF, 0x1F, 0xBF, 0x1E, 0x6F,
                 ;//0xBE, 0x9E, 0x6F, 0x1F, 0xFF, 0x9D, 0x3C, 0x7A,
                 ;//0x7D, 0xFF, 0xF7, 0xEF, 0xD3, 0xCD, 0xFB, 0xFF,
                 ;//0x3E, 0x5C, 0xB9, 0x7B, 0xFE, 0x7F, 0xFF, 0xFF,
                 ;//0xF6, 0xD3, 0xED, 0xFC, 0xFF, 0xFF, 0xFF, 0xEF,
                 ;//0xF7, 0xE7, 0xF7, 0xFF, 0xFF, 0xE9, 0xE6, 0xFD,
                 ;//0x7F, 0xBF, 0x3F, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x81,
                 ;//0xE4, 0xFB, 0x04, 0x03, 0xF8, 0xF3, 0xFF, 0xFF,
                 ;//0xFD, 0xFF, 0xFB, 0xF7, 0xFB, 0xFB, 0xE1, 0xFC,
                 ;//0xE5, 0xC3, 0xB7, 0xA7, 0xDF, 0x5E, 0xFC, 0xFB,
                 ;//0xFD, 0xFF, 0xDF, 0x37, 0xCB, 0x09, 0xF5, 0x90,
                 ;//0xDF, 0xD9, 0x0D, 0xEC, 0xAF, 0xA9, 0x4F, 0xD2,
                 ;//0xD7, 0xEF, 0xEB, 0xF7, 0xFA, 0xFD, 0x7B, 0xFB,
                 ;//0xFD, 0xFD, 0xFE, 0xFE, 0xFF, 0xFE, 0xFE, 0xFF,
                 ;//0xFE, 0xEF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;//0xFE, 0xFF, 0xFF, 0x7F, 0x3C, 0x7C, 0xBF, 0xFC,
                 ;//0xF9, 0xFC, 0xF8, 0xFF, 0xFF, 0x3F, 0x4F, 0x9B,
                 ;//0x64, 0x93, 0xF8, 0xFD, 0xFF, 0xFB, 0x7C, 0x7A,
                 ;//0xFD, 0xFB, 0xF5, 0xE5, 0xF1, 0xD1, 0xE7, 0xE3,
                 ;//0xEB, 0xBB, 0xB3, 0xD7, 0x53, 0x77, 0x37, 0x8E,
                 ;//0xDE, 0x1F, 0x9F, 0xBF, 0x3F, 0x3F, 0xFF, 0x7F,
                 ;//0xE7, 0xFF, 0xEF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F,
                 ;//0xE1, 0x27, 0xF8, 0x7E, 0x60, 0x6F, 0x1F, 0xFC,
                 ;//0xFF, 0xF7, 0xFF, 0x77, 0xFE, 0xF6, 0xEE, 0xF6,
                 ;//0xF7, 0xE9, 0xE7, 0xFF, 0xE7, 0xF7, 0xF7, 0x7F,
                 ;//0xFF, 0xBF, 0x5E, 0x2A, 0x55, 0x37, 0x88, 0x66,
                 ;//0xD2, 0xFE, 0xF0, 0xFC, 0xFE, 0xBE, 0x7F, 0xCF,
                 ;//0xF7, 0xF7, 0xFB, 0xFF, 0xFB, 0xFB, 0xF3, 0xF7,
                 ;//0xFF, 0xBF, 0xAF, 0x97, 0xEF, 0xF5, 0xFB, 0xFC,
                 ;//0xFF, 0xFD, 0xFE, 0xFD, 0xFE, 0xFF, 0xFD, 0x77,
                 ;//0x33, 0x7F, 0xFF, 0x3E, 0xFF, 0xFF, 0xFF, 0x3F,
                 ;//0x5F, 0x67, 0xB5, 0x6A, 0xD1, 0xED, 0xFB, 0x7E,
                 ;//0x9F, 0xBF, 0xAF, 0x63, 0xBC, 0x6E, 0x9D, 0x35,
                 ;//0xCA, 0x6A, 0xF5, 0xFD, 0x4A, 0x4C, 0x4B, 0x0B,
                 ;//0x3D, 0xF5, 0xF3, 0xC3, 0xCF, 0xD7, 0x6F, 0x56,
                 ;//0x1F, 0xAF, 0xDF, 0xBC, 0xFB, 0xF9, 0xF6, 0xC9,
                 ;//0xBE, 0x1A, 0x5F, 0xED, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
                 ;//0xAF, 0x30, 0xBF, 0x4C, 0xD0, 0xCF, 0xBF, 0xBF,
                 ;//0xBF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xF2, 0xF3,
                 ;//0x74, 0xFC, 0xFF, 0xFF, 0x0F, 0x63, 0x15, 0xCB,
                 ;//0x74, 0xB2, 0x90, 0xD1, 0xFA, 0xFF, 0xFE, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF4, 0xEF, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0x4F, 0xC7,
                 ;//0xEF, 0xF7, 0xFB, 0xFB, 0xFB, 0xFB, 0xFD, 0xF9,
                 ;//0xF7, 0xEB, 0xF7, 0xEF, 0xDF, 0xDD, 0xFD, 0xFE,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x31, 0x8A, 0xB9,
                 ;//0xC6, 0xF2, 0xFE, 0x3F, 0xDF, 0xB3, 0xCD, 0x44,
                 ;//0xFE, 0x9B, 0xC4, 0x7B, 0x8D, 0x6C, 0x91, 0x9B,
                 ;//0x3F, 0xDF, 0x7E, 0xF4, 0xE3, 0xC8, 0x4A, 0xC3,
                 ;//0x03, 0x78, 0x04, 0xFE, 0xFE, 0xFC, 0xF3, 0xC9,
                 ;//0x0D, 0xCE, 0xCC, 0xEF, 0xE8, 0xD6, 0xED, 0xCB,
                 ;//0xCF, 0xEF, 0xC3, 0x6B, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;//0xFF, 0xFE, 0xFC, 0xFF, 0xFE, 0xFA, 0x65, 0x17,
                 ;//0xB0, 0x8F, 0xFF, 0xFF, 0xFE, 0xFF, 0xF7, 0xFF,
                 ;//0x7B, 0x7F, 0xBF, 0xFF, 0xFC, 0xF8, 0xF3, 0x89,
                 ;//0xB4, 0x5B, 0xA4, 0xFE, 0xFF, 0xFF, 0xFF, 0xBF,
                 ;//0xFF, 0xFF, 0x5F, 0xAF, 0xEB, 0xF3, 0xFD, 0xFD,
                 ;//0xFC, 0xFE, 0xFF, 0xFF, 0xCC, 0x52, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x3F, 0x47, 0xCB,
                 ;//0xE3, 0xFD, 0xF3, 0xFD, 0xF8, 0xFD, 0xFA, 0xFA,
                 ;//0xFF, 0xFF, 0x4F, 0x3C, 0x02, 0x1B, 0xC5, 0xFE,
                 ;//0xFF, 0x1F, 0xCC, 0x33, 0xE6, 0x76, 0x9A, 0x62,
                 ;//0xDB, 0xB4, 0xEF, 0xDE, 0xB9, 0x73, 0xEC, 0xF1,
                 ;//0x82, 0x4B, 0xB4, 0x2F, 0xFF, 0xFF, 0xFC, 0xE1,
                 ;//0x9E, 0xF0, 0x8A, 0x27, 0xFF, 0xFF, 0xC8, 0x37,
                 ;//0x14, 0x7C, 0xEC, 0xFF, 0x3F, 0xAB, 0x44, 0xCB,
                 ;//0xFF, 0xFD, 0xF5, 0xFB, 0xFE, 0xFF, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF,
                 ;//0x7F, 0x9F, 0xEF, 0xD3, 0xE9, 0xFD, 0x79, 0xBF,
                 ;//0xFD, 0x7C, 0xAE, 0xFE, 0xFF, 0xFF, 0xDF, 0x67,
                 ;//0x32, 0x09, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0xF3, 0xEA, 0xDF, 0x9F, 0x7F, 0xFF,
                 ;//0xFF, 0xBF, 0x37, 0xEB, 0xF7, 0xFF, 0xFE, 0xFC,
                 ;//0xFD, 0xFF, 0xFF, 0xEF, 0xCA, 0xC7, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0xF3, 0x7B, 0x95, 0x6B, 0x90, 0xDF,
                 ;//0xFF, 0xFE, 0xD4, 0x68, 0x34, 0x56, 0xAD, 0x5F,
                 ;//0x7A, 0xB5, 0x79, 0xE4, 0xFA, 0xF1, 0xCE, 0xB7,
                 ;//0xAF, 0x3F, 0xDF, 0x7D, 0xFA, 0xF9, 0xCF, 0xDF,
                 ;//0xFF, 0xFE, 0x7D, 0xF3, 0x3F, 0xBF, 0x79, 0xB0,
                 ;//0xB3, 0x7F, 0xFF, 0xE7, 0xFC, 0xFC, 0xFE, 0x7F,
                 ;//0x7F, 0xFF, 0xF6, 0x3D, 0x86, 0xFF, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 0xFA,
                 ;//0xFF, 0x5F, 0xE7, 0x2F, 0xD7, 0xF2, 0xFC, 0x7D,
                 ;//0x1C, 0x3F, 0x07, 0xAF, 0xDF, 0xFF, 0xFE, 0xFD,
                 ;//0xF1, 0xDC, 0xB1, 0x0B, 0xDF, 0x7F, 0xFF, 0xFF,
                 ;//0xE7, 0xFF, 0xF9, 0xFF, 0xFF, 0x7F, 0x7F, 0xBF,
                 ;//0xDF, 0x1E, 0x2E, 0xDF, 0x67, 0x0F, 0xB3, 0xB7,
                 ;//0xC7, 0xE3, 0xED, 0xE5, 0xF3, 0xF7, 0xF4, 0xF8,
                 ;//0xE3, 0x61, 0x6D, 0xFC, 0xF2, 0xE2, 0xED, 0xD1,
                 ;//0xCB, 0xBF, 0xFF, 0xFE, 0xF1, 0xEE, 0x5B, 0x54,
                 ;//0xAB, 0xB7, 0xEF, 0xFF, 0xFE, 0xF3, 0xFC, 0x38,
                 ;//0x7B, 0xBD, 0xF8, 0x7A, 0xBD, 0xBB, 0xFF, 0x7B,
                 ;//0xE7, 0xEF, 0xFE, 0xFF, 0xAF, 0x83, 0x6D, 0x4B,
                 ;//0x56, 0x7D, 0xAB, 0xA6, 0x68, 0x6A, 0x84, 0xB4,
                 ;//0x9B, 0xB0, 0xFD, 0xCC, 0xA3, 0xB3, 0x6F, 0x1F,
                 ;//0xFE, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                 ;//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x4B, 0x0A,
                 ;//0x74, 0xF3, 0xFC, 0x3F, 0xB7, 0xF5, 0x8A, 0xE5,
                 ;//0xFB, 0xFF, 0x3F, 0xFF, 0xEB, 0xF2, 0xFB, 0x77,
                 ;//0xB7, 0x3F, 0xFF, 0xBF, 0x3E, 0x9E, 0xAF, 0x4F,
                 ;//0xD7, 0xB3, 0xE9, 0xE6, 0xE2, 0xF2, 0x75, 0xF8,
                 ;//0x3E, 0xDD, 0x2E, 0xAF, 0xD7, 0x2F, 0xBF, 0x03,
                 ;//0x6D, 0x45, 0xD3, 0x93, 0xF5, 0x5D, 0x8A, 0xAA,
                 ;//0x6D, 0xDD, 0xB2, 0x6A, 0xDC, 0x7A, 0xEC, 0xE1,
                 ;//0xD3, 0x2B, 0xF3, 0x2B, 0xC7, 0xFF, 0xFF, 0xFF,
                 ;//0x5F, 0x9F, 0x4B, 0x91, 0x69, 0x2A, 0x6D, 0x35,
                 ;//0xDD, 0x6C, 0x36, 0x9A, 0x71, 0x63, 0xF4, 0x99,
                 ;//0xE6, 0xC9, 0xEF, 0xFF, 0xFE, 0xF6, 0xAB, 0x95,
                 ;//0xF9, 0xFF, 0xBC, 0xFE, 0x2F, 0x57, 0xE3, 0xE7,
                 ;//0xFF, 0xF1, 0xF5, 0xEB, 0xDF, 0xE3, 0x97, 0x2F,};
                 ;//
                 ;
                 ; #include <myheader.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 256
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0005 0022 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000551 93ea      	ST   -Y,R30
000552 93fa      	ST   -Y,R31
000553 b7ef      	IN   R30,SREG
000554 93ea      	ST   -Y,R30
                 ; 0005 0023 char status,data;
                 ; 0005 0024 status=UCSRA;
000555 931a      	ST   -Y,R17
000556 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000557 b11b      	IN   R17,11
                 ; 0005 0025 data=UDR;
000558 b10c      	IN   R16,12
                 ; 0005 0026 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000559 2fe1      	MOV  R30,R17
00055a 71ec      	ANDI R30,LOW(0x1C)
00055b f461      	BRNE _0xA0003
                 ; 0005 0027    {
                 ; 0005 0028    rx_buffer[rx_wr_index++]=data;
00055c 2de7      	MOV  R30,R7
00055d 9473      	INC  R7
00055e e0f0      	LDI  R31,0
00055f 5de5      	SUBI R30,LOW(-_rx_buffer)
000560 4ffd      	SBCI R31,HIGH(-_rx_buffer)
000561 8300      	ST   Z,R16
                 ; 0005 0029 #if RX_BUFFER_SIZE == 256
                 ; 0005 002A    // special case for receiver buffer size=256
                 ; 0005 002B    if (++rx_counter == 0) rx_buffer_overflow=1;
000562 01f4      	MOVW R30,R8
000563 9631      	ADIW R30,1
000564 014f      	MOVW R8,R30
000565 f411      	BRNE _0xA0004
000566 9468      	SET
000567 f822      	BLD  R2,2
                 ; 0005 002C #else
                 ; 0005 002D    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
                 ; 0005 002E    if (++rx_counter == RX_BUFFER_SIZE)
                 ; 0005 002F       {
                 ; 0005 0030       rx_counter=0;
                 ; 0005 0031       rx_buffer_overflow=1;
                 ; 0005 0032       }
                 ; 0005 0033 #endif
                 ; 0005 0034    }
                 _0xA0004:
                 ; 0005 0035 }
                 _0xA0003:
000568 9109      	LD   R16,Y+
000569 9119      	LD   R17,Y+
00056a 91e9      	LD   R30,Y+
00056b bfef      	OUT  SREG,R30
00056c 91f9      	LD   R31,Y+
00056d 91e9      	LD   R30,Y+
00056e 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0005 003C {
                 ; 0005 003D char data;
                 ; 0005 003E while (rx_counter==0);
                 ;	data -> R17
                 ; 0005 003F data=rx_buffer[rx_rd_index++];
                 ; 0005 0040 #if RX_BUFFER_SIZE != 256
                 ; 0005 0041 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0005 0042 #endif
                 ; 0005 0043 #asm("cli")
                 ; 0005 0044 --rx_counter;
                 ; 0005 0045 #asm("sei")
                 ; 0005 0046 return data;
                 ; 0005 0047 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 256
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;#else
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter=0;
                 ;#else
                 ;unsigned int tx_counter=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0005 005D {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
00056f 920a      	ST   -Y,R0
000570 93ea      	ST   -Y,R30
000571 93fa      	ST   -Y,R31
000572 b7ef      	IN   R30,SREG
000573 93ea      	ST   -Y,R30
                 ; 0005 005E if (tx_counter)
000574 2c0c      	MOV  R0,R12
000575 280d      	OR   R0,R13
000576 f051      	BREQ _0xA0008
                 ; 0005 005F    {
                 ; 0005 0060    --tx_counter;
000577 01f6      	MOVW R30,R12
000578 9731      	SBIW R30,1
000579 016f      	MOVW R12,R30
                 ; 0005 0061    UDR=tx_buffer[tx_rd_index++];
00057a 2dea      	MOV  R30,R10
00057b 94a3      	INC  R10
00057c e0f0      	LDI  R31,0
00057d 5de5      	SUBI R30,LOW(-_tx_buffer)
00057e 4ffc      	SBCI R31,HIGH(-_tx_buffer)
00057f 81e0      	LD   R30,Z
000580 b9ec      	OUT  0xC,R30
                 ; 0005 0062 #if TX_BUFFER_SIZE != 256
                 ; 0005 0063    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
                 ; 0005 0064 #endif
                 ; 0005 0065    }
                 ; 0005 0066 }
                 _0xA0008:
000581 91e9      	LD   R30,Y+
000582 bfef      	OUT  SREG,R30
000583 91f9      	LD   R31,Y+
000584 91e9      	LD   R30,Y+
000585 9009      	LD   R0,Y+
000586 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0005 006D {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0005 006E while (tx_counter == TX_BUFFER_SIZE);
000587 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0xA0009:
000588 e0e0      	LDI  R30,LOW(256)
000589 e0f1      	LDI  R31,HIGH(256)
00058a 15ec      	CP   R30,R12
00058b 05fd      	CPC  R31,R13
00058c f3d9      	BREQ _0xA0009
                 ; 0005 006F #asm("cli")
00058d 94f8      	cli
                 ; 0005 0070 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
00058e 2c0c      	MOV  R0,R12
00058f 280d      	OR   R0,R13
000590 f411      	BRNE _0xA000D
000591 995d      	SBIC 0xB,5
000592 c00b      	RJMP _0xA000C
                 _0xA000D:
                 ; 0005 0071    {
                 ; 0005 0072    tx_buffer[tx_wr_index++]=c;
000593 2deb      	MOV  R30,R11
000594 94b3      	INC  R11
000595 e0f0      	LDI  R31,0
000596 5de5      	SUBI R30,LOW(-_tx_buffer)
000597 4ffc      	SBCI R31,HIGH(-_tx_buffer)
000598 81a8      	LD   R26,Y
000599 83a0      	STD  Z+0,R26
                 ; 0005 0073 #if TX_BUFFER_SIZE != 256
                 ; 0005 0074    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
                 ; 0005 0075 #endif
                 ; 0005 0076    ++tx_counter;
00059a 01f6      	MOVW R30,R12
00059b 9631      	ADIW R30,1
00059c 016f      	MOVW R12,R30
                 ; 0005 0077    }
                 ; 0005 0078 else
00059d c002      	RJMP _0xA000F
                 _0xA000C:
                 ; 0005 0079    UDR=c;
00059e 81e8      	LD   R30,Y
00059f b9ec      	OUT  0xC,R30
                 ; 0005 007A #asm("sei")
                 _0xA000F:
0005a0 9478      	sei
                 ; 0005 007B }
0005a1 940c 0af7 	JMP  _0x214000B
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;void uart_init(void)
                 ; 0005 0084 {
                 _uart_init:
                 ; .FSTART _uart_init
                 ; 0005 0085 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0005a3 e0e0      	LDI  R30,LOW(0)
0005a4 b9eb      	OUT  0xB,R30
                 ; 0005 0086 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0005a5 ede8      	LDI  R30,LOW(216)
0005a6 b9ea      	OUT  0xA,R30
                 ; 0005 0087 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0005a7 e8e6      	LDI  R30,LOW(134)
0005a8 bde0      	OUT  0x20,R30
                 ; 0005 0088 UBRRH=0x00;
0005a9 e0e0      	LDI  R30,LOW(0)
0005aa bde0      	OUT  0x20,R30
                 ; 0005 0089 UBRRL=0x33;
0005ab e3e3      	LDI  R30,LOW(51)
0005ac b9e9      	OUT  0x9,R30
                 ; 0005 008A  }
0005ad 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;/*
                 ; * I2C_Master_C_file.c
                 ; *
                 ; */
                 ;
                 ;#include <myheader.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;
                 ;                            /* Include I2C header file */
                 ;
                 ;void I2C_Init2()                                                /* I2C initialize function */
                 ; 0006 000D {
                 
                 	.CSEG
                 _I2C_Init2:
                 ; .FSTART _I2C_Init2
                 ; 0006 000E     TWBR = BITRATE(TWSR = 0x00);                            /* Get bit rate register value by formula */
                +
0005ae e0e0     +LDI R30 , LOW ( 0x40800000 )
0005af e0f0     +LDI R31 , HIGH ( 0x40800000 )
0005b0 e860     +LDI R22 , BYTE3 ( 0x40800000 )
0005b1 e470     +LDI R23 , BYTE4 ( 0x40800000 )
                 	__GETD1N 0x40800000
0005b2 940e 1471 	CALL __PUTPARD1
0005b4 b9e1      	OUT  0x1,R30
0005b5 27ff      	CLR  R31
0005b6 2766      	CLR  R22
0005b7 2777      	CLR  R23
0005b8 940e 12bc 	CALL __CDF1
0005ba 01df      	MOVW R26,R30
0005bb 01cb      	MOVW R24,R22
0005bc 940e 0fae 	CALL _pow
                +
0005be e0a0     +LDI R26 , LOW ( 0x40000000 )
0005bf e0b0     +LDI R27 , HIGH ( 0x40000000 )
0005c0 e080     +LDI R24 , BYTE3 ( 0x40000000 )
0005c1 e490     +LDI R25 , BYTE4 ( 0x40000000 )
                 	__GETD2N 0x40000000
0005c2 940e 1346 	CALL __MULF12
                +
0005c4 e0a0     +LDI R26 , LOW ( 0x42800000 )
0005c5 e0b0     +LDI R27 , HIGH ( 0x42800000 )
0005c6 e880     +LDI R24 , BYTE3 ( 0x42800000 )
0005c7 e492     +LDI R25 , BYTE4 ( 0x42800000 )
                 	__GETD2N 0x42800000
0005c8 940e 1394 	CALL __DIVF21
0005ca 940e 1283 	CALL __CFD1U
0005cc b9e0      	OUT  0x0,R30
                 ; 0006 000F }
0005cd 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;char I2C_Start2(char write_address)                        /* I2C start function */
                 ; 0006 0013 {
                 ; 0006 0014     char status;                                            /* Declare variable */
                 ; 0006 0015     TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);                    /* Enable TWI, generate start condition and clear interru ...
                 ;	write_address -> Y+1
                 ;	status -> R17
                 ; 0006 0016     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (start condition)  ...
                 ; 0006 0017     status = TWSR & 0xF8;                                    /* Read TWI status register with masking lower three bits * ...
                 ; 0006 0018     if (status != 0x08)                                        /* Check weather start condition transmitted successfully ...
                 ; 0006 0019     return 0;                                                /* If not then return 0 to indicate start condition fail */
                 ; 0006 001A     TWDR = write_address;                                    /* If yes then write SLA+W in TWI data register */
                 ; 0006 001B     TWCR = (1<<TWEN)|(1<<TWINT);                            /* Enable TWI and clear interrupt flag */
                 ; 0006 001C     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (Write operation)  ...
                 ; 0006 001D     status = TWSR & 0xF8;                                    /* Read TWI status register with masking lower three bits * ...
                 ; 0006 001E     if (status == 0x18)                                        /* Check weather SLA+W transmitted & ack received or not? ...
                 ; 0006 001F     return 1;                                                /* If yes then return 1 to indicate ack received i.e. ready ...
                 ; 0006 0020     if (status == 0x20)                                        /* Check weather SLA+W transmitted & nack received or not ...
                 ; 0006 0021     return 2;                                                /* If yes then return 2 to indicate nack received i.e. devi ...
                 ; 0006 0022     else
                 ; 0006 0023     return 3;                                                /* Else return 3 to indicate SLA+W failed */
                 ; 0006 0024 }
                 ;
                 ;char I2C_Repeated_Start(char read_address)                /* I2C repeated start function */
                 ; 0006 0027 {
                 _I2C_Repeated_Start:
                 ; .FSTART _I2C_Repeated_Start
                 ; 0006 0028     char status;                                            /* Declare variable */
                 ; 0006 0029     TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);                    /* Enable TWI, generate start condition and clear interru ...
0005ce 93aa      	ST   -Y,R26
0005cf 931a      	ST   -Y,R17
                 ;	read_address -> Y+1
                 ;	status -> R17
0005d0 eae4      	LDI  R30,LOW(164)
0005d1 bfe6      	OUT  0x36,R30
                 ; 0006 002A     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (start condition)  ...
                 _0xC000D:
0005d2 b7e6      	IN   R30,0x36
0005d3 78e0      	ANDI R30,LOW(0x80)
0005d4 f3e9      	BREQ _0xC000D
                 ; 0006 002B     status = TWSR & 0xF8;                                    /* Read TWI status register with masking lower three bits * ...
0005d5 b1e1      	IN   R30,0x1
0005d6 7fe8      	ANDI R30,LOW(0xF8)
0005d7 2f1e      	MOV  R17,R30
                 ; 0006 002C     if (status != 0x10)                                        /* Check weather repeated start condition transmitted suc ...
0005d8 3110      	CPI  R17,16
0005d9 f019      	BREQ _0xC0010
                 ; 0006 002D     return 0;                                                /* If no then return 0 to indicate repeated start condition ...
0005da e0e0      	LDI  R30,LOW(0)
0005db 940c 0a4f 	JMP  _0x214000C
                 ; 0006 002E     TWDR = read_address;                                    /* If yes then write SLA+R in TWI data register */
                 _0xC0010:
0005dd 940e 10b4 	CALL SUBOPT_0x3
                 ; 0006 002F     TWCR = (1<<TWEN)|(1<<TWINT);                            /* Enable TWI and clear interrupt flag */
                 ; 0006 0030     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (Write operation)  ...
                 _0xC0011:
0005df b7e6      	IN   R30,0x36
0005e0 78e0      	ANDI R30,LOW(0x80)
0005e1 f3e9      	BREQ _0xC0011
                 ; 0006 0031     status = TWSR & 0xF8;                                    /* Read TWI status register with masking lower three bits * ...
0005e2 b1e1      	IN   R30,0x1
0005e3 7fe8      	ANDI R30,LOW(0xF8)
0005e4 2f1e      	MOV  R17,R30
                 ; 0006 0032     if (status == 0x40)                                        /* Check weather SLA+R transmitted & ack received or not? ...
0005e5 3410      	CPI  R17,64
0005e6 f419      	BRNE _0xC0014
                 ; 0006 0033     return 1;                                                /* If yes then return 1 to indicate ack received */
0005e7 e0e1      	LDI  R30,LOW(1)
0005e8 940c 0a4f 	JMP  _0x214000C
                 ; 0006 0034     if (status == 0x20)                                        /* Check weather SLA+R transmitted & nack received or not ...
                 _0xC0014:
0005ea 3210      	CPI  R17,32
0005eb f419      	BRNE _0xC0015
                 ; 0006 0035     return 2;                                                /* If yes then return 2 to indicate nack received i.e. devi ...
0005ec e0e2      	LDI  R30,LOW(2)
0005ed 940c 0a4f 	JMP  _0x214000C
                 ; 0006 0036     else
                 _0xC0015:
                 ; 0006 0037     return 3;                                                /* Else return 3 to indicate SLA+W failed */
0005ef e0e3      	LDI  R30,LOW(3)
0005f0 940c 0a4f 	JMP  _0x214000C
                 ; 0006 0038 }
                 ; .FEND
                 ;
                 ;void I2C_Stop2()                                                /* I2C stop function */
                 ; 0006 003B {
                 _I2C_Stop2:
                 ; .FSTART _I2C_Stop2
                 ; 0006 003C     TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);                    /* Enable TWI, generate stop condition and clear interrupt  ...
0005f2 e9e4      	LDI  R30,LOW(148)
0005f3 bfe6      	OUT  0x36,R30
                 ; 0006 003D     while(TWCR & (1<<TWSTO));                                /* Wait until stop condition execution */
                 _0xC0017:
0005f4 b7e6      	IN   R30,0x36
0005f5 fde4      	SBRC R30,4
0005f6 cffd      	RJMP _0xC0017
                 ; 0006 003E }
0005f7 9508      	RET
                 ; .FEND
                 ;
                 ;void I2C_Start_Wait(char write_address)                        /* I2C start wait function */
                 ; 0006 0041 {
                 _I2C_Start_Wait:
                 ; .FSTART _I2C_Start_Wait
                 ; 0006 0042     char status;                                            /* Declare variable */
                 ; 0006 0043     while (1)
0005f8 93aa      	ST   -Y,R26
0005f9 931a      	ST   -Y,R17
                 ;	write_address -> Y+1
                 ;	status -> R17
                 _0xC001A:
                 ; 0006 0044     {
                 ; 0006 0045         TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);                /* Enable TWI, generate start condition and clear interru ...
0005fa eae4      	LDI  R30,LOW(164)
0005fb bfe6      	OUT  0x36,R30
                 ; 0006 0046         while (!(TWCR & (1<<TWINT)));                        /* Wait until TWI finish its current job (start condition)  ...
                 _0xC001D:
0005fc b7e6      	IN   R30,0x36
0005fd 78e0      	ANDI R30,LOW(0x80)
0005fe f3e9      	BREQ _0xC001D
                 ; 0006 0047         status = TWSR & 0xF8;                                /* Read TWI status register with masking lower three bits * ...
0005ff b1e1      	IN   R30,0x1
000600 7fe8      	ANDI R30,LOW(0xF8)
000601 2f1e      	MOV  R17,R30
                 ; 0006 0048         if (status != 0x08)                                    /* Check weather start condition transmitted successfully ...
000602 3018      	CPI  R17,8
000603 f7b1      	BRNE _0xC001A
                 ; 0006 0049         continue;                                            /* If no then continue with start loop again */
                 ; 0006 004A         TWDR = write_address;                                /* If yes then write SLA+W in TWI data register */
000604 940e 10b4 	CALL SUBOPT_0x3
                 ; 0006 004B         TWCR = (1<<TWEN)|(1<<TWINT);                        /* Enable TWI and clear interrupt flag */
                 ; 0006 004C         while (!(TWCR & (1<<TWINT)));                        /* Wait until TWI finish its current job (Write operation)  ...
                 _0xC0021:
000606 b7e6      	IN   R30,0x36
000607 78e0      	ANDI R30,LOW(0x80)
000608 f3e9      	BREQ _0xC0021
                 ; 0006 004D         status = TWSR & 0xF8;                                /* Read TWI status register with masking lower three bits * ...
000609 b1e1      	IN   R30,0x1
00060a 7fe8      	ANDI R30,LOW(0xF8)
00060b 2f1e      	MOV  R17,R30
                 ; 0006 004E         if (status != 0x18 )                                /* Check weather SLA+W transmitted & ack received or not? */
00060c 3118      	CPI  R17,24
00060d f011      	BREQ _0xC0024
                 ; 0006 004F         {
                 ; 0006 0050             I2C_Stop2();                                        /* If not then generate stop condition */
00060e dfe3      	RCALL _I2C_Stop2
                 ; 0006 0051             //i2c_stop();
                 ; 0006 0052             continue;                                        /* continue with start loop again */
00060f cfea      	RJMP _0xC001A
                 ; 0006 0053         }
                 ; 0006 0054         break;                                                /* If yes then break loop */
                 _0xC0024:
                 ; 0006 0055     }
                 ; 0006 0056 }
000610 940c 0a4f 	JMP  _0x214000C
                 ; .FEND
                 ;
                 ;char I2C_Write2(char data)                                /* I2C write function */
                 ; 0006 0059 {
                 _I2C_Write2:
                 ; .FSTART _I2C_Write2
                 ; 0006 005A     char status;                                            /* Declare variable */
                 ; 0006 005B     TWDR = data;                                            /* Copy data in TWI data register */
000612 93aa      	ST   -Y,R26
000613 931a      	ST   -Y,R17
                 ;	data -> Y+1
                 ;	status -> R17
000614 940e 10b4 	CALL SUBOPT_0x3
                 ; 0006 005C     TWCR = (1<<TWEN)|(1<<TWINT);                            /* Enable TWI and clear interrupt flag */
                 ; 0006 005D     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (Write operation)  ...
                 _0xC0025:
000616 b7e6      	IN   R30,0x36
000617 78e0      	ANDI R30,LOW(0x80)
000618 f3e9      	BREQ _0xC0025
                 ; 0006 005E     status = TWSR & 0xF8;                                    /* Read TWI status register with masking lower three bits * ...
000619 b1e1      	IN   R30,0x1
00061a 7fe8      	ANDI R30,LOW(0xF8)
00061b 2f1e      	MOV  R17,R30
                 ; 0006 005F     if (status == 0x28)                                        /* Check weather data transmitted & ack received or not?  ...
00061c 3218      	CPI  R17,40
00061d f419      	BRNE _0xC0028
                 ; 0006 0060     return 0;                                                /* If yes then return 0 to indicate ack received */
00061e e0e0      	LDI  R30,LOW(0)
00061f 940c 0a4f 	JMP  _0x214000C
                 ; 0006 0061     if (status == 0x30)                                        /* Check weather data transmitted & nack received or not? ...
                 _0xC0028:
000621 3310      	CPI  R17,48
000622 f419      	BRNE _0xC0029
                 ; 0006 0062     return 1;                                                /* If yes then return 1 to indicate nack received */
000623 e0e1      	LDI  R30,LOW(1)
000624 940c 0a4f 	JMP  _0x214000C
                 ; 0006 0063     else
                 _0xC0029:
                 ; 0006 0064     return 2;                                                /* Else return 2 to indicate data transmission failed */
000626 e0e2      	LDI  R30,LOW(2)
000627 940c 0a4f 	JMP  _0x214000C
                 ; 0006 0065 }
                 ; .FEND
                 ;
                 ;char I2C_Read_Ack()                                            /* I2C read ack function */
                 ; 0006 0068 {
                 _I2C_Read_Ack:
                 ; .FSTART _I2C_Read_Ack
                 ; 0006 0069     TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);                    /* Enable TWI, generation of ack and clear interrupt flag */
000629 ece4      	LDI  R30,LOW(196)
00062a bfe6      	OUT  0x36,R30
                 ; 0006 006A     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (read operation) * ...
                 _0xC002B:
00062b b7e6      	IN   R30,0x36
00062c 78e0      	ANDI R30,LOW(0x80)
00062d f3e9      	BREQ _0xC002B
                 ; 0006 006B     return TWDR;                                            /* Return received data */
00062e c005      	RJMP _0x2140010
                 ; 0006 006C }
                 ; .FEND
                 ;
                 ;char I2C_Read_Nack()                                        /* I2C read nack function */
                 ; 0006 006F {
                 _I2C_Read_Nack:
                 ; .FSTART _I2C_Read_Nack
                 ; 0006 0070     TWCR=(1<<TWEN)|(1<<TWINT);                                /* Enable TWI and clear interrupt flag */
00062f e8e4      	LDI  R30,LOW(132)
000630 bfe6      	OUT  0x36,R30
                 ; 0006 0071     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (read operation) * ...
                 _0xC002E:
000631 b7e6      	IN   R30,0x36
000632 78e0      	ANDI R30,LOW(0x80)
000633 f3e9      	BREQ _0xC002E
                 ; 0006 0072     return TWDR;                                            /* Return received data */
                 _0x2140010:
000634 b1e3      	IN   R30,0x3
000635 9508      	RET
                 ; 0006 0073 }
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void I2C_Slave_Init(char slave_address)
                 ; 0006 0078 {
                 ; 0006 0079 	TWAR = slave_address;						/* Assign address in TWI address register */
                 ;	slave_address -> Y+0
                 ; 0006 007A 	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);	/* Enable TWI, Enable ack generation, clear TWI interrupt */
                 ; 0006 007B }
                 ;
                 ;char I2C_Slave_Listen()
                 ; 0006 007E {
                 ; 0006 007F 	while(1)
                 ; 0006 0080 	{
                 ; 0006 0081 		char status;							/* Declare variable */
                 ; 0006 0082 		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
                 ;	status -> Y+0
                 ; 0006 0083 		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
                 ; 0006 0084 		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
                 ; 0006 0085 		return 0;								/* If yes then return 0 to indicate ack returned */
                 ; 0006 0086 		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
                 ; 0006 0087 		return 1;								/* If yes then return 1 to indicate ack returned */
                 ; 0006 0088 		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
                 ; 0006 0089 		return 2;								/* If yes then return 2 to indicate ack returned */
                 ; 0006 008A 		else
                 ; 0006 008B 		continue;								/* Else continue */
                 ; 0006 008C 	}
                 ; 0006 008D }
                 ;
                 ;char I2C_Slave_Transmit(char data)
                 ; 0006 0090 {
                 ; 0006 0091 	char status;
                 ; 0006 0092 	TWDR = data;								/* Write data to TWDR to be transmitted */
                 ;	data -> Y+1
                 ;	status -> R17
                 ; 0006 0093 	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);		/* Enable TWI and clear interrupt flag */
                 ; 0006 0094 	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (Write operation) */
                 ; 0006 0095 	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
                 ; 0006 0096 	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
                 ; 0006 0097 	{
                 ; 0006 0098 		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
                 ; 0006 0099 		return -1;
                 ; 0006 009A 	}
                 ; 0006 009B 	if (status == 0xB8)							/* Check weather data transmitted & ack received */
                 ; 0006 009C 		return 0;									/* If yes then return 0 */
                 ; 0006 009D 	if (status == 0xC0)							/* Check weather data transmitted & nack received */
                 ; 0006 009E 	{
                 ; 0006 009F 		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -2 */
                 ; 0006 00A0 		return -2;
                 ; 0006 00A1 	}
                 ; 0006 00A2 	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
                 ; 0006 00A3 	return -3;									/* If yes then return -3 */
                 ; 0006 00A4 	else										/* else return -4 */
                 ; 0006 00A5 	return -4;
                 ; 0006 00A6 }
                 ;
                 ;char I2C_Slave_Receive()
                 ; 0006 00A9 {
                 ; 0006 00AA 	char status;								/* Declare variable */
                 ; 0006 00AB 	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);		/* Enable TWI, generation of ack and clear interrupt flag */
                 ;	status -> R17
                 ; 0006 00AC 	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (read operation) */
                 ; 0006 00AD 	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
                 ; 0006 00AE 	if (status == 0x80 || status == 0x90)		/* Check weather data received & ack returned (TWEA = 1) */
                 ; 0006 00AF 	return TWDR;								/* If yes then return received data */
                 ; 0006 00B0 	if (status == 0x88 || status == 0x98)		/* Check weather data received, nack returned and switched to not addressed slav ...
                 ; 0006 00B1 	return TWDR;								/* If yes then return received data */
                 ; 0006 00B2 	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
                 ; 0006 00B3 	{
                 ; 0006 00B4 		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return 0 */
                 ; 0006 00B5 		return -1;
                 ; 0006 00B6 	}
                 ; 0006 00B7 	else
                 ; 0006 00B8 	return -2;									/* Else return 1 */
                 ; 0006 00B9 }
                 ;  #include <myheader.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;  #include <i2c_e.h>
                 ;  #include <mandala2.h>
                 ;
                 ;volatile eeprom char data_rec[512];
                 ;
                 ;/* read a byte from the EEPROM */
                 ;unsigned char eeprom_read(unsigned int address)
                 ; 0007 0009 {
                 
                 	.CSEG
                 ; 0007 000A unsigned char data;
                 ; 0007 000B i2c_start();
                 ;	address -> Y+1
                 ;	data -> R17
                 ; 0007 000C i2c_write(EEPROM_BUS_ADDRESS | 0);
                 ; 0007 000D /* send MSB of address */
                 ; 0007 000E i2c_write(address >> 8);
                 ; 0007 000F /* send LSB of address */
                 ; 0007 0010 i2c_write((unsigned char) address);
                 ; 0007 0011 i2c_start();
                 ; 0007 0012 i2c_write(EEPROM_BUS_ADDRESS | 1);
                 ; 0007 0013 data=i2c_read(0);
                 ; 0007 0014 i2c_stop();
                 ; 0007 0015 return data;
                 ; 0007 0016 }
                 ;
                 ;/*********************************************/
                 ;/* read a byte from the EEPROM */
                 ;unsigned char eeprom_read_frame(unsigned int address,int num)
                 ; 0007 001B {
                 _eeprom_read_frame:
                 ; .FSTART _eeprom_read_frame
                 ; 0007 001C int i,j;
                 ; 0007 001D 
                 ; 0007 001E unsigned char data;
                 ; 0007 001F 
                 ; 0007 0020 if (address!=0)j=4;
000636 93ba      	ST   -Y,R27
000637 93aa      	ST   -Y,R26
000638 940e 14b8 	CALL __SAVELOCR6
                 ;	address -> Y+8
                 ;	num -> Y+6
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	data -> R21
00063a 85e8      	LDD  R30,Y+8
00063b 85f9      	LDD  R31,Y+8+1
00063c 9730      	SBIW R30,0
00063d f019      	BREQ _0xE0003
                +
00063e e024     +LDI R18 , LOW ( 4 )
00063f e030     +LDI R19 , HIGH ( 4 )
                 	__GETWRN 18,19,4
                 ; 0007 0021 else j=0;
000640 c002      	RJMP _0xE0004
                 _0xE0003:
                +
000641 e020     +LDI R18 , LOW ( 0 )
000642 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0007 0022 
                 ; 0007 0023 i2c_start();
                 _0xE0004:
000643 940e 11dd 	CALL _i2c_start
                 ; 0007 0024 i2c_write(EEPROM_BUS_ADDRESS | 0);
000645 eaa0      	LDI  R26,LOW(160)
000646 940e 1211 	CALL _i2c_write
                 ; 0007 0025 /* send MSB of address */
                 ; 0007 0026 i2c_write(address >> 8);
000648 85a9      	LDD  R26,Y+9
000649 940e 1211 	CALL _i2c_write
                 ; 0007 0027 /* send LSB of address */
                 ; 0007 0028 //i2c_write((unsigned char) address);
                 ; 0007 0029 i2c_write( address&0x00ff);
00064b 85e8      	LDD  R30,Y+8
00064c 2fae      	MOV  R26,R30
00064d 940e 1211 	CALL _i2c_write
                 ; 0007 002A i2c_start();
00064f 940e 11dd 	CALL _i2c_start
                 ; 0007 002B i2c_write(EEPROM_BUS_ADDRESS | 1);
000651 eaa1      	LDI  R26,LOW(161)
000652 940e 1211 	CALL _i2c_write
                 ; 0007 002C for(i=j;i<num;i++)
000654 0189      	MOVW R16,R18
                 _0xE0006:
000655 81ee      	LDD  R30,Y+6
000656 81ff      	LDD  R31,Y+6+1
000657 170e      	CP   R16,R30
000658 071f      	CPC  R17,R31
000659 f52c      	BRGE _0xE0007
                 ; 0007 002D {
                 ; 0007 002E if(i==(num-1))data_rec[i]=i2c_read(0);
00065a 9731      	SBIW R30,1
00065b 17e0      	CP   R30,R16
00065c 07f1      	CPC  R31,R17
00065d f459      	BRNE _0xE0008
00065e 01f8      	MOVW R30,R16
00065f 50e0      	SUBI R30,LOW(-_data_rec)
000660 40f0      	SBCI R31,HIGH(-_data_rec)
000661 93ff      	PUSH R31
000662 93ef      	PUSH R30
000663 e0a0      	LDI  R26,LOW(0)
000664 940e 11f6 	CALL _i2c_read
000666 91af      	POP  R26
000667 91bf      	POP  R27
000668 c00a      	RJMP _0xE001F
                 ; 0007 002F else data_rec[i]=i2c_read(1);
                 _0xE0008:
000669 01f8      	MOVW R30,R16
00066a 50e0      	SUBI R30,LOW(-_data_rec)
00066b 40f0      	SBCI R31,HIGH(-_data_rec)
00066c 93ff      	PUSH R31
00066d 93ef      	PUSH R30
00066e e0a1      	LDI  R26,LOW(1)
00066f 940e 11f6 	CALL _i2c_read
000671 91af      	POP  R26
000672 91bf      	POP  R27
                 _0xE001F:
000673 940e 1494 	CALL __EEPROMWRB
                 ; 0007 0030 data=data_rec[i];
000675 e0a0      	LDI  R26,LOW(_data_rec)
000676 e0b0      	LDI  R27,HIGH(_data_rec)
000677 0fa0      	ADD  R26,R16
000678 1fb1      	ADC  R27,R17
000679 940e 1488 	CALL __EEPROMRDB
00067b 2f5e      	MOV  R21,R30
                 ; 0007 0031 }
                +
00067c 5f0f     +SUBI R16 , LOW ( - 1 )
00067d 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00067e cfd6      	RJMP _0xE0006
                 _0xE0007:
                 ; 0007 0032 i2c_stop();
00067f 940e 11ec 	CALL _i2c_stop
                 ; 0007 0033 return data;
000681 2fe5      	MOV  R30,R21
000682 940e 14bf 	CALL __LOADLOCR6
000684 962a      	ADIW R28,10
000685 9508      	RET
                 ; 0007 0034 }
                 ; .FEND
                 ;/*************************************/
                 ;
                 ;/* write a byte to the EEPROM */
                 ;void eeprom_write(unsigned int address, unsigned char data)
                 ; 0007 0039 {
                 ; 0007 003A i2c_start();
                 ;	address -> Y+1
                 ;	data -> Y+0
                 ; 0007 003B i2c_write(EEPROM_BUS_ADDRESS | 0);
                 ; 0007 003C /* send MSB of address */
                 ; 0007 003D i2c_write(address >> 8);
                 ; 0007 003E /* send LSB of address */
                 ; 0007 003F i2c_write((unsigned char) address);
                 ; 0007 0040 i2c_write(data);
                 ; 0007 0041 i2c_stop();
                 ; 0007 0042 /* 10ms delay to complete the write operation */
                 ; 0007 0043 delay_ms(10);
                 ; 0007 0044 }
                 ;
                 ;
                 ;/* write a frame to the EEPROM */
                 ;void eeprom_write_frame(unsigned int address, char *data,char num )
                 ; 0007 0049 {
                 ; 0007 004A char i;
                 ; 0007 004B char *ip;
                 ; 0007 004C ip=data;
                 ;	address -> Y+7
                 ;	*data -> Y+5
                 ;	num -> Y+4
                 ;	i -> R17
                 ;	*ip -> R18,R19
                 ; 0007 004D 
                 ; 0007 004E i2c_start();
                 ; 0007 004F i2c_write(EEPROM_BUS_ADDRESS | 0);
                 ; 0007 0050 /* send MSB of address */
                 ; 0007 0051 i2c_write(address >> 8);
                 ; 0007 0052 /* send LSB of address */
                 ; 0007 0053 i2c_write((unsigned char) address);
                 ; 0007 0054 for (i=0;i<num;i++)
                 ; 0007 0055 {
                 ; 0007 0056 i2c_write(*(ip+i));
                 ; 0007 0057 }
                 ; 0007 0058 i2c_stop();
                 ; 0007 0059 /* 10ms delay to complete the write operation */
                 ; 0007 005A delay_ms(10);
                 ; 0007 005B }
                 ;
                 ;
                 ;void eeprom_write_pic(unsigned int address )
                 ; 0007 005F {
                 _eeprom_write_pic:
                 ; .FSTART _eeprom_write_pic
                 ; 0007 0060 char i;
                 ; 0007 0061 
                 ; 0007 0062 
                 ; 0007 0063 
                 ; 0007 0064 i2c_start();
000686 93ba      	ST   -Y,R27
000687 93aa      	ST   -Y,R26
000688 931a      	ST   -Y,R17
                 ;	address -> Y+1
                 ;	i -> R17
000689 940e 11dd 	CALL _i2c_start
                 ; 0007 0065 i2c_write(EEPROM_BUS_ADDRESS | 0);
00068b eaa0      	LDI  R26,LOW(160)
00068c 940e 1211 	CALL _i2c_write
                 ; 0007 0066 //I2C_Write2(EEPROM_BUS_ADDRESS | 0);
                 ; 0007 0067 
                 ; 0007 0068 /* send MSB of address */
                 ; 0007 0069 i2c_write(address >> 8);
00068e 81aa      	LDD  R26,Y+2
00068f 940e 1211 	CALL _i2c_write
                 ; 0007 006A /* send LSB of address */
                 ; 0007 006B i2c_write((unsigned char) address);
000691 81a9      	LDD  R26,Y+1
000692 940e 1211 	CALL _i2c_write
                 ; 0007 006C for (i=0;i<16;i++)
000694 e010      	LDI  R17,LOW(0)
                 _0xE000E:
000695 3110      	CPI  R17,16
000696 f468      	BRSH _0xE000F
                 ; 0007 006D {
                 ; 0007 006E i2c_write(mandalapic[i+address]);
000697 2fe1      	MOV  R30,R17
000698 e0f0      	LDI  R31,0
000699 81a9      	LDD  R26,Y+1
00069a 81ba      	LDD  R27,Y+1+1
00069b 0fea      	ADD  R30,R26
00069c 1ffb      	ADC  R31,R27
00069d 5ce8      	SUBI R30,LOW(-_mandalapic*2)
00069e 4ffd      	SBCI R31,HIGH(-_mandalapic*2)
00069f 91a4      	LPM  R26,Z
0006a0 940e 1211 	CALL _i2c_write
                 ; 0007 006F 
                 ; 0007 0070 }
0006a2 5f1f      	SUBI R17,-1
0006a3 cff1      	RJMP _0xE000E
                 _0xE000F:
                 ; 0007 0071 i2c_stop();
0006a4 940e 11ec 	CALL _i2c_stop
                 ; 0007 0072 /* 10ms delay to complete the write operation */
                 ; 0007 0073 delay_ms(10);
0006a6 e0aa      	LDI  R26,LOW(10)
0006a7 e0b0      	LDI  R27,0
0006a8 940e 1229 	CALL _delay_ms
                 ; 0007 0074 }
0006aa 940c 070a 	JMP  _0x214000F
                 ; .FEND
                 ;
                 ;
                 ;void i2c_24lc32(void)
                 ; 0007 0078 {
                 ; 0007 0079 unsigned char j;
                 ; 0007 007A  char data[]={1,2,3};
                 ; 0007 007B 
                 ; 0007 007C i2c_init();
                 ;	j -> R17
                 ;	data -> Y+1
                 ; 0007 007D 
                 ; 0007 007E 
                 ; 0007 007F 
                 ; 0007 0080 
                 ; 0007 0081 
                 ; 0007 0082 
                 ; 0007 0083 /* write the byte 55h at address AAh */
                 ; 0007 0084 eeprom_write(0xaa,data[0]);
                 ; 0007 0085 eeprom_write(0xab,data[1]);
                 ; 0007 0086 eeprom_write(0xac,data[2]);
                 ; 0007 0087 
                 ; 0007 0088 
                 ; 0007 0089 /* read the byte from address AAh */
                 ; 0007 008A j=eeprom_read(0xaa);
                 ; 0007 008B j=eeprom_read(0xab);
                 ; 0007 008C j=eeprom_read(0xac);
                 ; 0007 008D }
                 ;
                 ;
                 ;void i2c_24lc32_frame(void)
                 ; 0007 0091 {
                 _i2c_24lc32_frame:
                 ; .FSTART _i2c_24lc32_frame
                 ; 0007 0092 int i;
                 ; 0007 0093 long int data2;
                 ; 0007 0094 
                 ; 0007 0095 
                 ; 0007 0096 i2c_init();
0006ac 9724      	SBIW R28,4
0006ad 931a      	ST   -Y,R17
0006ae 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                 ;	data2 -> Y+2
0006af 940e 11d8 	CALL _i2c_init
                 ; 0007 0097 
                 ; 0007 0098 for (i=0;i<64;i++)
                +
0006b1 e000     +LDI R16 , LOW ( 0 )
0006b2 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xE0011:
                +
0006b3 3400     +CPI R16 , LOW ( 64 )
0006b4 e0e0     +LDI R30 , HIGH ( 64 )
0006b5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,64
0006b6 f46c      	BRGE _0xE0012
                 ; 0007 0099 {
                 ; 0007 009A data2=i*0x0010;
0006b7 01f8      	MOVW R30,R16
0006b8 940e 1419 	CALL __LSLW4
0006ba 940e 1428 	CALL __CWD1
0006bc 940e 10b9 	CALL SUBOPT_0x4
                 ; 0007 009B eeprom_write_pic(data2);
0006be 81aa      	LDD  R26,Y+2
0006bf 81bb      	LDD  R27,Y+2+1
0006c0 dfc5      	RCALL _eeprom_write_pic
                 ; 0007 009C }
                +
0006c1 5f0f     +SUBI R16 , LOW ( - 1 )
0006c2 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0006c3 cfef      	RJMP _0xE0011
                 _0xE0012:
                 ; 0007 009D }
0006c4 8119      	LDD  R17,Y+1
0006c5 8108      	LDD  R16,Y+0
0006c6 940c 0bd0 	JMP  _0x214000A
                 ; .FEND
                 ;
                 ;
                 ;void i2c_24lc32_read_frame(void)
                 ; 0007 00A1 {
                 _i2c_24lc32_read_frame:
                 ; .FSTART _i2c_24lc32_read_frame
                 ; 0007 00A2  int i;
                 ; 0007 00A3  char scr[20];
                 ; 0007 00A4 
                 ; 0007 00A5 glcd_clear();
0006c8 9764      	SBIW R28,20
0006c9 931a      	ST   -Y,R17
0006ca 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                 ;	scr -> Y+2
0006cb 940e 0b71 	CALL _glcd_clear
                 ; 0007 00A6 
                 ; 0007 00A7 eeprom_read_frame(0,512);  //4  508
0006cd e0e0      	LDI  R30,LOW(0)
0006ce e0f0      	LDI  R31,HIGH(0)
0006cf 940e 10be 	CALL SUBOPT_0x5
                 ; 0007 00A8 glcd_putimagee(4,0,data_rec,GLCD_PUTCOPY);
0006d1 e0e0      	LDI  R30,LOW(0)
0006d2 940e 10c7 	CALL SUBOPT_0x6
                 ; 0007 00A9 
                 ; 0007 00AA eeprom_read_frame(516,512);
0006d4 e0e4      	LDI  R30,LOW(516)
0006d5 e0f2      	LDI  R31,HIGH(516)
0006d6 940e 10be 	CALL SUBOPT_0x5
                 ; 0007 00AB glcd_putimagee(4,32,data_rec,GLCD_PUTCOPY);
0006d8 e2e0      	LDI  R30,LOW(32)
0006d9 940e 10c7 	CALL SUBOPT_0x6
                 ; 0007 00AC }
0006db 8119      	LDD  R17,Y+1
0006dc 8108      	LDD  R16,Y+0
0006dd 9666      	ADIW R28,22
0006de 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;/*************************************/
                 ;void i2c_24lc32_read_byte(void)
                 ; 0007 00B1 {
                 ; 0007 00B2  char i;
                 ; 0007 00B3  char data=0xff;
                 ; 0007 00B4  char scr[20];
                 ; 0007 00B5  for (i=0;i<1024;i++)
                 ;	i -> R17
                 ;	data -> R16
                 ;	scr -> Y+2
                 ; 0007 00B6  {
                 ; 0007 00B7  data=eeprom_read(i);
                 ; 0007 00B8  if (data !=mandalapic[i])
                 ; 0007 00B9   {
                 ; 0007 00BA     sprintf(scr,"error [%d]=%d\r\n",i,data);
                 ; 0007 00BB     puts(scr);
                 ; 0007 00BC 
                 ; 0007 00BD     }
                 ; 0007 00BE     }
                 ; 0007 00BF 
                 ; 0007 00C0 
                 ; 0007 00C1 }
                 ;
                 ;void i2c_24lc32_read_byte2(void)
                 ; 0007 00C4 {
                 ; 0007 00C5  int i;
                 ; 0007 00C6  char data=0xff;
                 ; 0007 00C7  char scr[20];
                 ; 0007 00C8  for (i=0;i<512;i++)
                 ;	i -> R16,R17
                 ;	data -> R19
                 ;	scr -> Y+4
                 ; 0007 00C9  {
                 ; 0007 00CA  data_rec[i]=eeprom_read(i);
                 ; 0007 00CB  if (data_rec[i] ==mandalapic[i])
                 ; 0007 00CC   {
                 ; 0007 00CD     sprintf(scr,"error [%d]=%d--%d\r\n",i,data_rec[i],mandalapic[i]);
                 ; 0007 00CE     puts(scr);
                 ; 0007 00CF 
                 ; 0007 00D0     }
                 ; 0007 00D1     }
                 ; 0007 00D2      sprintf(scr,"data correct\r\n");
                 ; 0007 00D3     puts(scr);
                 ; 0007 00D4 
                 ; 0007 00D5  for (i=512;i<1024;i++)
                 ; 0007 00D6  {
                 ; 0007 00D7  data_rec[i]=eeprom_read(i+512);
                 ; 0007 00D8  if (data_rec[i] ==mandalapic[i+512])
                 ; 0007 00D9   {
                 ; 0007 00DA     sprintf(scr,"error [%d]=%d--%d\r\n",i,data_rec[i],mandalapic[i+512]);
                 ; 0007 00DB     puts(scr);
                 ; 0007 00DC 
                 ; 0007 00DD     }
                 ; 0007 00DE     }
                 ; 0007 00DF 
                 ; 0007 00E0       sprintf(scr,"data correct\r\n");
                 ; 0007 00E1     puts(scr);
                 ; 0007 00E2 }
                 ;
                 ;
                 ;
                 ;/*
                 ;Programming steps in the master device
                 ;
                 ;    Initialize I2C.
                 ;    Generate START condition.
                 ;    Write device Write address (SLA+W) and check for acknowledgement.
                 ;    After acknowledgement write data to slave device.
                 ;    Generate REPEATED START condition with SLA+R.
                 ;    Receive data from slave device.
                 ;
                 ;
                 ;Programming steps in slave device
                 ;
                 ;    Initialize I2C with slave device address.
                 ;    Listen to bus for get addressed by master.
                 ;    While addressed with SLA+W by master device, receive data from master device.
                 ;    Return acknowledgement after each byte received.
                 ;    Clear interrupt flag after REPEATED START/STOP received.
                 ;    Print received data on LCD.
                 ;    Again listen to bus for get addressed by master.
                 ;    While addressed with SLA+R by master device, transmit data to master device.
                 ;    Transmit data till NACK/REPEATED START/STOP receive from master.
                 ;    Clear interrupt flag after NACK/REPEATED START/STOP received.
                 ;
                 ;
                 ;    https://www.avrfreaks.net/forum/twi-module-seems-buggy-multi-master-communications
                 ;*/
                 ;
                 ;
                 ;#include <myheader.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <mandala2.h>
                 ;
                 ;void glcddisplay(void)
                 ; 0008 0005 {
                 
                 	.CSEG
                 _glcddisplay:
                 ; .FSTART _glcddisplay
                 ; 0008 0006  GLCDINIT_t glcd_init_data;
                 ; 0008 0007 
                 ; 0008 0008 
                 ; 0008 0009 glcd_init_data.font=font5x7;
0006df 9726      	SBIW R28,6
                 ;	glcd_init_data -> Y+0
0006e0 e5e4      	LDI  R30,LOW(_font5x7*2)
0006e1 e0f0      	LDI  R31,HIGH(_font5x7*2)
0006e2 83e8      	ST   Y,R30
0006e3 83f9      	STD  Y+1,R31
                 ; 0008 000A glcd_init_data.readxmem=NULL;
0006e4 e0e0      	LDI  R30,LOW(0)
0006e5 83ea      	STD  Y+2,R30
0006e6 83eb      	STD  Y+2+1,R30
                 ; 0008 000B glcd_init_data.writexmem=NULL;
0006e7 83ec      	STD  Y+4,R30
0006e8 83ed      	STD  Y+4+1,R30
                 ; 0008 000C glcd_init(&glcd_init_data);
0006e9 01de      	MOVW R26,R28
0006ea 940e 0b0c 	CALL _glcd_init
                 ; 0008 000D 
                 ; 0008 000E 
                 ; 0008 000F glcd_putimagef(0,0,mandalapic,GLCD_PUTCOPY);
0006ec e0e0      	LDI  R30,LOW(0)
0006ed 93ea      	ST   -Y,R30
0006ee 93ea      	ST   -Y,R30
0006ef e3e8      	LDI  R30,LOW(_mandalapic*2)
0006f0 e0f2      	LDI  R31,HIGH(_mandalapic*2)
0006f1 93fa      	ST   -Y,R31
0006f2 93ea      	ST   -Y,R30
0006f3 e0a0      	LDI  R26,LOW(0)
0006f4 940e 0e03 	CALL _glcd_putimagef
                 ; 0008 0010 
                 ; 0008 0011 
                 ; 0008 0012 }
0006f6 940c 0bd0 	JMP  _0x214000A
                 ; .FEND
                 ;void glcd_init_func(void)
                 ; 0008 0014 {
                 ; 0008 0015  GLCDINIT_t glcd_init_data;
                 ; 0008 0016 
                 ; 0008 0017 
                 ; 0008 0018 glcd_init_data.font=font5x7;
                 ;	glcd_init_data -> Y+0
                 ; 0008 0019 glcd_init_data.readxmem=NULL;
                 ; 0008 001A glcd_init_data.writexmem=NULL;
                 ; 0008 001B glcd_init(&glcd_init_data);
                 ; 0008 001C 
                 ; 0008 001D //glcd_putimagef(0,0,mandalapic,GLCD_PUTCOPY);
                 ; 0008 001E 
                 ; 0008 001F }
                 ;
                 ;void glcddisplay2(void)
                 ; 0008 0022 {
                 ; 0008 0023  GLCDINIT_t glcd_init_data;
                 ; 0008 0024 
                 ; 0008 0025 
                 ; 0008 0026 glcd_init_data.font=font5x7;
                 ;	glcd_init_data -> Y+0
                 ; 0008 0027 glcd_init_data.readxmem=NULL;
                 ; 0008 0028 glcd_init_data.writexmem=NULL;
                 ; 0008 0029 glcd_init(&glcd_init_data);
                 ; 0008 002A 
                 ; 0008 002B glcd_putimagee(0,0,data_rec,GLCD_PUTCOPY);
                 ; 0008 002C 
                 ; 0008 002D }
                 ;
                 ;//void clock_display(void)
                 ;//{
                 ;//glcd_init_func();
                 ;//glcd_putimagef(0,0,clock,GLCD_PUTCOPY);
                 ;//}
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _puts:
                 ; .FSTART _puts
0006f8 93ba      	ST   -Y,R27
0006f9 93aa      	ST   -Y,R26
0006fa 931a      	ST   -Y,R17
                 _0x2000003:
0006fb 81a9      	LDD  R26,Y+1
0006fc 81ba      	LDD  R27,Y+1+1
0006fd 91ed      	LD   R30,X+
0006fe 83a9      	STD  Y+1,R26
0006ff 83ba      	STD  Y+1+1,R27
000700 2f1e      	MOV  R17,R30
000701 30e0      	CPI  R30,0
000702 f021      	BREQ _0x2000005
000703 2fa1      	MOV  R26,R17
000704 940e 0587 	CALL _putchar
000706 cff4      	RJMP _0x2000003
                 _0x2000005:
000707 e0aa      	LDI  R26,LOW(10)
000708 940e 0587 	CALL _putchar
                 _0x214000F:
00070a 8118      	LDD  R17,Y+0
00070b 9623      	ADIW R28,3
00070c 9508      	RET
                 ; .FEND
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00070d 93ba      	ST   -Y,R27
00070e 93aa      	ST   -Y,R26
00070f 931a      	ST   -Y,R17
000710 930a      	ST   -Y,R16
000711 81aa      	LDD  R26,Y+2
000712 81bb      	LDD  R27,Y+2+1
000713 9612      	ADIW R26,2
000714 940e 1455 	CALL __GETW1P
000716 9730      	SBIW R30,0
000717 f159      	BREQ _0x2000010
000718 81aa      	LDD  R26,Y+2
000719 81bb      	LDD  R27,Y+2+1
00071a 9614      	ADIW R26,4
00071b 940e 1455 	CALL __GETW1P
00071d 018f      	MOVW R16,R30
00071e 9730      	SBIW R30,0
00071f f061      	BREQ _0x2000012
                +
000720 3002     +CPI R16 , LOW ( 2 )
000721 e0e0     +LDI R30 , HIGH ( 2 )
000722 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000723 f098      	BRLO _0x2000013
000724 01f8      	MOVW R30,R16
000725 9731      	SBIW R30,1
000726 018f      	MOVW R16,R30
                +
000727 81aa     +LDD R26 , Y + 2
000728 81bb     +LDD R27 , Y + 2 + 1
000729 9614     +ADIW R26 , 4
00072a 93ed     +ST X + , R30
00072b 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00072c 81aa      	LDD  R26,Y+2
00072d 81bb      	LDD  R27,Y+2+1
00072e 9612      	ADIW R26,2
00072f 91ed      	LD   R30,X+
000730 91fd      	LD   R31,X+
000731 9631      	ADIW R30,1
000732 93fe      	ST   -X,R31
000733 93ee      	ST   -X,R30
000734 9731      	SBIW R30,1
000735 81ac      	LDD  R26,Y+4
000736 83a0      	STD  Z+0,R26
                 _0x2000013:
000737 81aa      	LDD  R26,Y+2
000738 81bb      	LDD  R27,Y+2+1
000739 940e 1455 	CALL __GETW1P
00073b 23ff      	TST  R31
00073c f02a      	BRMI _0x2000014
00073d 91ed      	LD   R30,X+
00073e 91fd      	LD   R31,X+
00073f 9631      	ADIW R30,1
000740 93fe      	ST   -X,R31
000741 93ee      	ST   -X,R30
                 _0x2000014:
000742 c006      	RJMP _0x2000015
                 _0x2000010:
000743 81aa      	LDD  R26,Y+2
000744 81bb      	LDD  R27,Y+2+1
000745 efef      	LDI  R30,LOW(65535)
000746 efff      	LDI  R31,HIGH(65535)
000747 93ed      	ST   X+,R30
000748 93fc      	ST   X,R31
                 _0x2000015:
000749 8119      	LDD  R17,Y+1
00074a 8108      	LDD  R16,Y+0
00074b 9625      	ADIW R28,5
00074c 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00074d 93ba      	ST   -Y,R27
00074e 93aa      	ST   -Y,R26
00074f 9726      	SBIW R28,6
000750 940e 14b8 	CALL __SAVELOCR6
000752 e010      	LDI  R17,0
000753 85ac      	LDD  R26,Y+12
000754 85bd      	LDD  R27,Y+12+1
000755 e0e0      	LDI  R30,LOW(0)
000756 e0f0      	LDI  R31,HIGH(0)
000757 93ed      	ST   X+,R30
000758 93fc      	ST   X,R31
                 _0x2000016:
000759 89ea      	LDD  R30,Y+18
00075a 89fb      	LDD  R31,Y+18+1
00075b 9631      	ADIW R30,1
00075c 8bea      	STD  Y+18,R30
00075d 8bfb      	STD  Y+18+1,R31
00075e 9731      	SBIW R30,1
00075f 91e4      	LPM  R30,Z
000760 2f2e      	MOV  R18,R30
000761 30e0      	CPI  R30,0
000762 f409      	BRNE PC+2
000763 c115      	RJMP _0x2000018
000764 2fe1      	MOV  R30,R17
000765 30e0      	CPI  R30,0
000766 f439      	BRNE _0x200001C
000767 3225      	CPI  R18,37
000768 f411      	BRNE _0x200001D
000769 e011      	LDI  R17,LOW(1)
00076a c002      	RJMP _0x200001E
                 _0x200001D:
00076b 940e 10cf 	CALL SUBOPT_0x7
                 _0x200001E:
00076d c10a      	RJMP _0x200001B
                 _0x200001C:
00076e 30e1      	CPI  R30,LOW(0x1)
00076f f4a9      	BRNE _0x200001F
000770 3225      	CPI  R18,37
000771 f419      	BRNE _0x2000020
000772 940e 10cf 	CALL SUBOPT_0x7
000774 c102      	RJMP _0x20000CC
                 _0x2000020:
000775 e012      	LDI  R17,LOW(2)
000776 e040      	LDI  R20,LOW(0)
000777 e000      	LDI  R16,LOW(0)
000778 322d      	CPI  R18,45
000779 f411      	BRNE _0x2000021
00077a e001      	LDI  R16,LOW(1)
00077b c0fc      	RJMP _0x200001B
                 _0x2000021:
00077c 322b      	CPI  R18,43
00077d f411      	BRNE _0x2000022
00077e e24b      	LDI  R20,LOW(43)
00077f c0f8      	RJMP _0x200001B
                 _0x2000022:
000780 3220      	CPI  R18,32
000781 f411      	BRNE _0x2000023
000782 e240      	LDI  R20,LOW(32)
000783 c0f4      	RJMP _0x200001B
                 _0x2000023:
000784 c002      	RJMP _0x2000024
                 _0x200001F:
000785 30e2      	CPI  R30,LOW(0x2)
000786 f439      	BRNE _0x2000025
                 _0x2000024:
000787 e050      	LDI  R21,LOW(0)
000788 e013      	LDI  R17,LOW(3)
000789 3320      	CPI  R18,48
00078a f411      	BRNE _0x2000026
00078b 6800      	ORI  R16,LOW(128)
00078c c0eb      	RJMP _0x200001B
                 _0x2000026:
00078d c003      	RJMP _0x2000027
                 _0x2000025:
00078e 30e3      	CPI  R30,LOW(0x3)
00078f f009      	BREQ PC+2
000790 c0e7      	RJMP _0x200001B
                 _0x2000027:
000791 3320      	CPI  R18,48
000792 f010      	BRLO _0x200002A
000793 332a      	CPI  R18,58
000794 f008      	BRLO _0x200002B
                 _0x200002A:
000795 c007      	RJMP _0x2000029
                 _0x200002B:
000796 e0aa      	LDI  R26,LOW(10)
000797 9f5a      	MUL  R21,R26
000798 2d50      	MOV  R21,R0
000799 2fe2      	MOV  R30,R18
00079a 53e0      	SUBI R30,LOW(48)
00079b 0f5e      	ADD  R21,R30
00079c c0db      	RJMP _0x200001B
                 _0x2000029:
00079d 2fe2      	MOV  R30,R18
00079e 36e3      	CPI  R30,LOW(0x63)
00079f f449      	BRNE _0x200002F
0007a0 940e 10d6 	CALL SUBOPT_0x8
0007a2 89e8      	LDD  R30,Y+16
0007a3 89f9      	LDD  R31,Y+16+1
0007a4 81a4      	LDD  R26,Z+4
0007a5 93aa      	ST   -Y,R26
0007a6 940e 10dc 	CALL SUBOPT_0x9
0007a8 c0ce      	RJMP _0x2000030
                 _0x200002F:
0007a9 37e3      	CPI  R30,LOW(0x73)
0007aa f441      	BRNE _0x2000032
0007ab 940e 10d6 	CALL SUBOPT_0x8
0007ad 940e 10e2 	CALL SUBOPT_0xA
0007af 940e 1010 	CALL _strlen
0007b1 2f1e      	MOV  R17,R30
0007b2 c00a      	RJMP _0x2000033
                 _0x2000032:
0007b3 37e0      	CPI  R30,LOW(0x70)
0007b4 f461      	BRNE _0x2000035
0007b5 940e 10d6 	CALL SUBOPT_0x8
0007b7 940e 10e2 	CALL SUBOPT_0xA
0007b9 940e 101c 	CALL _strlenf
0007bb 2f1e      	MOV  R17,R30
0007bc 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0007bd 6002      	ORI  R16,LOW(2)
0007be 770f      	ANDI R16,LOW(127)
0007bf e030      	LDI  R19,LOW(0)
0007c0 c034      	RJMP _0x2000036
                 _0x2000035:
0007c1 36e4      	CPI  R30,LOW(0x64)
0007c2 f011      	BREQ _0x2000039
0007c3 36e9      	CPI  R30,LOW(0x69)
0007c4 f411      	BRNE _0x200003A
                 _0x2000039:
0007c5 6004      	ORI  R16,LOW(4)
0007c6 c002      	RJMP _0x200003B
                 _0x200003A:
0007c7 37e5      	CPI  R30,LOW(0x75)
0007c8 f431      	BRNE _0x200003C
                 _0x200003B:
0007c9 e3ec      	LDI  R30,LOW(_tbl10_G100*2)
0007ca e0f6      	LDI  R31,HIGH(_tbl10_G100*2)
0007cb 83ee      	STD  Y+6,R30
0007cc 83ff      	STD  Y+6+1,R31
0007cd e015      	LDI  R17,LOW(5)
0007ce c00c      	RJMP _0x200003D
                 _0x200003C:
0007cf 35e8      	CPI  R30,LOW(0x58)
0007d0 f411      	BRNE _0x200003F
0007d1 6008      	ORI  R16,LOW(8)
0007d2 c003      	RJMP _0x2000040
                 _0x200003F:
0007d3 37e8      	CPI  R30,LOW(0x78)
0007d4 f009      	BREQ PC+2
0007d5 c0a1      	RJMP _0x2000071
                 _0x2000040:
0007d6 e4e6      	LDI  R30,LOW(_tbl16_G100*2)
0007d7 e0f6      	LDI  R31,HIGH(_tbl16_G100*2)
0007d8 83ee      	STD  Y+6,R30
0007d9 83ff      	STD  Y+6+1,R31
0007da e014      	LDI  R17,LOW(4)
                 _0x200003D:
0007db ff02      	SBRS R16,2
0007dc c014      	RJMP _0x2000042
0007dd 940e 10d6 	CALL SUBOPT_0x8
0007df 940e 10ec 	CALL SUBOPT_0xB
0007e1 85ab      	LDD  R26,Y+11
0007e2 23aa      	TST  R26
0007e3 f43a      	BRPL _0x2000043
0007e4 85ea      	LDD  R30,Y+10
0007e5 85fb      	LDD  R31,Y+10+1
0007e6 940e 13fd 	CALL __ANEGW1
0007e8 87ea      	STD  Y+10,R30
0007e9 87fb      	STD  Y+10+1,R31
0007ea e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0007eb 3040      	CPI  R20,0
0007ec f011      	BREQ _0x2000044
0007ed 5f1f      	SUBI R17,-LOW(1)
0007ee c001      	RJMP _0x2000045
                 _0x2000044:
0007ef 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0007f0 c004      	RJMP _0x2000046
                 _0x2000042:
0007f1 940e 10d6 	CALL SUBOPT_0x8
0007f3 940e 10ec 	CALL SUBOPT_0xB
                 _0x2000046:
                 _0x2000036:
0007f5 fd00      	SBRC R16,0
0007f6 c011      	RJMP _0x2000047
                 _0x2000048:
0007f7 1715      	CP   R17,R21
0007f8 f478      	BRSH _0x200004A
0007f9 ff07      	SBRS R16,7
0007fa c008      	RJMP _0x200004B
0007fb ff02      	SBRS R16,2
0007fc c004      	RJMP _0x200004C
0007fd 7f0b      	ANDI R16,LOW(251)
0007fe 2f24      	MOV  R18,R20
0007ff 5011      	SUBI R17,LOW(1)
000800 c001      	RJMP _0x200004D
                 _0x200004C:
000801 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000802 c001      	RJMP _0x200004E
                 _0x200004B:
000803 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000804 940e 10cf 	CALL SUBOPT_0x7
000806 5051      	SUBI R21,LOW(1)
000807 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000808 2f31      	MOV  R19,R17
000809 ff01      	SBRS R16,1
00080a c017      	RJMP _0x200004F
                 _0x2000050:
00080b 3030      	CPI  R19,0
00080c f0a1      	BREQ _0x2000052
00080d ff03      	SBRS R16,3
00080e c006      	RJMP _0x2000053
00080f 81ee      	LDD  R30,Y+6
000810 81ff      	LDD  R31,Y+6+1
000811 9125      	LPM  R18,Z+
000812 83ee      	STD  Y+6,R30
000813 83ff      	STD  Y+6+1,R31
000814 c005      	RJMP _0x2000054
                 _0x2000053:
000815 81ae      	LDD  R26,Y+6
000816 81bf      	LDD  R27,Y+6+1
000817 912d      	LD   R18,X+
000818 83ae      	STD  Y+6,R26
000819 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00081a 940e 10cf 	CALL SUBOPT_0x7
00081c 3050      	CPI  R21,0
00081d f009      	BREQ _0x2000055
00081e 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00081f 5031      	SUBI R19,LOW(1)
000820 cfea      	RJMP _0x2000050
                 _0x2000052:
000821 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000822 e320      	LDI  R18,LOW(48)
000823 81ee      	LDD  R30,Y+6
000824 81ff      	LDD  R31,Y+6+1
000825 940e 145e 	CALL __GETW1PF
000827 87e8      	STD  Y+8,R30
000828 87f9      	STD  Y+8+1,R31
000829 81ee      	LDD  R30,Y+6
00082a 81ff      	LDD  R31,Y+6+1
00082b 9632      	ADIW R30,2
00082c 83ee      	STD  Y+6,R30
00082d 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00082e 85e8      	LDD  R30,Y+8
00082f 85f9      	LDD  R31,Y+8+1
000830 85aa      	LDD  R26,Y+10
000831 85bb      	LDD  R27,Y+10+1
000832 17ae      	CP   R26,R30
000833 07bf      	CPC  R27,R31
000834 f050      	BRLO _0x200005C
000835 5f2f      	SUBI R18,-LOW(1)
000836 85a8      	LDD  R26,Y+8
000837 85b9      	LDD  R27,Y+8+1
000838 85ea      	LDD  R30,Y+10
000839 85fb      	LDD  R31,Y+10+1
00083a 1bea      	SUB  R30,R26
00083b 0bfb      	SBC  R31,R27
00083c 87ea      	STD  Y+10,R30
00083d 87fb      	STD  Y+10+1,R31
00083e cfef      	RJMP _0x200005A
                 _0x200005C:
00083f 332a      	CPI  R18,58
000840 f028      	BRLO _0x200005D
000841 ff03      	SBRS R16,3
000842 c002      	RJMP _0x200005E
000843 5f29      	SUBI R18,-LOW(7)
000844 c001      	RJMP _0x200005F
                 _0x200005E:
000845 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000846 fd04      	SBRC R16,4
000847 c01a      	RJMP _0x2000061
000848 3321      	CPI  R18,49
000849 f420      	BRSH _0x2000063
00084a 85a8      	LDD  R26,Y+8
00084b 85b9      	LDD  R27,Y+8+1
00084c 9711      	SBIW R26,1
00084d f409      	BRNE _0x2000062
                 _0x2000063:
00084e c009      	RJMP _0x20000CD
                 _0x2000062:
00084f 1753      	CP   R21,R19
000850 f010      	BRLO _0x2000067
000851 ff00      	SBRS R16,0
000852 c001      	RJMP _0x2000068
                 _0x2000067:
000853 c013      	RJMP _0x2000066
                 _0x2000068:
000854 e220      	LDI  R18,LOW(32)
000855 ff07      	SBRS R16,7
000856 c00b      	RJMP _0x2000069
000857 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000858 6100      	ORI  R16,LOW(16)
000859 ff02      	SBRS R16,2
00085a c007      	RJMP _0x200006A
00085b 7f0b      	ANDI R16,LOW(251)
00085c 934a      	ST   -Y,R20
00085d 940e 10dc 	CALL SUBOPT_0x9
00085f 3050      	CPI  R21,0
000860 f009      	BREQ _0x200006B
000861 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000862 940e 10cf 	CALL SUBOPT_0x7
000864 3050      	CPI  R21,0
000865 f009      	BREQ _0x200006C
000866 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000867 5031      	SUBI R19,LOW(1)
000868 85a8      	LDD  R26,Y+8
000869 85b9      	LDD  R27,Y+8+1
00086a 9712      	SBIW R26,2
00086b f008      	BRLO _0x2000059
00086c cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00086d ff00      	SBRS R16,0
00086e c008      	RJMP _0x200006D
                 _0x200006E:
00086f 3050      	CPI  R21,0
000870 f031      	BREQ _0x2000070
000871 5051      	SUBI R21,LOW(1)
000872 e2e0      	LDI  R30,LOW(32)
000873 93ea      	ST   -Y,R30
000874 940e 10dc 	CALL SUBOPT_0x9
000876 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000877 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000878 cee0      	RJMP _0x2000016
                 _0x2000018:
000879 85ac      	LDD  R26,Y+12
00087a 85bd      	LDD  R27,Y+12+1
00087b 940e 1455 	CALL __GETW1P
00087d 940e 14bf 	CALL __LOADLOCR6
                 _0x214000E:
00087f 9664      	ADIW R28,20
000880 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000881 92ff      	PUSH R15
000882 2ef8      	MOV  R15,R24
000883 9726      	SBIW R28,6
000884 940e 14ba 	CALL __SAVELOCR4
000886 940e 10f4 	CALL SUBOPT_0xC
000888 9730      	SBIW R30,0
000889 f419      	BRNE _0x2000072
00088a efef      	LDI  R30,LOW(65535)
00088b efff      	LDI  R31,HIGH(65535)
00088c c023      	RJMP _0x214000D
                 _0x2000072:
00088d 01de      	MOVW R26,R28
00088e 9616      	ADIW R26,6
00088f 940e 13f9 	CALL __ADDW2R15
000891 018d      	MOVW R16,R26
000892 940e 10f4 	CALL SUBOPT_0xC
000894 83ee      	STD  Y+6,R30
000895 83ff      	STD  Y+6+1,R31
000896 e0e0      	LDI  R30,LOW(0)
000897 87e8      	STD  Y+8,R30
000898 87e9      	STD  Y+8+1,R30
000899 01de      	MOVW R26,R28
00089a 961a      	ADIW R26,10
00089b 940e 13f9 	CALL __ADDW2R15
00089d 940e 1455 	CALL __GETW1P
00089f 93fa      	ST   -Y,R31
0008a0 93ea      	ST   -Y,R30
0008a1 931a      	ST   -Y,R17
0008a2 930a      	ST   -Y,R16
0008a3 e0ed      	LDI  R30,LOW(_put_buff_G100)
0008a4 e0f7      	LDI  R31,HIGH(_put_buff_G100)
0008a5 93fa      	ST   -Y,R31
0008a6 93ea      	ST   -Y,R30
0008a7 01de      	MOVW R26,R28
0008a8 961a      	ADIW R26,10
0008a9 dea3      	RCALL __print_G100
0008aa 019f      	MOVW R18,R30
0008ab 81ae      	LDD  R26,Y+6
0008ac 81bf      	LDD  R27,Y+6+1
0008ad e0e0      	LDI  R30,LOW(0)
0008ae 93ec      	ST   X,R30
0008af 01f9      	MOVW R30,R18
                 _0x214000D:
0008b0 940e 14c1 	CALL __LOADLOCR4
0008b2 962a      	ADIW R28,10
0008b3 90ff      	POP  R15
0008b4 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 _twi_int_handler:
                 ; .FSTART _twi_int_handler
0008b5 920a      	ST   -Y,R0
0008b6 921a      	ST   -Y,R1
0008b7 92fa      	ST   -Y,R15
0008b8 936a      	ST   -Y,R22
0008b9 937a      	ST   -Y,R23
0008ba 938a      	ST   -Y,R24
0008bb 939a      	ST   -Y,R25
0008bc 93aa      	ST   -Y,R26
0008bd 93ba      	ST   -Y,R27
0008be 93ea      	ST   -Y,R30
0008bf 93fa      	ST   -Y,R31
0008c0 b7ef      	IN   R30,SREG
0008c1 93ea      	ST   -Y,R30
0008c2 940e 14b8 	CALL __SAVELOCR6
0008c4 9110 020b 	LDS  R17,_twi_rx_index
0008c6 9100 020a 	LDS  R16,_twi_tx_index
0008c8 9130 042e 	LDS  R19,_bytes_to_tx_G101
0008ca 9120 020c 	LDS  R18,_twi_result
0008cc 2fe1      	MOV  R30,R17
0008cd 91a0 042f 	LDS  R26,_twi_rx_buffer_G101
0008cf 91b0 0430 	LDS  R27,_twi_rx_buffer_G101+1
0008d1 e0f0      	LDI  R31,0
0008d2 0fea      	ADD  R30,R26
0008d3 1ffb      	ADC  R31,R27
0008d4 01af      	MOVW R20,R30
0008d5 b1e1      	IN   R30,0x1
0008d6 7fe8      	ANDI R30,LOW(0xF8)
0008d7 30e8      	CPI  R30,LOW(0x8)
0008d8 f411      	BRNE _0x2020017
0008d9 e020      	LDI  R18,LOW(0)
0008da c002      	RJMP _0x2020018
                 _0x2020017:
0008db 31e0      	CPI  R30,LOW(0x10)
0008dc f419      	BRNE _0x2020019
                 _0x2020018:
0008dd 91e0 042b 	LDS  R30,_slave_address_G101
0008df c010      	RJMP _0x2020067
                 _0x2020019:
0008e0 31e8      	CPI  R30,LOW(0x18)
0008e1 f011      	BREQ _0x202001D
0008e2 32e8      	CPI  R30,LOW(0x28)
0008e3 f521      	BRNE _0x202001E
                 _0x202001D:
0008e4 1703      	CP   R16,R19
0008e5 f480      	BRSH _0x202001F
0008e6 2fe0      	MOV  R30,R16
0008e7 5f0f      	SUBI R16,-1
0008e8 91a0 042c 	LDS  R26,_twi_tx_buffer_G101
0008ea 91b0 042d 	LDS  R27,_twi_tx_buffer_G101+1
0008ec e0f0      	LDI  R31,0
0008ed 0fae      	ADD  R26,R30
0008ee 1fbf      	ADC  R27,R31
0008ef 91ec      	LD   R30,X
                 _0x2020067:
0008f0 b9e3      	OUT  0x3,R30
0008f1 b7e6      	IN   R30,0x36
0008f2 70ef      	ANDI R30,LOW(0xF)
0008f3 68e0      	ORI  R30,0x80
0008f4 bfe6      	OUT  0x36,R30
0008f5 c011      	RJMP _0x2020020
                 _0x202001F:
0008f6 91e0 0431 	LDS  R30,_bytes_to_rx_G101
0008f8 171e      	CP   R17,R30
0008f9 f460      	BRSH _0x2020021
0008fa 91e0 042b 	LDS  R30,_slave_address_G101
0008fc 60e1      	ORI  R30,1
0008fd 93e0 042b 	STS  _slave_address_G101,R30
0008ff 94e8      	CLT
000900 f823      	BLD  R2,3
000901 b7e6      	IN   R30,0x36
000902 70ef      	ANDI R30,LOW(0xF)
000903 6ae0      	ORI  R30,LOW(0xA0)
000904 bfe6      	OUT  0x36,R30
000905 c0fb      	RJMP _0x2020016
                 _0x2020021:
000906 c033      	RJMP _0x2020022
                 _0x2020020:
000907 c0f9      	RJMP _0x2020016
                 _0x202001E:
000908 35e0      	CPI  R30,LOW(0x50)
000909 f429      	BRNE _0x2020023
00090a b1e3      	IN   R30,0x3
00090b 01da      	MOVW R26,R20
00090c 93ec      	ST   X,R30
00090d 5f1f      	SUBI R17,-LOW(1)
00090e c002      	RJMP _0x2020024
                 _0x2020023:
00090f 34e0      	CPI  R30,LOW(0x40)
000910 f471      	BRNE _0x2020025
                 _0x2020024:
000911 91e0 0431 	LDS  R30,_bytes_to_rx_G101
000913 50e1      	SUBI R30,LOW(1)
000914 171e      	CP   R17,R30
000915 f020      	BRLO _0x2020026
000916 b7e6      	IN   R30,0x36
000917 70ef      	ANDI R30,LOW(0xF)
000918 68e0      	ORI  R30,0x80
000919 c003      	RJMP _0x2020068
                 _0x2020026:
00091a b7e6      	IN   R30,0x36
00091b 70ef      	ANDI R30,LOW(0xF)
00091c 6ce0      	ORI  R30,LOW(0xC0)
                 _0x2020068:
00091d bfe6      	OUT  0x36,R30
00091e c0e2      	RJMP _0x2020016
                 _0x2020025:
00091f 35e8      	CPI  R30,LOW(0x58)
000920 f429      	BRNE _0x2020028
000921 b1e3      	IN   R30,0x3
000922 01da      	MOVW R26,R20
000923 93ec      	ST   X,R30
000924 5f1f      	SUBI R17,-LOW(1)
000925 c002      	RJMP _0x2020029
                 _0x2020028:
000926 32e0      	CPI  R30,LOW(0x20)
000927 f409      	BRNE _0x202002A
                 _0x2020029:
000928 c002      	RJMP _0x202002B
                 _0x202002A:
000929 33e0      	CPI  R30,LOW(0x30)
00092a f409      	BRNE _0x202002C
                 _0x202002B:
00092b c002      	RJMP _0x202002D
                 _0x202002C:
00092c 34e8      	CPI  R30,LOW(0x48)
00092d f469      	BRNE _0x202002E
                 _0x202002D:
00092e 3020      	CPI  R18,0
00092f f451      	BRNE _0x202002F
000930 fe23      	SBRS R2,3
000931 c003      	RJMP _0x2020030
000932 1703      	CP   R16,R19
000933 f028      	BRLO _0x2020032
000934 c005      	RJMP _0x2020033
                 _0x2020030:
000935 91e0 0431 	LDS  R30,_bytes_to_rx_G101
000937 171e      	CP   R17,R30
000938 f408      	BRSH _0x2020034
                 _0x2020032:
000939 e024      	LDI  R18,LOW(4)
                 _0x2020034:
                 _0x2020033:
                 _0x202002F:
                 _0x2020022:
00093a c0c0      	RJMP _0x2020069
                 _0x202002E:
00093b 33e8      	CPI  R30,LOW(0x38)
00093c f429      	BRNE _0x2020037
00093d e022      	LDI  R18,LOW(2)
00093e b7e6      	IN   R30,0x36
00093f 70ef      	ANDI R30,LOW(0xF)
000940 68e0      	ORI  R30,0x80
000941 c0bc      	RJMP _0x202006A
                 _0x2020037:
000942 36e8      	CPI  R30,LOW(0x68)
000943 f011      	BREQ _0x202003A
000944 37e8      	CPI  R30,LOW(0x78)
000945 f411      	BRNE _0x202003B
                 _0x202003A:
000946 e022      	LDI  R18,LOW(2)
000947 c005      	RJMP _0x202003C
                 _0x202003B:
000948 36e0      	CPI  R30,LOW(0x60)
000949 f011      	BREQ _0x202003F
00094a 37e0      	CPI  R30,LOW(0x70)
00094b f491      	BRNE _0x2020040
                 _0x202003F:
00094c e020      	LDI  R18,LOW(0)
                 _0x202003C:
00094d e010      	LDI  R17,LOW(0)
00094e 94e8      	CLT
00094f f823      	BLD  R2,3
000950 91e0 0432 	LDS  R30,_twi_rx_buffer_size_G101
000952 30e0      	CPI  R30,0
000953 f429      	BRNE _0x2020041
000954 e021      	LDI  R18,LOW(1)
000955 b7e6      	IN   R30,0x36
000956 70ef      	ANDI R30,LOW(0xF)
000957 68e0      	ORI  R30,0x80
000958 c003      	RJMP _0x202006B
                 _0x2020041:
000959 b7e6      	IN   R30,0x36
00095a 70ef      	ANDI R30,LOW(0xF)
00095b 6ce0      	ORI  R30,LOW(0xC0)
                 _0x202006B:
00095c bfe6      	OUT  0x36,R30
00095d c0a3      	RJMP _0x2020016
                 _0x2020040:
00095e 38e0      	CPI  R30,LOW(0x80)
00095f f011      	BREQ _0x2020044
000960 39e0      	CPI  R30,LOW(0x90)
000961 f529      	BRNE _0x2020045
                 _0x2020044:
000962 fe23      	SBRS R2,3
000963 c002      	RJMP _0x2020046
000964 e021      	LDI  R18,LOW(1)
000965 c095      	RJMP _0x2020047
                 _0x2020046:
000966 b1e3      	IN   R30,0x3
000967 01da      	MOVW R26,R20
000968 93ec      	ST   X,R30
000969 5f1f      	SUBI R17,-LOW(1)
00096a 91e0 0432 	LDS  R30,_twi_rx_buffer_size_G101
00096c 171e      	CP   R17,R30
00096d f4b0      	BRSH _0x2020048
00096e 91e0 0433 	LDS  R30,_twi_slave_rx_handler_G101
000970 91f0 0434 	LDS  R31,_twi_slave_rx_handler_G101+1
000972 9730      	SBIW R30,0
000973 f411      	BRNE _0x2020049
000974 e026      	LDI  R18,LOW(6)
000975 c085      	RJMP _0x2020047
                 _0x2020049:
000976 e0a0      	LDI  R26,LOW(0)
                +
000977 91e0 0433+LDS R30 , _twi_slave_rx_handler_G101 + ( 0 )
000979 91f0 0434+LDS R31 , _twi_slave_rx_handler_G101 + ( 0 ) + 1
00097b 9509     +ICALL
                 	__CALL1MN _twi_slave_rx_handler_G101,0
00097c 30e0      	CPI  R30,0
00097d f029      	BREQ _0x202004A
00097e b7e6      	IN   R30,0x36
00097f 70ef      	ANDI R30,LOW(0xF)
000980 6ce0      	ORI  R30,LOW(0xC0)
000981 bfe6      	OUT  0x36,R30
000982 c07e      	RJMP _0x2020016
                 _0x202004A:
000983 c002      	RJMP _0x202004B
                 _0x2020048:
000984 9468      	SET
000985 f823      	BLD  R2,3
                 _0x202004B:
000986 c002      	RJMP _0x202004C
                 _0x2020045:
000987 38e8      	CPI  R30,LOW(0x88)
000988 f409      	BRNE _0x202004D
                 _0x202004C:
000989 c002      	RJMP _0x202004E
                 _0x202004D:
00098a 39e8      	CPI  R30,LOW(0x98)
00098b f429      	BRNE _0x202004F
                 _0x202004E:
00098c b7e6      	IN   R30,0x36
00098d 70ef      	ANDI R30,LOW(0xF)
00098e 68e0      	ORI  R30,0x80
00098f bfe6      	OUT  0x36,R30
000990 c070      	RJMP _0x2020016
                 _0x202004F:
000991 3ae0      	CPI  R30,LOW(0xA0)
000992 f4a9      	BRNE _0x2020050
000993 b7e6      	IN   R30,0x36
000994 70ef      	ANDI R30,LOW(0xF)
000995 6ce0      	ORI  R30,LOW(0xC0)
000996 bfe6      	OUT  0x36,R30
000997 9468      	SET
000998 f824      	BLD  R2,4
000999 91e0 0433 	LDS  R30,_twi_slave_rx_handler_G101
00099b 91f0 0434 	LDS  R31,_twi_slave_rx_handler_G101+1
00099d 9730      	SBIW R30,0
00099e f039      	BREQ _0x2020051
00099f e0a1      	LDI  R26,LOW(1)
                +
0009a0 91e0 0433+LDS R30 , _twi_slave_rx_handler_G101 + ( 0 )
0009a2 91f0 0434+LDS R31 , _twi_slave_rx_handler_G101 + ( 0 ) + 1
0009a4 9509     +ICALL
                 	__CALL1MN _twi_slave_rx_handler_G101,0
0009a5 c001      	RJMP _0x2020052
                 _0x2020051:
0009a6 e026      	LDI  R18,LOW(6)
                 _0x2020052:
0009a7 c059      	RJMP _0x2020016
                 _0x2020050:
0009a8 3be0      	CPI  R30,LOW(0xB0)
0009a9 f411      	BRNE _0x2020053
0009aa e022      	LDI  R18,LOW(2)
0009ab c002      	RJMP _0x2020054
                 _0x2020053:
0009ac 3ae8      	CPI  R30,LOW(0xA8)
0009ad f4b9      	BRNE _0x2020055
                 _0x2020054:
0009ae 91e0 0435 	LDS  R30,_twi_slave_tx_handler_G101
0009b0 91f0 0436 	LDS  R31,_twi_slave_tx_handler_G101+1
0009b2 9730      	SBIW R30,0
0009b3 f059      	BREQ _0x2020056
0009b4 e0a0      	LDI  R26,LOW(0)
                +
0009b5 91e0 0435+LDS R30 , _twi_slave_tx_handler_G101 + ( 0 )
0009b7 91f0 0436+LDS R31 , _twi_slave_tx_handler_G101 + ( 0 ) + 1
0009b9 9509     +ICALL
                 	__CALL1MN _twi_slave_tx_handler_G101,0
0009ba 2f3e      	MOV  R19,R30
0009bb 30e0      	CPI  R30,0
0009bc f011      	BREQ _0x2020058
0009bd e020      	LDI  R18,LOW(0)
0009be c002      	RJMP _0x2020059
                 _0x2020056:
                 _0x2020058:
0009bf e026      	LDI  R18,LOW(6)
0009c0 c03a      	RJMP _0x2020047
                 _0x2020059:
0009c1 e000      	LDI  R16,LOW(0)
0009c2 94e8      	CLT
0009c3 f823      	BLD  R2,3
0009c4 c002      	RJMP _0x202005A
                 _0x2020055:
0009c5 3be8      	CPI  R30,LOW(0xB8)
0009c6 f4e1      	BRNE _0x202005B
                 _0x202005A:
0009c7 fe23      	SBRS R2,3
0009c8 c002      	RJMP _0x202005C
0009c9 e021      	LDI  R18,LOW(1)
0009ca c030      	RJMP _0x2020047
                 _0x202005C:
0009cb 2fe0      	MOV  R30,R16
0009cc 5f0f      	SUBI R16,-1
0009cd 91a0 042c 	LDS  R26,_twi_tx_buffer_G101
0009cf 91b0 042d 	LDS  R27,_twi_tx_buffer_G101+1
0009d1 e0f0      	LDI  R31,0
0009d2 0fae      	ADD  R26,R30
0009d3 1fbf      	ADC  R27,R31
0009d4 91ec      	LD   R30,X
0009d5 b9e3      	OUT  0x3,R30
0009d6 1703      	CP   R16,R19
0009d7 f420      	BRSH _0x202005D
0009d8 b7e6      	IN   R30,0x36
0009d9 70ef      	ANDI R30,LOW(0xF)
0009da 6ce0      	ORI  R30,LOW(0xC0)
0009db c005      	RJMP _0x202006C
                 _0x202005D:
0009dc 9468      	SET
0009dd f823      	BLD  R2,3
0009de b7e6      	IN   R30,0x36
0009df 70ef      	ANDI R30,LOW(0xF)
0009e0 68e0      	ORI  R30,0x80
                 _0x202006C:
0009e1 bfe6      	OUT  0x36,R30
0009e2 c01e      	RJMP _0x2020016
                 _0x202005B:
0009e3 3ce0      	CPI  R30,LOW(0xC0)
0009e4 f011      	BREQ _0x2020060
0009e5 3ce8      	CPI  R30,LOW(0xC8)
0009e6 f489      	BRNE _0x2020061
                 _0x2020060:
0009e7 b7e6      	IN   R30,0x36
0009e8 70ef      	ANDI R30,LOW(0xF)
0009e9 6ce0      	ORI  R30,LOW(0xC0)
0009ea bfe6      	OUT  0x36,R30
0009eb 91e0 0435 	LDS  R30,_twi_slave_tx_handler_G101
0009ed 91f0 0436 	LDS  R31,_twi_slave_tx_handler_G101+1
0009ef 9730      	SBIW R30,0
0009f0 f031      	BREQ _0x2020062
0009f1 e0a1      	LDI  R26,LOW(1)
                +
0009f2 91e0 0435+LDS R30 , _twi_slave_tx_handler_G101 + ( 0 )
0009f4 91f0 0436+LDS R31 , _twi_slave_tx_handler_G101 + ( 0 ) + 1
0009f6 9509     +ICALL
                 	__CALL1MN _twi_slave_tx_handler_G101,0
                 _0x2020062:
0009f7 c007      	RJMP _0x2020035
                 _0x2020061:
0009f8 30e0      	CPI  R30,0
0009f9 f439      	BRNE _0x2020016
0009fa e023      	LDI  R18,LOW(3)
                 _0x2020047:
                 _0x2020069:
0009fb b7e6      	IN   R30,0x36
0009fc 70ef      	ANDI R30,LOW(0xF)
0009fd 6de0      	ORI  R30,LOW(0xD0)
                 _0x202006A:
0009fe bfe6      	OUT  0x36,R30
                 _0x2020035:
0009ff 9468      	SET
000a00 f824      	BLD  R2,4
                 _0x2020016:
000a01 9310 020b 	STS  _twi_rx_index,R17
000a03 9300 020a 	STS  _twi_tx_index,R16
000a05 9320 020c 	STS  _twi_result,R18
000a07 9330 042e 	STS  _bytes_to_tx_G101,R19
000a09 940e 14bf 	CALL __LOADLOCR6
000a0b 9626      	ADIW R28,6
000a0c 91e9      	LD   R30,Y+
000a0d bfef      	OUT  SREG,R30
000a0e 91f9      	LD   R31,Y+
000a0f 91e9      	LD   R30,Y+
000a10 91b9      	LD   R27,Y+
000a11 91a9      	LD   R26,Y+
000a12 9199      	LD   R25,Y+
000a13 9189      	LD   R24,Y+
000a14 9179      	LD   R23,Y+
000a15 9169      	LD   R22,Y+
000a16 90f9      	LD   R15,Y+
000a17 9019      	LD   R1,Y+
000a18 9009      	LD   R0,Y+
000a19 9518      	RETI
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _ks0108_enable_G102:
                 ; .FSTART _ks0108_enable_G102
000a1a 0000      	nop
000a1b 9ada      	SBI  0x1B,2
000a1c 0000      	nop
000a1d 9508      	RET
                 ; .FEND
                 _ks0108_disable_G102:
                 ; .FSTART _ks0108_disable_G102
000a1e 98da      	CBI  0x1B,2
000a1f 9adf      	SBI  0x1B,7
000a20 9ade      	SBI  0x1B,6
000a21 9508      	RET
                 ; .FEND
                 _ks0108_rdbus_G102:
                 ; .FSTART _ks0108_rdbus_G102
000a22 931a      	ST   -Y,R17
000a23 dff6      	RCALL _ks0108_enable_G102
000a24 e010      	LDI  R17,LOW(0)
000a25 99b0      	SBIC 0x16,0
000a26 e011      	LDI  R17,LOW(1)
000a27 99b1      	SBIC 0x16,1
000a28 6012      	ORI  R17,LOW(2)
000a29 9982      	SBIC 0x10,2
000a2a 6014      	ORI  R17,LOW(4)
000a2b 9983      	SBIC 0x10,3
000a2c 6018      	ORI  R17,LOW(8)
000a2d 9984      	SBIC 0x10,4
000a2e 6110      	ORI  R17,LOW(16)
000a2f 9985      	SBIC 0x10,5
000a30 6210      	ORI  R17,LOW(32)
000a31 9986      	SBIC 0x10,6
000a32 6410      	ORI  R17,LOW(64)
000a33 9987      	SBIC 0x10,7
000a34 6810      	ORI  R17,LOW(128)
000a35 98da      	CBI  0x1B,2
000a36 2fe1      	MOV  R30,R17
000a37 9119      	LD   R17,Y+
000a38 9508      	RET
                 ; .FEND
                 _ks0108_busy_G102:
                 ; .FSTART _ks0108_busy_G102
000a39 93aa      	ST   -Y,R26
000a3a 931a      	ST   -Y,R17
000a3b 940e 10fb 	CALL SUBOPT_0xD
000a3d 98dc      	CBI  0x1B,4
000a3e 81a9      	LDD  R26,Y+1
000a3f e0e2      	LDI  R30,LOW(2)
000a40 1bea      	SUB  R30,R26
000a41 2f1e      	MOV  R17,R30
000a42 ff10      	SBRS R17,0
000a43 c002      	RJMP _0x204000B
000a44 9adf      	SBI  0x1B,7
000a45 c001      	RJMP _0x204000C
                 _0x204000B:
000a46 98df      	CBI  0x1B,7
                 _0x204000C:
000a47 ff11      	SBRS R17,1
000a48 c002      	RJMP _0x204000D
000a49 9ade      	SBI  0x1B,6
000a4a c001      	RJMP _0x204000E
                 _0x204000D:
000a4b 98de      	CBI  0x1B,6
                 _0x204000E:
                 _0x204000F:
000a4c dfd5      	RCALL _ks0108_rdbus_G102
000a4d 78e0      	ANDI R30,LOW(0x80)
000a4e f7e9      	BRNE _0x204000F
                 _0x214000C:
000a4f 8118      	LDD  R17,Y+0
000a50 9622      	ADIW R28,2
000a51 9508      	RET
                 ; .FEND
                 _ks0108_wrcmd_G102:
                 ; .FSTART _ks0108_wrcmd_G102
000a52 93aa      	ST   -Y,R26
000a53 81a9      	LDD  R26,Y+1
000a54 dfe4      	RCALL _ks0108_busy_G102
000a55 940e 1105 	CALL SUBOPT_0xE
000a57 f011      	BREQ _0x2040012
000a58 9ac0      	SBI  0x18,0
000a59 c001      	RJMP _0x2040013
                 _0x2040012:
000a5a 98c0      	CBI  0x18,0
                 _0x2040013:
000a5b 81e8      	LD   R30,Y
000a5c 70e2      	ANDI R30,LOW(0x2)
000a5d f011      	BREQ _0x2040014
000a5e 9ac1      	SBI  0x18,1
000a5f c001      	RJMP _0x2040015
                 _0x2040014:
000a60 98c1      	CBI  0x18,1
                 _0x2040015:
000a61 81e8      	LD   R30,Y
000a62 70e4      	ANDI R30,LOW(0x4)
000a63 f011      	BREQ _0x2040016
000a64 9a92      	SBI  0x12,2
000a65 c001      	RJMP _0x2040017
                 _0x2040016:
000a66 9892      	CBI  0x12,2
                 _0x2040017:
000a67 81e8      	LD   R30,Y
000a68 70e8      	ANDI R30,LOW(0x8)
000a69 f011      	BREQ _0x2040018
000a6a 9a93      	SBI  0x12,3
000a6b c001      	RJMP _0x2040019
                 _0x2040018:
000a6c 9893      	CBI  0x12,3
                 _0x2040019:
000a6d 81e8      	LD   R30,Y
000a6e 71e0      	ANDI R30,LOW(0x10)
000a6f f011      	BREQ _0x204001A
000a70 9a94      	SBI  0x12,4
000a71 c001      	RJMP _0x204001B
                 _0x204001A:
000a72 9894      	CBI  0x12,4
                 _0x204001B:
000a73 81e8      	LD   R30,Y
000a74 72e0      	ANDI R30,LOW(0x20)
000a75 f011      	BREQ _0x204001C
000a76 9a95      	SBI  0x12,5
000a77 c001      	RJMP _0x204001D
                 _0x204001C:
000a78 9895      	CBI  0x12,5
                 _0x204001D:
000a79 81e8      	LD   R30,Y
000a7a 74e0      	ANDI R30,LOW(0x40)
000a7b f011      	BREQ _0x204001E
000a7c 9a96      	SBI  0x12,6
000a7d c001      	RJMP _0x204001F
                 _0x204001E:
000a7e 9896      	CBI  0x12,6
                 _0x204001F:
000a7f 81e8      	LD   R30,Y
000a80 78e0      	ANDI R30,LOW(0x80)
000a81 f011      	BREQ _0x2040020
000a82 9a97      	SBI  0x12,7
000a83 c001      	RJMP _0x2040021
                 _0x2040020:
000a84 9897      	CBI  0x12,7
                 _0x2040021:
000a85 df94      	RCALL _ks0108_enable_G102
000a86 df97      	RCALL _ks0108_disable_G102
000a87 940c 1032 	JMP  _0x2140003
                 ; .FEND
                 _ks0108_setloc_G102:
                 ; .FSTART _ks0108_setloc_G102
                +
000a89 91e0 0438+LDS R30 , _ks0108_coord_G102 + ( 1 )
                 	__GETB1MN _ks0108_coord_G102,1
000a8b 93ea      	ST   -Y,R30
000a8c 91e0 0437 	LDS  R30,_ks0108_coord_G102
000a8e 73ef      	ANDI R30,LOW(0x3F)
000a8f 64e0      	ORI  R30,0x40
000a90 2fae      	MOV  R26,R30
000a91 dfc0      	RCALL _ks0108_wrcmd_G102
                +
000a92 91e0 0438+LDS R30 , _ks0108_coord_G102 + ( 1 )
                 	__GETB1MN _ks0108_coord_G102,1
000a94 93ea      	ST   -Y,R30
                +
000a95 91e0 0439+LDS R30 , _ks0108_coord_G102 + ( 2 )
                 	__GETB1MN _ks0108_coord_G102,2
000a97 6be8      	ORI  R30,LOW(0xB8)
000a98 2fae      	MOV  R26,R30
000a99 dfb8      	RCALL _ks0108_wrcmd_G102
000a9a 9508      	RET
                 ; .FEND
                 _ks0108_gotoxp_G102:
                 ; .FSTART _ks0108_gotoxp_G102
000a9b 93aa      	ST   -Y,R26
000a9c 81e9      	LDD  R30,Y+1
000a9d 93e0 0437 	STS  _ks0108_coord_G102,R30
000a9f 95e2      	SWAP R30
000aa0 70ef      	ANDI R30,0xF
000aa1 95e6      	LSR  R30
000aa2 95e6      	LSR  R30
                +
000aa3 93e0 0438+STS _ks0108_coord_G102 + ( 1 ) , R30
                 	__PUTB1MN _ks0108_coord_G102,1
000aa5 81e8      	LD   R30,Y
                +
000aa6 93e0 0439+STS _ks0108_coord_G102 + ( 2 ) , R30
                 	__PUTB1MN _ks0108_coord_G102,2
000aa8 dfe0      	RCALL _ks0108_setloc_G102
000aa9 940c 1032 	JMP  _0x2140003
                 ; .FEND
                 _ks0108_nextx_G102:
                 ; .FSTART _ks0108_nextx_G102
000aab 91a0 0437 	LDS  R26,_ks0108_coord_G102
000aad 5faf      	SUBI R26,-LOW(1)
000aae 93a0 0437 	STS  _ks0108_coord_G102,R26
000ab0 38a0      	CPI  R26,LOW(0x80)
000ab1 f018      	BRLO _0x2040022
000ab2 e0e0      	LDI  R30,LOW(0)
000ab3 93e0 0437 	STS  _ks0108_coord_G102,R30
                 _0x2040022:
000ab5 91e0 0437 	LDS  R30,_ks0108_coord_G102
000ab7 73ef      	ANDI R30,LOW(0x3F)
000ab8 f431      	BRNE _0x2040023
000ab9 91e0 0437 	LDS  R30,_ks0108_coord_G102
000abb 93ea      	ST   -Y,R30
                +
000abc 91a0 0439+LDS R26 , _ks0108_coord_G102 + ( 2 )
                 	__GETB2MN _ks0108_coord_G102,2
000abe dfdc      	RCALL _ks0108_gotoxp_G102
                 _0x2040023:
000abf 9508      	RET
                 ; .FEND
                 _ks0108_wrdata_G102:
                 ; .FSTART _ks0108_wrdata_G102
000ac0 93aa      	ST   -Y,R26
                +
000ac1 91a0 0438+LDS R26 , _ks0108_coord_G102 + ( 1 )
                 	__GETB2MN _ks0108_coord_G102,1
000ac3 df75      	RCALL _ks0108_busy_G102
000ac4 9adc      	SBI  0x1B,4
000ac5 940e 1105 	CALL SUBOPT_0xE
000ac7 f011      	BREQ _0x2040024
000ac8 9ac0      	SBI  0x18,0
000ac9 c001      	RJMP _0x2040025
                 _0x2040024:
000aca 98c0      	CBI  0x18,0
                 _0x2040025:
000acb 81e8      	LD   R30,Y
000acc 70e2      	ANDI R30,LOW(0x2)
000acd f011      	BREQ _0x2040026
000ace 9ac1      	SBI  0x18,1
000acf c001      	RJMP _0x2040027
                 _0x2040026:
000ad0 98c1      	CBI  0x18,1
                 _0x2040027:
000ad1 81e8      	LD   R30,Y
000ad2 70e4      	ANDI R30,LOW(0x4)
000ad3 f011      	BREQ _0x2040028
000ad4 9a92      	SBI  0x12,2
000ad5 c001      	RJMP _0x2040029
                 _0x2040028:
000ad6 9892      	CBI  0x12,2
                 _0x2040029:
000ad7 81e8      	LD   R30,Y
000ad8 70e8      	ANDI R30,LOW(0x8)
000ad9 f011      	BREQ _0x204002A
000ada 9a93      	SBI  0x12,3
000adb c001      	RJMP _0x204002B
                 _0x204002A:
000adc 9893      	CBI  0x12,3
                 _0x204002B:
000add 81e8      	LD   R30,Y
000ade 71e0      	ANDI R30,LOW(0x10)
000adf f011      	BREQ _0x204002C
000ae0 9a94      	SBI  0x12,4
000ae1 c001      	RJMP _0x204002D
                 _0x204002C:
000ae2 9894      	CBI  0x12,4
                 _0x204002D:
000ae3 81e8      	LD   R30,Y
000ae4 72e0      	ANDI R30,LOW(0x20)
000ae5 f011      	BREQ _0x204002E
000ae6 9a95      	SBI  0x12,5
000ae7 c001      	RJMP _0x204002F
                 _0x204002E:
000ae8 9895      	CBI  0x12,5
                 _0x204002F:
000ae9 81e8      	LD   R30,Y
000aea 74e0      	ANDI R30,LOW(0x40)
000aeb f011      	BREQ _0x2040030
000aec 9a96      	SBI  0x12,6
000aed c001      	RJMP _0x2040031
                 _0x2040030:
000aee 9896      	CBI  0x12,6
                 _0x2040031:
000aef 81e8      	LD   R30,Y
000af0 78e0      	ANDI R30,LOW(0x80)
000af1 f011      	BREQ _0x2040032
000af2 9a97      	SBI  0x12,7
000af3 c001      	RJMP _0x2040033
                 _0x2040032:
000af4 9897      	CBI  0x12,7
                 _0x2040033:
000af5 df24      	RCALL _ks0108_enable_G102
000af6 df27      	RCALL _ks0108_disable_G102
                 _0x214000B:
000af7 9621      	ADIW R28,1
000af8 9508      	RET
                 ; .FEND
                 _ks0108_rddata_G102:
                 ; .FSTART _ks0108_rddata_G102
                +
000af9 91a0 0438+LDS R26 , _ks0108_coord_G102 + ( 1 )
                 	__GETB2MN _ks0108_coord_G102,1
000afb df3d      	RCALL _ks0108_busy_G102
000afc 940e 10fb 	CALL SUBOPT_0xD
000afe 9adc      	SBI  0x1B,4
000aff df22      	RCALL _ks0108_rdbus_G102
000b00 9508      	RET
                 ; .FEND
                 _ks0108_rdbyte_G102:
                 ; .FSTART _ks0108_rdbyte_G102
000b01 93aa      	ST   -Y,R26
000b02 81e9      	LDD  R30,Y+1
000b03 93ea      	ST   -Y,R30
000b04 81e9      	LDD  R30,Y+1
000b05 940e 1111 	CALL SUBOPT_0xF
000b07 dff1      	RCALL _ks0108_rddata_G102
000b08 df80      	RCALL _ks0108_setloc_G102
000b09 dfef      	RCALL _ks0108_rddata_G102
000b0a 940c 1032 	JMP  _0x2140003
                 ; .FEND
                 _glcd_init:
                 ; .FSTART _glcd_init
000b0c 93ba      	ST   -Y,R27
000b0d 93aa      	ST   -Y,R26
000b0e 931a      	ST   -Y,R17
000b0f 9ad2      	SBI  0x1A,2
000b10 9ad3      	SBI  0x1A,3
000b11 9ad4      	SBI  0x1A,4
000b12 9ad5      	SBI  0x1A,5
000b13 9add      	SBI  0x1B,5
000b14 9ad7      	SBI  0x1A,7
000b15 9ad6      	SBI  0x1A,6
000b16 df07      	RCALL _ks0108_disable_G102
000b17 98dd      	CBI  0x1B,5
000b18 e6a4      	LDI  R26,LOW(100)
000b19 e0b0      	LDI  R27,0
000b1a 940e 1229 	CALL _delay_ms
000b1c 9add      	SBI  0x1B,5
000b1d e010      	LDI  R17,LOW(0)
                 _0x2040034:
000b1e 3012      	CPI  R17,2
000b1f f440      	BRSH _0x2040036
000b20 931a      	ST   -Y,R17
000b21 e3af      	LDI  R26,LOW(63)
000b22 df2f      	RCALL _ks0108_wrcmd_G102
000b23 931a      	ST   -Y,R17
000b24 9513      	INC  R17
000b25 eca0      	LDI  R26,LOW(192)
000b26 df2b      	RCALL _ks0108_wrcmd_G102
000b27 cff6      	RJMP _0x2040034
                 _0x2040036:
000b28 e0e1      	LDI  R30,LOW(1)
000b29 93e0 020d 	STS  _glcd_state,R30
000b2b e0e0      	LDI  R30,LOW(0)
                +
000b2c 93e0 020e+STS _glcd_state + ( 1 ) , R30
                 	__PUTB1MN _glcd_state,1
000b2e 81e9      	LDD  R30,Y+1
000b2f 81fa      	LDD  R31,Y+1+1
000b30 9730      	SBIW R30,0
000b31 f0a9      	BREQ _0x2040037
000b32 81a9      	LDD  R26,Y+1
000b33 81ba      	LDD  R27,Y+1+1
000b34 940e 1455 	CALL __GETW1P
                +
000b36 93e0 0211+STS _glcd_state + ( 4 ) , R30
000b38 93f0 0212+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
000b3a 9612      	ADIW R26,2
000b3b 940e 1455 	CALL __GETW1P
                +
000b3d 93e0 0226+STS _glcd_state + ( 25 ) , R30
000b3f 93f0 0227+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
000b41 81a9      	LDD  R26,Y+1
000b42 81ba      	LDD  R27,Y+1+1
000b43 9614      	ADIW R26,4
000b44 940e 1455 	CALL __GETW1P
000b46 c00a      	RJMP _0x20400D4
                 _0x2040037:
000b47 e0e0      	LDI  R30,LOW(0)
000b48 e0f0      	LDI  R31,HIGH(0)
                +
000b49 93e0 0211+STS _glcd_state + ( 4 ) , R30
000b4b 93f0 0212+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
                +
000b4d 93e0 0226+STS _glcd_state + ( 25 ) , R30
000b4f 93f0 0227+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
                 _0x20400D4:
                +
000b51 93e0 0228+STS _glcd_state + ( 27 ) , R30
000b53 93f0 0229+STS _glcd_state + ( 27 ) + 1 , R31
                 	__PUTW1MN _glcd_state,27
000b55 e0e1      	LDI  R30,LOW(1)
                +
000b56 93e0 0213+STS _glcd_state + ( 6 ) , R30
                 	__PUTB1MN _glcd_state,6
                +
000b58 93e0 0214+STS _glcd_state + ( 7 ) , R30
                 	__PUTB1MN _glcd_state,7
                +
000b5a 93e0 0215+STS _glcd_state + ( 8 ) , R30
                 	__PUTB1MN _glcd_state,8
000b5c efef      	LDI  R30,LOW(255)
                +
000b5d 93e0 0216+STS _glcd_state + ( 9 ) , R30
                 	__PUTB1MN _glcd_state,9
000b5f e0e1      	LDI  R30,LOW(1)
                +
000b60 93e0 021d+STS _glcd_state + ( 16 ) , R30
                 	__PUTB1MN _glcd_state,16
                +
000b62 e1ee     +LDI R30 , LOW ( _glcd_state + ( 17 ) )
000b63 e0f2     +LDI R31 , HIGH ( _glcd_state + ( 17 ) )
                 	__POINTW1MN _glcd_state,17
000b64 93fa      	ST   -Y,R31
000b65 93ea      	ST   -Y,R30
000b66 efef      	LDI  R30,LOW(255)
000b67 93ea      	ST   -Y,R30
000b68 e0a8      	LDI  R26,LOW(8)
000b69 e0b0      	LDI  R27,0
000b6a 940e 1000 	CALL _memset
000b6c d004      	RCALL _glcd_clear
000b6d e0e1      	LDI  R30,LOW(1)
000b6e 8118      	LDD  R17,Y+0
000b6f 940c 1079 	JMP  _0x2140002
                 ; .FEND
                 _glcd_clear:
                 ; .FSTART _glcd_clear
000b71 940e 14ba 	CALL __SAVELOCR4
000b73 e000      	LDI  R16,0
000b74 e030      	LDI  R19,0
                +
000b75 91e0 020e+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
000b77 30e0      	CPI  R30,0
000b78 f009      	BREQ _0x204003D
000b79 ef0f      	LDI  R16,LOW(255)
                 _0x204003D:
                 _0x204003E:
000b7a 3038      	CPI  R19,8
000b7b f478      	BRSH _0x2040040
000b7c e0e0      	LDI  R30,LOW(0)
000b7d 93ea      	ST   -Y,R30
000b7e 2fa3      	MOV  R26,R19
000b7f 5f3f      	SUBI R19,-1
000b80 df1a      	RCALL _ks0108_gotoxp_G102
000b81 e010      	LDI  R17,LOW(0)
                 _0x2040041:
000b82 2fa1      	MOV  R26,R17
000b83 5f1f      	SUBI R17,-1
000b84 38a0      	CPI  R26,LOW(0x80)
000b85 f420      	BRSH _0x2040043
000b86 2fa0      	MOV  R26,R16
000b87 940e 1117 	CALL SUBOPT_0x10
000b89 cff8      	RJMP _0x2040041
                 _0x2040043:
000b8a cfef      	RJMP _0x204003E
                 _0x2040040:
000b8b e0e0      	LDI  R30,LOW(0)
000b8c 93ea      	ST   -Y,R30
000b8d e0a0      	LDI  R26,LOW(0)
000b8e df0c      	RCALL _ks0108_gotoxp_G102
000b8f e0e0      	LDI  R30,LOW(0)
000b90 93ea      	ST   -Y,R30
000b91 e0a0      	LDI  R26,LOW(0)
000b92 d2ab      	RCALL _glcd_moveto
000b93 940e 14c1 	CALL __LOADLOCR4
000b95 940c 1098 	JMP  _0x2140001
                 ; .FEND
                 _ks0108_wrmasked_G102:
                 ; .FSTART _ks0108_wrmasked_G102
000b97 93aa      	ST   -Y,R26
000b98 931a      	ST   -Y,R17
000b99 81ed      	LDD  R30,Y+5
000b9a 93ea      	ST   -Y,R30
000b9b 81ad      	LDD  R26,Y+5
000b9c df64      	RCALL _ks0108_rdbyte_G102
000b9d 2f1e      	MOV  R17,R30
000b9e deea      	RCALL _ks0108_setloc_G102
000b9f 81e9      	LDD  R30,Y+1
000ba0 30e7      	CPI  R30,LOW(0x7)
000ba1 f011      	BREQ _0x2040053
000ba2 30e8      	CPI  R30,LOW(0x8)
000ba3 f439      	BRNE _0x2040054
                 _0x2040053:
000ba4 81eb      	LDD  R30,Y+3
000ba5 93ea      	ST   -Y,R30
000ba6 81aa      	LDD  R26,Y+2
000ba7 940e 1034 	CALL _glcd_mappixcolor1bit
000ba9 83eb      	STD  Y+3,R30
000baa c008      	RJMP _0x2040055
                 _0x2040054:
000bab 30e3      	CPI  R30,LOW(0x3)
000bac f421      	BRNE _0x2040057
000bad 81eb      	LDD  R30,Y+3
000bae 95e0      	COM  R30
000baf 83eb      	STD  Y+3,R30
000bb0 c002      	RJMP _0x2040058
                 _0x2040057:
000bb1 30e0      	CPI  R30,0
000bb2 f421      	BRNE _0x2040059
                 _0x2040058:
                 _0x2040055:
000bb3 81ea      	LDD  R30,Y+2
000bb4 95e0      	COM  R30
000bb5 231e      	AND  R17,R30
000bb6 c002      	RJMP _0x204005A
                 _0x2040059:
000bb7 30e2      	CPI  R30,LOW(0x2)
000bb8 f429      	BRNE _0x204005B
                 _0x204005A:
000bb9 81ea      	LDD  R30,Y+2
000bba 81ab      	LDD  R26,Y+3
000bbb 23ea      	AND  R30,R26
000bbc 2b1e      	OR   R17,R30
000bbd c00e      	RJMP _0x2040051
                 _0x204005B:
000bbe 30e1      	CPI  R30,LOW(0x1)
000bbf f429      	BRNE _0x204005C
000bc0 81ea      	LDD  R30,Y+2
000bc1 81ab      	LDD  R26,Y+3
000bc2 23ea      	AND  R30,R26
000bc3 271e      	EOR  R17,R30
000bc4 c007      	RJMP _0x2040051
                 _0x204005C:
000bc5 30e4      	CPI  R30,LOW(0x4)
000bc6 f429      	BRNE _0x2040051
000bc7 81ea      	LDD  R30,Y+2
000bc8 95e0      	COM  R30
000bc9 81ab      	LDD  R26,Y+3
000bca 2bea      	OR   R30,R26
000bcb 231e      	AND  R17,R30
                 _0x2040051:
000bcc 2fa1      	MOV  R26,R17
000bcd 940e 1117 	CALL SUBOPT_0x10
000bcf 8118      	LDD  R17,Y+0
                 _0x214000A:
000bd0 9626      	ADIW R28,6
000bd1 9508      	RET
                 ; .FEND
                 _glcd_block:
                 ; .FSTART _glcd_block
000bd2 93aa      	ST   -Y,R26
000bd3 9723      	SBIW R28,3
000bd4 940e 14b8 	CALL __SAVELOCR6
000bd6 89a8      	LDD  R26,Y+16
000bd7 38a0      	CPI  R26,LOW(0x80)
000bd8 f448      	BRSH _0x204005F
000bd9 85af      	LDD  R26,Y+15
000bda 34a0      	CPI  R26,LOW(0x40)
000bdb f430      	BRSH _0x204005F
000bdc 85ae      	LDD  R26,Y+14
000bdd 30a0      	CPI  R26,LOW(0x0)
000bde f019      	BREQ _0x204005F
000bdf 85ad      	LDD  R26,Y+13
000be0 30a0      	CPI  R26,LOW(0x0)
000be1 f409      	BRNE _0x204005E
                 _0x204005F:
000be2 c1c8      	RJMP _0x2140009
                 _0x204005E:
000be3 85ee      	LDD  R30,Y+14
000be4 87e8      	STD  Y+8,R30
000be5 89a8      	LDD  R26,Y+16
000be6 27bb      	CLR  R27
000be7 85ee      	LDD  R30,Y+14
000be8 e0f0      	LDI  R31,0
000be9 0fae      	ADD  R26,R30
000bea 1fbf      	ADC  R27,R31
000beb 38a1      	CPI  R26,LOW(0x81)
000bec e0e0      	LDI  R30,HIGH(0x81)
000bed 07be      	CPC  R27,R30
000bee f020      	BRLO _0x2040061
000bef 89a8      	LDD  R26,Y+16
000bf0 e8e0      	LDI  R30,LOW(128)
000bf1 1bea      	SUB  R30,R26
000bf2 87ee      	STD  Y+14,R30
                 _0x2040061:
000bf3 852d      	LDD  R18,Y+13
000bf4 85af      	LDD  R26,Y+15
000bf5 27bb      	CLR  R27
000bf6 85ed      	LDD  R30,Y+13
000bf7 e0f0      	LDI  R31,0
000bf8 0fae      	ADD  R26,R30
000bf9 1fbf      	ADC  R27,R31
000bfa 34a1      	CPI  R26,LOW(0x41)
000bfb e0e0      	LDI  R30,HIGH(0x41)
000bfc 07be      	CPC  R27,R30
000bfd f020      	BRLO _0x2040062
000bfe 85af      	LDD  R26,Y+15
000bff e4e0      	LDI  R30,LOW(64)
000c00 1bea      	SUB  R30,R26
000c01 87ed      	STD  Y+13,R30
                 _0x2040062:
000c02 85a9      	LDD  R26,Y+9
000c03 30a6      	CPI  R26,LOW(0x6)
000c04 f009      	BREQ PC+2
000c05 c05b      	RJMP _0x2040063
000c06 85ec      	LDD  R30,Y+12
000c07 30e1      	CPI  R30,LOW(0x1)
000c08 f409      	BRNE _0x2040067
000c09 c1a1      	RJMP _0x2140009
                 _0x2040067:
000c0a 30e3      	CPI  R30,LOW(0x3)
000c0b f439      	BRNE _0x204006A
                +
000c0c 91e0 0228+LDS R30 , _glcd_state + ( 27 )
000c0e 91f0 0229+LDS R31 , _glcd_state + ( 27 ) + 1
                 	__GETW1MN _glcd_state,27
000c10 9730      	SBIW R30,0
000c11 f409      	BRNE _0x2040069
000c12 c198      	RJMP _0x2140009
                 _0x2040069:
                 _0x204006A:
000c13 8508      	LDD  R16,Y+8
000c14 85ed      	LDD  R30,Y+13
000c15 95e6      	LSR  R30
000c16 95e6      	LSR  R30
000c17 95e6      	LSR  R30
000c18 2f3e      	MOV  R19,R30
000c19 2fe2      	MOV  R30,R18
000c1a 70e7      	ANDI R30,LOW(0x7)
000c1b f419      	BRNE _0x204006C
000c1c 85ad      	LDD  R26,Y+13
000c1d 172a      	CP   R18,R26
000c1e f0e9      	BREQ _0x204006B
                 _0x204006C:
000c1f 2fa0      	MOV  R26,R16
000c20 27bb      	CLR  R27
000c21 2fe3      	MOV  R30,R19
000c22 e0f0      	LDI  R31,0
000c23 940e 142d 	CALL __MULW12U
000c25 85aa      	LDD  R26,Y+10
000c26 85bb      	LDD  R27,Y+10+1
000c27 940e 111b 	CALL SUBOPT_0x11
000c29 9526      	LSR  R18
000c2a 9526      	LSR  R18
000c2b 9526      	LSR  R18
000c2c 2f53      	MOV  R21,R19
                 _0x204006E:
000c2d 935f      	PUSH R21
000c2e 5f5f      	SUBI R21,-1
000c2f 2fe2      	MOV  R30,R18
000c30 91af      	POP  R26
000c31 17ea      	CP   R30,R26
000c32 f048      	BRLO _0x2040070
000c33 2f10      	MOV  R17,R16
                 _0x2040071:
000c34 2fe1      	MOV  R30,R17
000c35 5011      	SUBI R17,1
000c36 30e0      	CPI  R30,0
000c37 f019      	BREQ _0x2040073
000c38 940e 1120 	CALL SUBOPT_0x12
000c3a cff9      	RJMP _0x2040071
                 _0x2040073:
000c3b cff1      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006B:
000c3c 85ae      	LDD  R26,Y+14
000c3d 170a      	CP   R16,R26
000c3e f111      	BREQ _0x2040074
000c3f 85ee      	LDD  R30,Y+14
000c40 85aa      	LDD  R26,Y+10
000c41 85bb      	LDD  R27,Y+10+1
000c42 e0f0      	LDI  R31,0
000c43 940e 111b 	CALL SUBOPT_0x11
000c45 85ed      	LDD  R30,Y+13
000c46 70e7      	ANDI R30,LOW(0x7)
000c47 f009      	BREQ _0x2040075
000c48 5f3f      	SUBI R19,-LOW(1)
                 _0x2040075:
000c49 e020      	LDI  R18,LOW(0)
                 _0x2040076:
000c4a 932f      	PUSH R18
000c4b 5f2f      	SUBI R18,-1
000c4c 2fe3      	MOV  R30,R19
000c4d 91af      	POP  R26
000c4e 17ae      	CP   R26,R30
000c4f f488      	BRSH _0x2040078
000c50 851e      	LDD  R17,Y+14
                 _0x2040079:
000c51 931f      	PUSH R17
000c52 5f1f      	SUBI R17,-1
000c53 2fe0      	MOV  R30,R16
000c54 91af      	POP  R26
000c55 17ae      	CP   R26,R30
000c56 f418      	BRSH _0x204007B
000c57 940e 1120 	CALL SUBOPT_0x12
000c59 cff7      	RJMP _0x2040079
                 _0x204007B:
000c5a 85ee      	LDD  R30,Y+14
000c5b 81ae      	LDD  R26,Y+6
000c5c 81bf      	LDD  R27,Y+6+1
000c5d e0f0      	LDI  R31,0
000c5e 940e 111b 	CALL SUBOPT_0x11
000c60 cfe9      	RJMP _0x2040076
                 _0x2040078:
                 _0x2040074:
                 _0x2040063:
000c61 85ef      	LDD  R30,Y+15
000c62 70e7      	ANDI R30,LOW(0x7)
000c63 2f3e      	MOV  R19,R30
                 _0x204007C:
000c64 85ed      	LDD  R30,Y+13
000c65 30e0      	CPI  R30,0
000c66 f409      	BRNE PC+2
000c67 c143      	RJMP _0x204007E
000c68 85ea      	LDD  R30,Y+10
000c69 85fb      	LDD  R31,Y+10+1
000c6a 83ee      	STD  Y+6,R30
000c6b 83ff      	STD  Y+6+1,R31
000c6c e010      	LDI  R17,LOW(0)
000c6d 8908      	LDD  R16,Y+16
000c6e 3030      	CPI  R19,0
000c6f f009      	BREQ PC+2
000c70 c065      	RJMP _0x204007F
000c71 85ad      	LDD  R26,Y+13
000c72 30a8      	CPI  R26,LOW(0x8)
000c73 f408      	BRSH PC+2
000c74 c05c      	RJMP _0x2040080
000c75 85e9      	LDD  R30,Y+9
000c76 30e0      	CPI  R30,0
000c77 f011      	BREQ _0x2040085
000c78 30e3      	CPI  R30,LOW(0x3)
000c79 f409      	BRNE _0x2040086
                 _0x2040085:
000c7a c002      	RJMP _0x2040087
                 _0x2040086:
000c7b 30e7      	CPI  R30,LOW(0x7)
000c7c f409      	BRNE _0x2040088
                 _0x2040087:
000c7d c002      	RJMP _0x2040089
                 _0x2040088:
000c7e 30e8      	CPI  R30,LOW(0x8)
000c7f f409      	BRNE _0x204008A
                 _0x2040089:
000c80 c002      	RJMP _0x204008B
                 _0x204008A:
000c81 30e6      	CPI  R30,LOW(0x6)
000c82 f409      	BRNE _0x204008C
                 _0x204008B:
000c83 c002      	RJMP _0x204008D
                 _0x204008C:
000c84 30e9      	CPI  R30,LOW(0x9)
000c85 f409      	BRNE _0x204008E
                 _0x204008D:
000c86 c002      	RJMP _0x204008F
                 _0x204008E:
000c87 30ea      	CPI  R30,LOW(0xA)
000c88 f421      	BRNE _0x2040083
                 _0x204008F:
000c89 930a      	ST   -Y,R16
000c8a 89e8      	LDD  R30,Y+16
000c8b 940e 1111 	CALL SUBOPT_0xF
                 _0x2040083:
                 _0x2040091:
000c8d 931f      	PUSH R17
000c8e 5f1f      	SUBI R17,-1
000c8f 85ee      	LDD  R30,Y+14
000c90 91af      	POP  R26
000c91 17ae      	CP   R26,R30
000c92 f5b8      	BRSH _0x2040093
000c93 85a9      	LDD  R26,Y+9
000c94 30a6      	CPI  R26,LOW(0x6)
000c95 f461      	BRNE _0x2040094
000c96 de62      	RCALL _ks0108_rddata_G102
000c97 ddf1      	RCALL _ks0108_setloc_G102
000c98 940e 112d 	CALL SUBOPT_0x13
000c9a 93fa      	ST   -Y,R31
000c9b 93ea      	ST   -Y,R30
000c9c de5c      	RCALL _ks0108_rddata_G102
000c9d 2fae      	MOV  R26,R30
000c9e 940e 107b 	CALL _glcd_writemem
000ca0 de0a      	RCALL _ks0108_nextx_G102
000ca1 c027      	RJMP _0x2040095
                 _0x2040094:
000ca2 85e9      	LDD  R30,Y+9
000ca3 30e9      	CPI  R30,LOW(0x9)
000ca4 f411      	BRNE _0x2040099
000ca5 e050      	LDI  R21,LOW(0)
000ca6 c00e      	RJMP _0x204009A
                 _0x2040099:
000ca7 30ea      	CPI  R30,LOW(0xA)
000ca8 f411      	BRNE _0x2040098
000ca9 ef5f      	LDI  R21,LOW(255)
000caa c00a      	RJMP _0x204009A
                 _0x2040098:
000cab 940e 112d 	CALL SUBOPT_0x13
000cad 940e 1136 	CALL SUBOPT_0x14
000caf 2f5e      	MOV  R21,R30
000cb0 85e9      	LDD  R30,Y+9
000cb1 30e7      	CPI  R30,LOW(0x7)
000cb2 f011      	BREQ _0x20400A1
000cb3 30e8      	CPI  R30,LOW(0x8)
000cb4 f421      	BRNE _0x20400A2
                 _0x20400A1:
                 _0x204009A:
000cb5 940e 113c 	CALL SUBOPT_0x15
000cb7 2f5e      	MOV  R21,R30
000cb8 c006      	RJMP _0x20400A3
                 _0x20400A2:
000cb9 30e3      	CPI  R30,LOW(0x3)
000cba f411      	BRNE _0x20400A5
000cbb 9550      	COM  R21
000cbc c002      	RJMP _0x20400A6
                 _0x20400A5:
000cbd 30e0      	CPI  R30,0
000cbe f421      	BRNE _0x20400A8
                 _0x20400A6:
                 _0x20400A3:
000cbf 2fa5      	MOV  R26,R21
000cc0 940e 1117 	CALL SUBOPT_0x10
000cc2 c006      	RJMP _0x204009F
                 _0x20400A8:
000cc3 940e 1140 	CALL SUBOPT_0x16
000cc5 efef      	LDI  R30,LOW(255)
000cc6 93ea      	ST   -Y,R30
000cc7 85ad      	LDD  R26,Y+13
000cc8 dece      	RCALL _ks0108_wrmasked_G102
                 _0x204009F:
                 _0x2040095:
000cc9 cfc3      	RJMP _0x2040091
                 _0x2040093:
000cca 85ef      	LDD  R30,Y+15
000ccb 5fe8      	SUBI R30,-LOW(8)
000ccc 87ef      	STD  Y+15,R30
000ccd 85ed      	LDD  R30,Y+13
000cce 50e8      	SUBI R30,LOW(8)
000ccf 87ed      	STD  Y+13,R30
000cd0 c0d1      	RJMP _0x20400A9
                 _0x2040080:
000cd1 855d      	LDD  R21,Y+13
000cd2 e020      	LDI  R18,LOW(0)
000cd3 e0e0      	LDI  R30,LOW(0)
000cd4 87ed      	STD  Y+13,R30
000cd5 c07a      	RJMP _0x20400AA
                 _0x204007F:
000cd6 2fe3      	MOV  R30,R19
000cd7 85ad      	LDD  R26,Y+13
000cd8 0fae      	ADD  R26,R30
000cd9 30a9      	CPI  R26,LOW(0x9)
000cda f420      	BRSH _0x20400AB
000cdb 852d      	LDD  R18,Y+13
000cdc e0e0      	LDI  R30,LOW(0)
000cdd 87ed      	STD  Y+13,R30
000cde c003      	RJMP _0x20400AC
                 _0x20400AB:
000cdf e0e8      	LDI  R30,LOW(8)
000ce0 1be3      	SUB  R30,R19
000ce1 2f2e      	MOV  R18,R30
                 _0x20400AC:
000ce2 933a      	ST   -Y,R19
000ce3 2fa2      	MOV  R26,R18
000ce4 940e 1029 	CALL _glcd_getmask
000ce6 2f4e      	MOV  R20,R30
000ce7 85e9      	LDD  R30,Y+9
000ce8 30e6      	CPI  R30,LOW(0x6)
000ce9 f4f1      	BRNE _0x20400B0
                 _0x20400B1:
000cea 931f      	PUSH R17
000ceb 5f1f      	SUBI R17,-1
000cec 85ee      	LDD  R30,Y+14
000ced 91af      	POP  R26
000cee 17ae      	CP   R26,R30
000cef f4b8      	BRSH _0x20400B3
000cf0 940e 1146 	CALL SUBOPT_0x17
000cf2 2fae      	MOV  R26,R30
000cf3 2fe3      	MOV  R30,R19
000cf4 940e 1411 	CALL __LSRB12
000cf6 940e 114d 	CALL SUBOPT_0x18
000cf8 2fe3      	MOV  R30,R19
000cf9 2fa4      	MOV  R26,R20
000cfa 940e 1411 	CALL __LSRB12
000cfc 95e0      	COM  R30
000cfd 21e1      	AND  R30,R1
000cfe 2b5e      	OR   R21,R30
000cff 940e 112d 	CALL SUBOPT_0x13
000d01 93fa      	ST   -Y,R31
000d02 93ea      	ST   -Y,R30
000d03 2fa5      	MOV  R26,R21
000d04 940e 107b 	CALL _glcd_writemem
000d06 cfe3      	RJMP _0x20400B1
                 _0x20400B3:
000d07 c02c      	RJMP _0x20400AF
                 _0x20400B0:
000d08 30e9      	CPI  R30,LOW(0x9)
000d09 f411      	BRNE _0x20400B4
000d0a e050      	LDI  R21,LOW(0)
000d0b c003      	RJMP _0x20400B5
                 _0x20400B4:
000d0c 30ea      	CPI  R30,LOW(0xA)
000d0d f4a9      	BRNE _0x20400BB
000d0e ef5f      	LDI  R21,LOW(255)
                 _0x20400B5:
000d0f 940e 113c 	CALL SUBOPT_0x15
000d11 2fae      	MOV  R26,R30
000d12 2fe3      	MOV  R30,R19
000d13 940e 1409 	CALL __LSLB12
000d15 2f5e      	MOV  R21,R30
                 _0x20400B8:
000d16 931f      	PUSH R17
000d17 5f1f      	SUBI R17,-1
000d18 85ee      	LDD  R30,Y+14
000d19 91af      	POP  R26
000d1a 17ae      	CP   R26,R30
000d1b f430      	BRSH _0x20400BA
000d1c 940e 1140 	CALL SUBOPT_0x16
000d1e 934a      	ST   -Y,R20
000d1f e0a0      	LDI  R26,LOW(0)
000d20 de76      	RCALL _ks0108_wrmasked_G102
000d21 cff4      	RJMP _0x20400B8
                 _0x20400BA:
000d22 c011      	RJMP _0x20400AF
                 _0x20400BB:
                 _0x20400BC:
000d23 931f      	PUSH R17
000d24 5f1f      	SUBI R17,-1
000d25 85ee      	LDD  R30,Y+14
000d26 91af      	POP  R26
000d27 17ae      	CP   R26,R30
000d28 f458      	BRSH _0x20400BE
000d29 940e 1158 	CALL SUBOPT_0x19
000d2b 2fae      	MOV  R26,R30
000d2c 2fe3      	MOV  R30,R19
000d2d 940e 1409 	CALL __LSLB12
000d2f 93ea      	ST   -Y,R30
000d30 934a      	ST   -Y,R20
000d31 85ad      	LDD  R26,Y+13
000d32 de64      	RCALL _ks0108_wrmasked_G102
000d33 cfef      	RJMP _0x20400BC
                 _0x20400BE:
                 _0x20400AF:
000d34 85ed      	LDD  R30,Y+13
000d35 30e0      	CPI  R30,0
000d36 f409      	BRNE _0x20400BF
000d37 c073      	RJMP _0x204007E
                 _0x20400BF:
000d38 85ad      	LDD  R26,Y+13
000d39 30a8      	CPI  R26,LOW(0x8)
000d3a f428      	BRSH _0x20400C0
000d3b 85ed      	LDD  R30,Y+13
000d3c 1be2      	SUB  R30,R18
000d3d 2f5e      	MOV  R21,R30
000d3e e0e0      	LDI  R30,LOW(0)
000d3f c003      	RJMP _0x20400D5
                 _0x20400C0:
000d40 2f53      	MOV  R21,R19
000d41 85ed      	LDD  R30,Y+13
000d42 50e8      	SUBI R30,LOW(8)
                 _0x20400D5:
000d43 87ed      	STD  Y+13,R30
000d44 e010      	LDI  R17,LOW(0)
000d45 85ef      	LDD  R30,Y+15
000d46 5fe8      	SUBI R30,-LOW(8)
000d47 87ef      	STD  Y+15,R30
000d48 e0e8      	LDI  R30,LOW(8)
000d49 1be3      	SUB  R30,R19
000d4a 2f2e      	MOV  R18,R30
000d4b 8908      	LDD  R16,Y+16
000d4c 85ea      	LDD  R30,Y+10
000d4d 85fb      	LDD  R31,Y+10+1
000d4e 83ee      	STD  Y+6,R30
000d4f 83ff      	STD  Y+6+1,R31
                 _0x20400AA:
000d50 2fe5      	MOV  R30,R21
000d51 e0f0      	LDI  R31,0
000d52 5be2      	SUBI R30,LOW(-__glcd_mask*2)
000d53 4ff9      	SBCI R31,HIGH(-__glcd_mask*2)
000d54 9144      	LPM  R20,Z
000d55 85e9      	LDD  R30,Y+9
000d56 30e6      	CPI  R30,LOW(0x6)
000d57 f4f1      	BRNE _0x20400C5
                 _0x20400C6:
000d58 931f      	PUSH R17
000d59 5f1f      	SUBI R17,-1
000d5a 85ee      	LDD  R30,Y+14
000d5b 91af      	POP  R26
000d5c 17ae      	CP   R26,R30
000d5d f4b8      	BRSH _0x20400C8
000d5e 940e 1146 	CALL SUBOPT_0x17
000d60 2fae      	MOV  R26,R30
000d61 2fe2      	MOV  R30,R18
000d62 940e 1409 	CALL __LSLB12
000d64 940e 114d 	CALL SUBOPT_0x18
000d66 2fe2      	MOV  R30,R18
000d67 2fa4      	MOV  R26,R20
000d68 940e 1409 	CALL __LSLB12
000d6a 95e0      	COM  R30
000d6b 21e1      	AND  R30,R1
000d6c 2b5e      	OR   R21,R30
000d6d 940e 112d 	CALL SUBOPT_0x13
000d6f 93fa      	ST   -Y,R31
000d70 93ea      	ST   -Y,R30
000d71 2fa5      	MOV  R26,R21
000d72 940e 107b 	CALL _glcd_writemem
000d74 cfe3      	RJMP _0x20400C6
                 _0x20400C8:
000d75 c02c      	RJMP _0x20400C4
                 _0x20400C5:
000d76 30e9      	CPI  R30,LOW(0x9)
000d77 f411      	BRNE _0x20400C9
000d78 e050      	LDI  R21,LOW(0)
000d79 c003      	RJMP _0x20400CA
                 _0x20400C9:
000d7a 30ea      	CPI  R30,LOW(0xA)
000d7b f4a9      	BRNE _0x20400D0
000d7c ef5f      	LDI  R21,LOW(255)
                 _0x20400CA:
000d7d 940e 113c 	CALL SUBOPT_0x15
000d7f 2fae      	MOV  R26,R30
000d80 2fe2      	MOV  R30,R18
000d81 940e 1411 	CALL __LSRB12
000d83 2f5e      	MOV  R21,R30
                 _0x20400CD:
000d84 931f      	PUSH R17
000d85 5f1f      	SUBI R17,-1
000d86 85ee      	LDD  R30,Y+14
000d87 91af      	POP  R26
000d88 17ae      	CP   R26,R30
000d89 f430      	BRSH _0x20400CF
000d8a 940e 1140 	CALL SUBOPT_0x16
000d8c 934a      	ST   -Y,R20
000d8d e0a0      	LDI  R26,LOW(0)
000d8e de08      	RCALL _ks0108_wrmasked_G102
000d8f cff4      	RJMP _0x20400CD
                 _0x20400CF:
000d90 c011      	RJMP _0x20400C4
                 _0x20400D0:
                 _0x20400D1:
000d91 931f      	PUSH R17
000d92 5f1f      	SUBI R17,-1
000d93 85ee      	LDD  R30,Y+14
000d94 91af      	POP  R26
000d95 17ae      	CP   R26,R30
000d96 f458      	BRSH _0x20400D3
000d97 940e 1158 	CALL SUBOPT_0x19
000d99 2fae      	MOV  R26,R30
000d9a 2fe2      	MOV  R30,R18
000d9b 940e 1411 	CALL __LSRB12
000d9d 93ea      	ST   -Y,R30
000d9e 934a      	ST   -Y,R20
000d9f 85ad      	LDD  R26,Y+13
000da0 ddf6      	RCALL _ks0108_wrmasked_G102
000da1 cfef      	RJMP _0x20400D1
                 _0x20400D3:
                 _0x20400C4:
                 _0x20400A9:
000da2 85e8      	LDD  R30,Y+8
000da3 85aa      	LDD  R26,Y+10
000da4 85bb      	LDD  R27,Y+10+1
000da5 e0f0      	LDI  R31,0
000da6 0fea      	ADD  R30,R26
000da7 1ffb      	ADC  R31,R27
000da8 87ea      	STD  Y+10,R30
000da9 87fb      	STD  Y+10+1,R31
000daa ceb9      	RJMP _0x204007C
                 _0x204007E:
                 _0x2140009:
000dab 940e 14bf 	CALL __LOADLOCR6
000dad 9661      	ADIW R28,17
000dae 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _glcd_clipx:
                 ; .FSTART _glcd_clipx
000daf 940e 1165 	CALL SUBOPT_0x1A
000db1 f024      	BRLT _0x2060003
000db2 e0e0      	LDI  R30,LOW(0)
000db3 e0f0      	LDI  R31,HIGH(0)
000db4 940c 1032 	JMP  _0x2140003
                 _0x2060003:
000db6 81a8      	LD   R26,Y
000db7 81b9      	LDD  R27,Y+1
000db8 38a0      	CPI  R26,LOW(0x80)
000db9 e0e0      	LDI  R30,HIGH(0x80)
000dba 07be      	CPC  R27,R30
000dbb f024      	BRLT _0x2060004
000dbc e7ef      	LDI  R30,LOW(127)
000dbd e0f0      	LDI  R31,HIGH(127)
000dbe 940c 1032 	JMP  _0x2140003
                 _0x2060004:
000dc0 81e8      	LD   R30,Y
000dc1 81f9      	LDD  R31,Y+1
000dc2 940c 1032 	JMP  _0x2140003
                 ; .FEND
                 _glcd_clipy:
                 ; .FSTART _glcd_clipy
000dc4 940e 1165 	CALL SUBOPT_0x1A
000dc6 f024      	BRLT _0x2060005
000dc7 e0e0      	LDI  R30,LOW(0)
000dc8 e0f0      	LDI  R31,HIGH(0)
000dc9 940c 1032 	JMP  _0x2140003
                 _0x2060005:
000dcb 81a8      	LD   R26,Y
000dcc 81b9      	LDD  R27,Y+1
000dcd 34a0      	CPI  R26,LOW(0x40)
000dce e0e0      	LDI  R30,HIGH(0x40)
000dcf 07be      	CPC  R27,R30
000dd0 f024      	BRLT _0x2060006
000dd1 e3ef      	LDI  R30,LOW(63)
000dd2 e0f0      	LDI  R31,HIGH(63)
000dd3 940c 1032 	JMP  _0x2140003
                 _0x2060006:
000dd5 81e8      	LD   R30,Y
000dd6 81f9      	LDD  R31,Y+1
000dd7 940c 1032 	JMP  _0x2140003
                 ; .FEND
                 _glcd_imagesize:
                 ; .FSTART _glcd_imagesize
000dd9 93aa      	ST   -Y,R26
000dda 931a      	ST   -Y,R17
000ddb 81aa      	LDD  R26,Y+2
000ddc 38a0      	CPI  R26,LOW(0x80)
000ddd f418      	BRSH _0x2060008
000dde 81a9      	LDD  R26,Y+1
000ddf 34a0      	CPI  R26,LOW(0x40)
000de0 f028      	BRLO _0x2060007
                 _0x2060008:
000de1 940e 116c 	CALL SUBOPT_0x1B
000de3 8118      	LDD  R17,Y+0
000de4 940c 1079 	JMP  _0x2140002
                 _0x2060007:
000de6 81e9      	LDD  R30,Y+1
000de7 70e7      	ANDI R30,LOW(0x7)
000de8 2f1e      	MOV  R17,R30
000de9 81e9      	LDD  R30,Y+1
000dea 95e6      	LSR  R30
000deb 95e6      	LSR  R30
000dec 95e6      	LSR  R30
000ded 83e9      	STD  Y+1,R30
000dee 3010      	CPI  R17,0
000def f011      	BREQ _0x206000A
000df0 5fef      	SUBI R30,-LOW(1)
000df1 83e9      	STD  Y+1,R30
                 _0x206000A:
000df2 81aa      	LDD  R26,Y+2
000df3 27bb      	CLR  R27
000df4 2788      	CLR  R24
000df5 2799      	CLR  R25
000df6 81e9      	LDD  R30,Y+1
000df7 27ff      	CLR  R31
000df8 2766      	CLR  R22
000df9 2777      	CLR  R23
000dfa 940e 1435 	CALL __MULD12U
                +
000dfc 5fec     +SUBI R30 , LOW ( - 4 )
000dfd 4fff     +SBCI R31 , HIGH ( - 4 )
000dfe 4f6f     +SBCI R22 , BYTE3 ( - 4 )
000dff 4f7f     +SBCI R23 , BYTE4 ( - 4 )
                 	__ADDD1N 4
000e00 8118      	LDD  R17,Y+0
000e01 940c 1079 	JMP  _0x2140002
                 ; .FEND
                 _glcd_putimagef:
                 ; .FSTART _glcd_putimagef
000e03 93aa      	ST   -Y,R26
000e04 940e 14ba 	CALL __SAVELOCR4
000e06 81ac      	LDD  R26,Y+4
000e07 30a5      	CPI  R26,LOW(0x5)
000e08 f4a0      	BRSH _0x2060038
000e09 81ed      	LDD  R30,Y+5
000e0a 81fe      	LDD  R31,Y+5+1
000e0b 9105      	LPM  R16,Z+
000e0c 940e 1171 	CALL SUBOPT_0x1C
000e0e 9115      	LPM  R17,Z+
000e0f 940e 1171 	CALL SUBOPT_0x1C
000e11 9125      	LPM  R18,Z+
000e12 940e 1171 	CALL SUBOPT_0x1C
000e14 9135      	LPM  R19,Z+
000e15 83ed      	STD  Y+5,R30
000e16 83fe      	STD  Y+5+1,R31
000e17 940e 1174 	CALL SUBOPT_0x1D
000e19 e0e1      	LDI  R30,LOW(1)
000e1a 940e 117b 	CALL SUBOPT_0x1E
000e1c c01d      	RJMP _0x2140007
                 _0x2060038:
000e1d c018      	RJMP _0x2140008
                 ; .FEND
                 _glcd_putimagee:
                 ; .FSTART _glcd_putimagee
000e1e 93aa      	ST   -Y,R26
000e1f 940e 14ba 	CALL __SAVELOCR4
000e21 81ac      	LDD  R26,Y+4
000e22 30a5      	CPI  R26,LOW(0x5)
000e23 f490      	BRSH _0x2060039
000e24 940e 1187 	CALL SUBOPT_0x1F
000e26 2f0e      	MOV  R16,R30
000e27 940e 1187 	CALL SUBOPT_0x1F
000e29 2f1e      	MOV  R17,R30
000e2a 940e 1187 	CALL SUBOPT_0x1F
000e2c 2f2e      	MOV  R18,R30
000e2d 940e 1187 	CALL SUBOPT_0x1F
000e2f 2f3e      	MOV  R19,R30
000e30 940e 1174 	CALL SUBOPT_0x1D
000e32 e0e2      	LDI  R30,LOW(2)
000e33 940e 117b 	CALL SUBOPT_0x1E
000e35 c004      	RJMP _0x2140007
                 _0x2060039:
                 _0x2140008:
                +
000e36 e0e0     +LDI R30 , LOW ( 0x0 )
000e37 e0f0     +LDI R31 , HIGH ( 0x0 )
000e38 e060     +LDI R22 , BYTE3 ( 0x0 )
000e39 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
                 _0x2140007:
000e3a 940e 14c1 	CALL __LOADLOCR4
000e3c 9629      	ADIW R28,9
000e3d 9508      	RET
                 ; .FEND
                 _glcd_moveto:
                 ; .FSTART _glcd_moveto
000e3e 93aa      	ST   -Y,R26
000e3f 81a9      	LDD  R26,Y+1
000e40 27bb      	CLR  R27
000e41 df6d      	RCALL _glcd_clipx
                +
000e42 93e0 020f+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
000e44 81a8      	LD   R26,Y
000e45 27bb      	CLR  R27
000e46 df7d      	RCALL _glcd_clipy
                +
000e47 93e0 0210+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000e49 940c 1032 	JMP  _0x2140003
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
000e4b 940e 1476 	CALL __PUTPARD2
000e4d 817b         ldd  r23,y+3
000e4e 816a         ldd  r22,y+2
000e4f 81f9         ldd  r31,y+1
000e50 81e8         ld   r30,y
000e51 fb77         bst  r23,7
000e52 0f77         lsl  r23
000e53 fd67         sbrc r22,7
000e54 6071         sbr  r23,1
000e55 2f97         mov  r25,r23
000e56 579e         subi r25,0x7e
000e57 f081         breq __ftrunc0
000e58 f078         brcs __ftrunc0
000e59 3198         cpi  r25,24
000e5a f490         brsh __ftrunc1
000e5b 27aa         clr  r26
000e5c 27bb         clr  r27
000e5d 2788         clr  r24
                 __ftrunc2:
000e5e 9408         sec
000e5f 9587         ror  r24
000e60 95b7         ror  r27
000e61 95a7         ror  r26
000e62 959a         dec  r25
000e63 f7d1         brne __ftrunc2
000e64 23ea         and  r30,r26
000e65 23fb         and  r31,r27
000e66 2368         and  r22,r24
000e67 c005         rjmp __ftrunc1
                 __ftrunc0:
000e68 94e8         clt
000e69 2777         clr  r23
000e6a 27ee         clr  r30
000e6b 27ff         clr  r31
000e6c 2766         clr  r22
                 __ftrunc1:
000e6d 776f         cbr  r22,0x80
000e6e 9576         lsr  r23
000e6f f408         brcc __ftrunc3
000e70 6860         sbr  r22,0x80
                 __ftrunc3:
000e71 f977         bld  r23,7
000e72 91a9         ld   r26,y+
000e73 91b9         ld   r27,y+
000e74 9189         ld   r24,y+
000e75 9199         ld   r25,y+
000e76 17ea         cp   r30,r26
000e77 07fb         cpc  r31,r27
000e78 0768         cpc  r22,r24
000e79 0779         cpc  r23,r25
000e7a fb97         bst  r25,7
000e7b 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000e7c 940e 1476 	CALL __PUTPARD2
000e7e 940e 1467 	CALL __GETD2S0
000e80 940e 0e4b 	CALL _ftrunc
000e82 940e 146c 	CALL __PUTD1S0
000e84 f421          brne __floor1
                 __floor0:
000e85 940e 1190 	CALL SUBOPT_0x20
000e87 940c 1098 	JMP  _0x2140001
                 __floor1:
000e89 f7de          brtc __floor0
000e8a 940e 1190 	CALL SUBOPT_0x20
000e8c 940e 1193 	CALL SUBOPT_0x21
000e8e 940c 1098 	JMP  _0x2140001
                 ; .FEND
                 _log:
                 ; .FSTART _log
000e90 940e 1476 	CALL __PUTPARD2
000e92 9724      	SBIW R28,4
000e93 931a      	ST   -Y,R17
000e94 930a      	ST   -Y,R16
000e95 940e 119a 	CALL SUBOPT_0x22
000e97 940e 14ad 	CALL __CPD02
000e99 f02c      	BRLT _0x20A000C
                +
000e9a efef     +LDI R30 , LOW ( 0xFF7FFFFF )
000e9b efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
000e9c e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
000e9d ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
000e9e c073      	RJMP _0x2140006
                 _0x20A000C:
000e9f 940e 119f 	CALL SUBOPT_0x23
000ea1 940e 1471 	CALL __PUTPARD1
000ea3 b7ad      	IN   R26,SPL
000ea4 b7be      	IN   R27,SPH
000ea5 9711      	SBIW R26,1
000ea6 931f      	PUSH R17
000ea7 930f      	PUSH R16
000ea8 940e 1233 	CALL _frexp
000eaa 910f      	POP  R16
000eab 911f      	POP  R17
000eac 940e 11a4 	CALL SUBOPT_0x24
000eae 940e 119a 	CALL SUBOPT_0x22
                +
000eb0 efe3     +LDI R30 , LOW ( 0x3F3504F3 )
000eb1 e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
000eb2 e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
000eb3 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
000eb4 940e 13d9 	CALL __CMPF12
000eb6 f440      	BRSH _0x20A000D
000eb7 940e 11a9 	CALL SUBOPT_0x25
000eb9 940e 12f6 	CALL __ADDF12
000ebb 940e 11a4 	CALL SUBOPT_0x24
                +
000ebd 5001     +SUBI R16 , LOW ( 1 )
000ebe 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x20A000D:
000ebf 940e 119f 	CALL SUBOPT_0x23
000ec1 940e 1193 	CALL SUBOPT_0x21
000ec3 937f      	PUSH R23
000ec4 936f      	PUSH R22
000ec5 93ff      	PUSH R31
000ec6 93ef      	PUSH R30
000ec7 940e 119f 	CALL SUBOPT_0x23
                +
000ec9 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000eca e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000ecb e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000ecc e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000ecd 940e 12f6 	CALL __ADDF12
000ecf 91af      	POP  R26
000ed0 91bf      	POP  R27
000ed1 918f      	POP  R24
000ed2 919f      	POP  R25
000ed3 940e 1394 	CALL __DIVF21
000ed5 940e 11a4 	CALL SUBOPT_0x24
000ed7 940e 11a9 	CALL SUBOPT_0x25
000ed9 940e 11ab 	CALL SUBOPT_0x26
                +
000edb e2a6     +LDI R26 , LOW ( 0x3F654226 )
000edc e4b2     +LDI R27 , HIGH ( 0x3F654226 )
000edd e685     +LDI R24 , BYTE3 ( 0x3F654226 )
000ede e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
000edf 940e 11b3 	CALL SUBOPT_0x27
                +
000ee1 e4ee     +LDI R30 , LOW ( 0x4054114E )
000ee2 e1f1     +LDI R31 , HIGH ( 0x4054114E )
000ee3 e564     +LDI R22 , BYTE3 ( 0x4054114E )
000ee4 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
000ee5 940e 11b8 	CALL SUBOPT_0x28
000ee7 940e 119a 	CALL SUBOPT_0x22
000ee9 940e 1346 	CALL __MULF12
000eeb 937f      	PUSH R23
000eec 936f      	PUSH R22
000eed 93ff      	PUSH R31
000eee 93ef      	PUSH R30
000eef 940e 11bd 	CALL SUBOPT_0x29
                +
000ef1 e4ad     +LDI R26 , LOW ( 0x3FD4114D )
000ef2 e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
000ef3 ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
000ef4 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
000ef5 940e 12ef 	CALL __SUBF12
000ef7 91af      	POP  R26
000ef8 91bf      	POP  R27
000ef9 918f      	POP  R24
000efa 919f      	POP  R25
000efb 940e 1394 	CALL __DIVF21
000efd 937f      	PUSH R23
000efe 936f      	PUSH R22
000eff 93ff      	PUSH R31
000f00 93ef      	PUSH R30
000f01 01f8      	MOVW R30,R16
000f02 940e 1428 	CALL __CWD1
000f04 940e 12bc 	CALL __CDF1
                +
000f06 e1a8     +LDI R26 , LOW ( 0x3F317218 )
000f07 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
000f08 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
000f09 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
000f0a 940e 1346 	CALL __MULF12
000f0c 91af      	POP  R26
000f0d 91bf      	POP  R27
000f0e 918f      	POP  R24
000f0f 919f      	POP  R25
000f10 940e 12f6 	CALL __ADDF12
                 _0x2140006:
000f12 8119      	LDD  R17,Y+1
000f13 8108      	LDD  R16,Y+0
000f14 962a      	ADIW R28,10
000f15 9508      	RET
                 ; .FEND
                 _exp:
                 ; .FSTART _exp
000f16 940e 1476 	CALL __PUTPARD2
000f18 9728      	SBIW R28,8
000f19 931a      	ST   -Y,R17
000f1a 930a      	ST   -Y,R16
000f1b 940e 11c2 	CALL SUBOPT_0x2A
                +
000f1d e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
000f1e eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
000f1f ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
000f20 ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
000f21 940e 13d9 	CALL __CMPF12
000f23 f418      	BRSH _0x20A000F
000f24 940e 116c 	CALL SUBOPT_0x1B
000f26 c083      	RJMP _0x2140005
                 _0x20A000F:
                +
000f27 85ea     +LDD R30 , Y + 10
000f28 85fb     +LDD R31 , Y + 10 + 1
000f29 856c     +LDD R22 , Y + 10 + 2
000f2a 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000f2b 940e 14a5 	CALL __CPD10
000f2d f429      	BRNE _0x20A0010
                +
000f2e e0e0     +LDI R30 , LOW ( 0x3F800000 )
000f2f e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000f30 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000f31 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000f32 c077      	RJMP _0x2140005
                 _0x20A0010:
000f33 940e 11c2 	CALL SUBOPT_0x2A
                +
000f35 e1e8     +LDI R30 , LOW ( 0x42B17218 )
000f36 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
000f37 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
000f38 e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
000f39 940e 13d9 	CALL __CMPF12
000f3b f009      	BREQ PC+2
000f3c f408      	BRCC PC+2
000f3d c005      	RJMP _0x20A0011
                +
000f3e efef     +LDI R30 , LOW ( 0x7F7FFFFF )
000f3f efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
000f40 e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
000f41 e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
000f42 c067      	RJMP _0x2140005
                 _0x20A0011:
000f43 940e 11c2 	CALL SUBOPT_0x2A
                +
000f45 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
000f46 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
000f47 eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
000f48 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
000f49 940e 1346 	CALL __MULF12
                +
000f4b 87ea     +STD Y + 10 , R30
000f4c 87fb     +STD Y + 10 + 1 , R31
000f4d 876c     +STD Y + 10 + 2 , R22
000f4e 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000f4f 940e 11c2 	CALL SUBOPT_0x2A
000f51 df2a      	RCALL _floor
000f52 940e 1285 	CALL __CFD1
000f54 018f      	MOVW R16,R30
000f55 940e 11c2 	CALL SUBOPT_0x2A
000f57 940e 1428 	CALL __CWD1
000f59 940e 12bc 	CALL __CDF1
000f5b 940e 11b8 	CALL SUBOPT_0x28
000f5d 01df      	MOVW R26,R30
000f5e 01cb      	MOVW R24,R22
                +
000f5f e0e0     +LDI R30 , LOW ( 0x3F000000 )
000f60 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
000f61 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000f62 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000f63 940e 11b8 	CALL SUBOPT_0x28
000f65 940e 11a4 	CALL SUBOPT_0x24
000f67 940e 11a9 	CALL SUBOPT_0x25
000f69 940e 11ab 	CALL SUBOPT_0x26
                +
000f6b e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
000f6c e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
000f6d e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
000f6e e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
000f6f 940e 1346 	CALL __MULF12
                +
000f71 eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
000f72 eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
000f73 ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
000f74 e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
000f75 940e 12f6 	CALL __ADDF12
000f77 940e 119a 	CALL SUBOPT_0x22
000f79 940e 1346 	CALL __MULF12
000f7b 940e 11a4 	CALL SUBOPT_0x24
000f7d 940e 11bd 	CALL SUBOPT_0x29
                +
000f7f e2a8     +LDI R26 , LOW ( 0x41A68D28 )
000f80 e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
000f81 ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
000f82 e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
000f83 940e 12f6 	CALL __ADDF12
000f85 940e 10b9 	CALL SUBOPT_0x4
000f87 940e 119f 	CALL SUBOPT_0x23
                +
000f89 81aa     +LDD R26 , Y + 2
000f8a 81bb     +LDD R27 , Y + 2 + 1
000f8b 818c     +LDD R24 , Y + 2 + 2
000f8c 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000f8d 940e 12f6 	CALL __ADDF12
                +
000f8f efa3     +LDI R26 , LOW ( 0x3FB504F3 )
000f90 e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
000f91 eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
000f92 e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
000f93 940e 1346 	CALL __MULF12
000f95 937f      	PUSH R23
000f96 936f      	PUSH R22
000f97 93ff      	PUSH R31
000f98 93ef      	PUSH R30
000f99 940e 119a 	CALL SUBOPT_0x22
000f9b 940e 11bd 	CALL SUBOPT_0x29
000f9d 940e 12ef 	CALL __SUBF12
000f9f 91af      	POP  R26
000fa0 91bf      	POP  R27
000fa1 918f      	POP  R24
000fa2 919f      	POP  R25
000fa3 940e 1394 	CALL __DIVF21
000fa5 940e 1471 	CALL __PUTPARD1
000fa7 01d8      	MOVW R26,R16
000fa8 940e 1244 	CALL _ldexp
                 _0x2140005:
000faa 8119      	LDD  R17,Y+1
000fab 8108      	LDD  R16,Y+0
000fac 962e      	ADIW R28,14
000fad 9508      	RET
                 ; .FEND
                 _pow:
                 ; .FSTART _pow
000fae 940e 1476 	CALL __PUTPARD2
000fb0 9724      	SBIW R28,4
000fb1 940e 11c7 	CALL SUBOPT_0x2B
000fb3 940e 14a5 	CALL __CPD10
000fb5 f419      	BRNE _0x20A0012
000fb6 940e 116c 	CALL SUBOPT_0x1B
000fb8 c045      	RJMP _0x2140004
                 _0x20A0012:
                +
000fb9 85a8     +LDD R26 , Y + 8
000fba 85b9     +LDD R27 , Y + 8 + 1
000fbb 858a     +LDD R24 , Y + 8 + 2
000fbc 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
000fbd 940e 14ad 	CALL __CPD02
000fbf f494      	BRGE _0x20A0013
000fc0 940e 11cc 	CALL SUBOPT_0x2C
000fc2 940e 14a5 	CALL __CPD10
000fc4 f429      	BRNE _0x20A0014
                +
000fc5 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000fc6 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000fc7 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000fc8 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000fc9 c034      	RJMP _0x2140004
                 _0x20A0014:
                +
000fca 85a8     +LDD R26 , Y + 8
000fcb 85b9     +LDD R27 , Y + 8 + 1
000fcc 858a     +LDD R24 , Y + 8 + 2
000fcd 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
000fce 940e 11d1 	CALL SUBOPT_0x2D
000fd0 df45      	RCALL _exp
000fd1 c02c      	RJMP _0x2140004
                 _0x20A0013:
000fd2 940e 11cc 	CALL SUBOPT_0x2C
000fd4 01de      	MOVW R26,R28
000fd5 940e 1285 	CALL __CFD1
000fd7 940e 1459 	CALL __PUTDP1
000fd9 940e 1190 	CALL SUBOPT_0x20
000fdb 940e 12bc 	CALL __CDF1
000fdd 01df      	MOVW R26,R30
000fde 01cb      	MOVW R24,R22
000fdf 940e 11cc 	CALL SUBOPT_0x2C
000fe1 940e 14b3 	CALL __CPD12
000fe3 f019      	BREQ _0x20A0015
000fe4 940e 116c 	CALL SUBOPT_0x1B
000fe6 c017      	RJMP _0x2140004
                 _0x20A0015:
000fe7 940e 11c7 	CALL SUBOPT_0x2B
000fe9 940e 1250 	CALL __ANEGF1
000feb 01df      	MOVW R26,R30
000fec 01cb      	MOVW R24,R22
000fed 940e 11d1 	CALL SUBOPT_0x2D
000fef df26      	RCALL _exp
                +
000ff0 87e8     +STD Y + 8 , R30
000ff1 87f9     +STD Y + 8 + 1 , R31
000ff2 876a     +STD Y + 8 + 2 , R22
000ff3 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
000ff4 81e8      	LD   R30,Y
000ff5 70e1      	ANDI R30,LOW(0x1)
000ff6 f419      	BRNE _0x20A0016
000ff7 940e 11c7 	CALL SUBOPT_0x2B
000ff9 c004      	RJMP _0x2140004
                 _0x20A0016:
000ffa 940e 11c7 	CALL SUBOPT_0x2B
000ffc 940e 1250 	CALL __ANEGF1
                 _0x2140004:
000ffe 962c      	ADIW R28,12
000fff 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
001000 93ba      	ST   -Y,R27
001001 93aa      	ST   -Y,R26
001002 81b9          ldd  r27,y+1
001003 81a8          ld   r26,y
001004 9610          adiw r26,0
001005 f031          breq memset1
001006 81fc          ldd  r31,y+4
001007 81eb          ldd  r30,y+3
001008 816a          ldd  r22,y+2
                 memset0:
001009 9361          st   z+,r22
00100a 9711          sbiw r26,1
00100b f7e9          brne memset0
                 memset1:
00100c 81eb          ldd  r30,y+3
00100d 81fc          ldd  r31,y+4
00100e 9625      	ADIW R28,5
00100f 9508      	RET
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
001010 93ba      	ST   -Y,R27
001011 93aa      	ST   -Y,R26
001012 91a9          ld   r26,y+
001013 91b9          ld   r27,y+
001014 27ee          clr  r30
001015 27ff          clr  r31
                 strlen0:
001016 916d          ld   r22,x+
001017 2366          tst  r22
001018 f011          breq strlen1
001019 9631          adiw r30,1
00101a cffb          rjmp strlen0
                 strlen1:
00101b 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00101c 93ba      	ST   -Y,R27
00101d 93aa      	ST   -Y,R26
00101e 27aa          clr  r26
00101f 27bb          clr  r27
001020 91e9          ld   r30,y+
001021 91f9          ld   r31,y+
                 strlenf0:
001022 9005      	lpm  r0,z+
001023 2000          tst  r0
001024 f011          breq strlenf1
001025 9611          adiw r26,1
001026 cffb          rjmp strlenf0
                 strlenf1:
001027 01fd          movw r30,r26
001028 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _glcd_getmask:
                 ; .FSTART _glcd_getmask
001029 93aa      	ST   -Y,R26
00102a 81e8      	LD   R30,Y
00102b e0f0      	LDI  R31,0
00102c 5be2      	SUBI R30,LOW(-__glcd_mask*2)
00102d 4ff9      	SBCI R31,HIGH(-__glcd_mask*2)
00102e 91a4      	LPM  R26,Z
00102f 81e9      	LDD  R30,Y+1
001030 940e 1409 	CALL __LSLB12
                 _0x2140003:
001032 9622      	ADIW R28,2
001033 9508      	RET
                 ; .FEND
                 _glcd_mappixcolor1bit:
                 ; .FSTART _glcd_mappixcolor1bit
001034 93aa      	ST   -Y,R26
001035 931a      	ST   -Y,R17
001036 81e9      	LDD  R30,Y+1
001037 30e7      	CPI  R30,LOW(0x7)
001038 f011      	BREQ _0x2120007
001039 30ea      	CPI  R30,LOW(0xA)
00103a f419      	BRNE _0x2120008
                 _0x2120007:
00103b 9110 020d 	LDS  R17,_glcd_state
00103d c009      	RJMP _0x2120009
                 _0x2120008:
00103e 30e9      	CPI  R30,LOW(0x9)
00103f f419      	BRNE _0x212000B
                +
001040 9110 020e+LDS R17 , _glcd_state + ( 1 )
                 	__GETBRMN 17,_glcd_state,1
001042 c004      	RJMP _0x2120009
                 _0x212000B:
001043 30e8      	CPI  R30,LOW(0x8)
001044 f4a1      	BRNE _0x2120005
                +
001045 9110 021d+LDS R17 , _glcd_state + ( 16 )
                 	__GETBRMN 17,_glcd_state,16
                 _0x2120009:
                +
001047 91e0 020e+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
001049 30e0      	CPI  R30,0
00104a f049      	BREQ _0x212000E
00104b 3010      	CPI  R17,0
00104c f019      	BREQ _0x212000F
00104d efef      	LDI  R30,LOW(255)
00104e 8118      	LDD  R17,Y+0
00104f c029      	RJMP _0x2140002
                 _0x212000F:
001050 81ea      	LDD  R30,Y+2
001051 95e0      	COM  R30
001052 8118      	LDD  R17,Y+0
001053 c025      	RJMP _0x2140002
                 _0x212000E:
001054 3010      	CPI  R17,0
001055 f419      	BRNE _0x2120011
001056 e0e0      	LDI  R30,LOW(0)
001057 8118      	LDD  R17,Y+0
001058 c020      	RJMP _0x2140002
                 _0x2120011:
                 _0x2120005:
001059 81ea      	LDD  R30,Y+2
00105a 8118      	LDD  R17,Y+0
00105b c01d      	RJMP _0x2140002
                 ; .FEND
                 _glcd_readmem:
                 ; .FSTART _glcd_readmem
00105c 93ba      	ST   -Y,R27
00105d 93aa      	ST   -Y,R26
00105e 81ea      	LDD  R30,Y+2
00105f 30e1      	CPI  R30,LOW(0x1)
001060 f421      	BRNE _0x2120015
001061 81e8      	LD   R30,Y
001062 81f9      	LDD  R31,Y+1
001063 91e4      	LPM  R30,Z
001064 c014      	RJMP _0x2140002
                 _0x2120015:
001065 30e2      	CPI  R30,LOW(0x2)
001066 f429      	BRNE _0x2120016
001067 81a8      	LD   R26,Y
001068 81b9      	LDD  R27,Y+1
001069 940e 1488 	CALL __EEPROMRDB
00106b c00d      	RJMP _0x2140002
                 _0x2120016:
00106c 30e3      	CPI  R30,LOW(0x3)
00106d f441      	BRNE _0x2120018
00106e 81a8      	LD   R26,Y
00106f 81b9      	LDD  R27,Y+1
                +
001070 91e0 0226+LDS R30 , _glcd_state + ( 25 )
001072 91f0 0227+LDS R31 , _glcd_state + ( 25 ) + 1
001074 9509     +ICALL
                 	__CALL1MN _glcd_state,25
001075 c003      	RJMP _0x2140002
                 _0x2120018:
001076 81a8      	LD   R26,Y
001077 81b9      	LDD  R27,Y+1
001078 91ec      	LD   R30,X
                 _0x2140002:
001079 9623      	ADIW R28,3
00107a 9508      	RET
                 ; .FEND
                 _glcd_writemem:
                 ; .FSTART _glcd_writemem
00107b 93aa      	ST   -Y,R26
00107c 81eb      	LDD  R30,Y+3
00107d 30e0      	CPI  R30,0
00107e f429      	BRNE _0x212001C
00107f 81e8      	LD   R30,Y
001080 81a9      	LDD  R26,Y+1
001081 81ba      	LDD  R27,Y+1+1
001082 93ec      	ST   X,R30
001083 c014      	RJMP _0x212001B
                 _0x212001C:
001084 30e2      	CPI  R30,LOW(0x2)
001085 f431      	BRNE _0x212001D
001086 81e8      	LD   R30,Y
001087 81a9      	LDD  R26,Y+1
001088 81ba      	LDD  R27,Y+1+1
001089 940e 1494 	CALL __EEPROMWRB
00108b c00c      	RJMP _0x212001B
                 _0x212001D:
00108c 30e3      	CPI  R30,LOW(0x3)
00108d f451      	BRNE _0x212001B
00108e 81e9      	LDD  R30,Y+1
00108f 81fa      	LDD  R31,Y+1+1
001090 93fa      	ST   -Y,R31
001091 93ea      	ST   -Y,R30
001092 81aa      	LDD  R26,Y+2
                +
001093 91e0 0228+LDS R30 , _glcd_state + ( 27 )
001095 91f0 0229+LDS R31 , _glcd_state + ( 27 ) + 1
001097 9509     +ICALL
                 	__CALL1MN _glcd_state,27
                 _0x212001B:
                 _0x2140001:
001098 9624      	ADIW R28,4
001099 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _adc_data:
000203           	.BYTE 0x2
                 _data_spi:
000205           	.BYTE 0x4
                 _num_data_spi:
000209           	.BYTE 0x1
                 _twi_tx_index:
00020a           	.BYTE 0x1
                 _twi_rx_index:
00020b           	.BYTE 0x1
                 _twi_result:
00020c           	.BYTE 0x1
                 _glcd_state:
00020d           	.BYTE 0x1D
                 
                 	.ESEG
                 _data_rec:
000000           	.BYTE 0x200
                 
                 	.DSEG
                 _input_index_S0010000000:
00022a           	.BYTE 0x1
                 _rx_buffer:
00022b           	.BYTE 0x100
                 _tx_buffer:
00032b           	.BYTE 0x100
                 _slave_address_G101:
00042b           	.BYTE 0x1
                 _twi_tx_buffer_G101:
00042c           	.BYTE 0x2
                 _bytes_to_tx_G101:
00042e           	.BYTE 0x1
                 _twi_rx_buffer_G101:
00042f           	.BYTE 0x2
                 _bytes_to_rx_G101:
000431           	.BYTE 0x1
                 _twi_rx_buffer_size_G101:
000432           	.BYTE 0x1
                 _twi_slave_rx_handler_G101:
000433           	.BYTE 0x2
                 _twi_slave_tx_handler_G101:
000435           	.BYTE 0x2
                 _ks0108_coord_G102:
000437           	.BYTE 0x3
                 __seed_G106:
00043a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00109a e0a5      	LDI  R26,LOW(5)
00109b e0b0      	LDI  R27,0
00109c 940e 1229 	CALL _delay_ms
                +
00109e e000     +LDI R16 , LOW ( 0 )
00109f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0010a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
0010a1 01fe      	MOVW R30,R28
0010a2 93fa      	ST   -Y,R31
0010a3 93ea      	ST   -Y,R30
                +
0010a4 efe1     +LDI R30 , LOW ( 2 * _0x0 + ( 141 ) )
0010a5 e0f6     +LDI R31 , HIGH ( 2 * _0x0 + ( 141 ) )
                 	__POINTW1FN _0x0,141
0010a6 93fa      	ST   -Y,R31
0010a7 93ea      	ST   -Y,R30
0010a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x2:
0010a9 940e 1428 	CALL __CWD1
0010ab 940e 1471 	CALL __PUTPARD1
0010ad e084      	LDI  R24,4
0010ae 940e 0881 	CALL _sprintf
0010b0 9628      	ADIW R28,8
0010b1 01de      	MOVW R26,R28
0010b2 940c 06f8 	JMP  _puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0010b4 81e9      	LDD  R30,Y+1
0010b5 b9e3      	OUT  0x3,R30
0010b6 e8e4      	LDI  R30,LOW(132)
0010b7 bfe6      	OUT  0x36,R30
0010b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
                +
0010b9 83ea     +STD Y + 2 , R30
0010ba 83fb     +STD Y + 2 + 1 , R31
0010bb 836c     +STD Y + 2 + 2 , R22
0010bc 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0010bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0010be 93fa      	ST   -Y,R31
0010bf 93ea      	ST   -Y,R30
0010c0 e0a0      	LDI  R26,LOW(512)
0010c1 e0b2      	LDI  R27,HIGH(512)
0010c2 940e 0636 	CALL _eeprom_read_frame
0010c4 e0e4      	LDI  R30,LOW(4)
0010c5 93ea      	ST   -Y,R30
0010c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0010c7 93ea      	ST   -Y,R30
0010c8 e0e0      	LDI  R30,LOW(_data_rec)
0010c9 e0f0      	LDI  R31,HIGH(_data_rec)
0010ca 93fa      	ST   -Y,R31
0010cb 93ea      	ST   -Y,R30
0010cc e0a0      	LDI  R26,LOW(0)
0010cd 940c 0e1e 	JMP  _glcd_putimagee
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7:
0010cf 932a      	ST   -Y,R18
0010d0 85ad      	LDD  R26,Y+13
0010d1 85be      	LDD  R27,Y+13+1
0010d2 85ef      	LDD  R30,Y+15
0010d3 89f8      	LDD  R31,Y+15+1
0010d4 9509      	ICALL
0010d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
0010d6 89e8      	LDD  R30,Y+16
0010d7 89f9      	LDD  R31,Y+16+1
0010d8 9734      	SBIW R30,4
0010d9 8be8      	STD  Y+16,R30
0010da 8bf9      	STD  Y+16+1,R31
0010db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
0010dc 85ad      	LDD  R26,Y+13
0010dd 85be      	LDD  R27,Y+13+1
0010de 85ef      	LDD  R30,Y+15
0010df 89f8      	LDD  R31,Y+15+1
0010e0 9509      	ICALL
0010e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
0010e2 89a8      	LDD  R26,Y+16
0010e3 89b9      	LDD  R27,Y+16+1
0010e4 9614      	ADIW R26,4
0010e5 940e 1455 	CALL __GETW1P
0010e7 83ee      	STD  Y+6,R30
0010e8 83ff      	STD  Y+6+1,R31
0010e9 81ae      	LDD  R26,Y+6
0010ea 81bf      	LDD  R27,Y+6+1
0010eb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
0010ec 89a8      	LDD  R26,Y+16
0010ed 89b9      	LDD  R27,Y+16+1
0010ee 9614      	ADIW R26,4
0010ef 940e 1455 	CALL __GETW1P
0010f1 87ea      	STD  Y+10,R30
0010f2 87fb      	STD  Y+10+1,R31
0010f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
0010f4 01de      	MOVW R26,R28
0010f5 961c      	ADIW R26,12
0010f6 940e 13f9 	CALL __ADDW2R15
0010f8 940e 1455 	CALL __GETW1P
0010fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
0010fb 98b8      	CBI  0x17,0
0010fc 98b9      	CBI  0x17,1
0010fd 988a      	CBI  0x11,2
0010fe 988b      	CBI  0x11,3
0010ff 988c      	CBI  0x11,4
001100 988d      	CBI  0x11,5
001101 988e      	CBI  0x11,6
001102 988f      	CBI  0x11,7
001103 9adb      	SBI  0x1B,3
001104 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xE:
001105 98db      	CBI  0x1B,3
001106 9ab8      	SBI  0x17,0
001107 9ab9      	SBI  0x17,1
001108 9a8a      	SBI  0x11,2
001109 9a8b      	SBI  0x11,3
00110a 9a8c      	SBI  0x11,4
00110b 9a8d      	SBI  0x11,5
00110c 9a8e      	SBI  0x11,6
00110d 9a8f      	SBI  0x11,7
00110e 81e8      	LD   R30,Y
00110f 70e1      	ANDI R30,LOW(0x1)
001110 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
001111 95e6      	LSR  R30
001112 95e6      	LSR  R30
001113 95e6      	LSR  R30
001114 2fae      	MOV  R26,R30
001115 940c 0a9b 	JMP  _ks0108_gotoxp_G102
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
001117 940e 0ac0 	CALL _ks0108_wrdata_G102
001119 940c 0aab 	JMP  _ks0108_nextx_G102
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
00111b 0fea      	ADD  R30,R26
00111c 1ffb      	ADC  R31,R27
00111d 83ee      	STD  Y+6,R30
00111e 83ff      	STD  Y+6+1,R31
00111f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x12:
001120 85ec      	LDD  R30,Y+12
001121 93ea      	ST   -Y,R30
001122 81ef      	LDD  R30,Y+7
001123 85f8      	LDD  R31,Y+7+1
001124 9631      	ADIW R30,1
001125 83ef      	STD  Y+7,R30
001126 87f8      	STD  Y+7+1,R31
001127 9731      	SBIW R30,1
001128 93fa      	ST   -Y,R31
001129 93ea      	ST   -Y,R30
00112a e0a0      	LDI  R26,LOW(0)
00112b 940c 107b 	JMP  _glcd_writemem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x13:
00112d 85ec      	LDD  R30,Y+12
00112e 93ea      	ST   -Y,R30
00112f 81ef      	LDD  R30,Y+7
001130 85f8      	LDD  R31,Y+7+1
001131 9631      	ADIW R30,1
001132 83ef      	STD  Y+7,R30
001133 87f8      	STD  Y+7+1,R31
001134 9731      	SBIW R30,1
001135 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x14:
001136 2766      	CLR  R22
001137 2777      	CLR  R23
001138 01df      	MOVW R26,R30
001139 01cb      	MOVW R24,R22
00113a 940c 105c 	JMP  _glcd_readmem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
00113c 935a      	ST   -Y,R21
00113d 85aa      	LDD  R26,Y+10
00113e 940c 1034 	JMP  _glcd_mappixcolor1bit
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
001140 930a      	ST   -Y,R16
001141 9503      	INC  R16
001142 89e8      	LDD  R30,Y+16
001143 93ea      	ST   -Y,R30
001144 935a      	ST   -Y,R21
001145 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
001146 930a      	ST   -Y,R16
001147 9503      	INC  R16
001148 89a8      	LDD  R26,Y+16
001149 940e 0b01 	CALL _ks0108_rdbyte_G102
00114b 23e4      	AND  R30,R20
00114c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x18:
00114d 2f5e      	MOV  R21,R30
00114e 85ec      	LDD  R30,Y+12
00114f 93ea      	ST   -Y,R30
001150 81af      	LDD  R26,Y+7
001151 85b8      	LDD  R27,Y+7+1
001152 2788      	CLR  R24
001153 2799      	CLR  R25
001154 940e 105c 	CALL _glcd_readmem
001156 2e1e      	MOV  R1,R30
001157 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x19:
001158 930a      	ST   -Y,R16
001159 9503      	INC  R16
00115a 89e8      	LDD  R30,Y+16
00115b 93ea      	ST   -Y,R30
00115c 85ee      	LDD  R30,Y+14
00115d 93ea      	ST   -Y,R30
00115e 85e9      	LDD  R30,Y+9
00115f 85fa      	LDD  R31,Y+9+1
001160 9631      	ADIW R30,1
001161 87e9      	STD  Y+9,R30
001162 87fa      	STD  Y+9+1,R31
001163 9731      	SBIW R30,1
001164 cfd1      	RJMP SUBOPT_0x14
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
001165 93ba      	ST   -Y,R27
001166 93aa      	ST   -Y,R26
001167 81a8      	LD   R26,Y
001168 81b9      	LDD  R27,Y+1
001169 940e 14a9 	CALL __CPW02
00116b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1B:
                +
00116c e0e0     +LDI R30 , LOW ( 0x0 )
00116d e0f0     +LDI R31 , HIGH ( 0x0 )
00116e e060     +LDI R22 , BYTE3 ( 0x0 )
00116f e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
001170 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
001171 83ed      	STD  Y+5,R30
001172 83fe      	STD  Y+5+1,R31
001173 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
001174 85e8      	LDD  R30,Y+8
001175 93ea      	ST   -Y,R30
001176 85e8      	LDD  R30,Y+8
001177 93ea      	ST   -Y,R30
001178 930a      	ST   -Y,R16
001179 932a      	ST   -Y,R18
00117a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1E:
00117b 93ea      	ST   -Y,R30
00117c 85ea      	LDD  R30,Y+10
00117d 85fb      	LDD  R31,Y+10+1
00117e 93fa      	ST   -Y,R31
00117f 93ea      	ST   -Y,R30
001180 85ab      	LDD  R26,Y+11
001181 940e 0bd2 	CALL _glcd_block
001183 930a      	ST   -Y,R16
001184 2fa2      	MOV  R26,R18
001185 940c 0dd9 	JMP  _glcd_imagesize
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1F:
001187 81ad      	LDD  R26,Y+5
001188 81be      	LDD  R27,Y+5+1
001189 9611      	ADIW R26,1
00118a 83ad      	STD  Y+5,R26
00118b 83be      	STD  Y+5+1,R27
00118c 9711      	SBIW R26,1
00118d 940e 1488 	CALL __EEPROMRDB
00118f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
001190 940e 1462 	CALL __GETD1S0
001192 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
                +
001193 e0a0     +LDI R26 , LOW ( 0x3F800000 )
001194 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
001195 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
001196 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
001197 940e 12ef 	CALL __SUBF12
001199 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x22:
                +
00119a 81ae     +LDD R26 , Y + 6
00119b 81bf     +LDD R27 , Y + 6 + 1
00119c 8588     +LDD R24 , Y + 6 + 2
00119d 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
00119e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x23:
                +
00119f 81ee     +LDD R30 , Y + 6
0011a0 81ff     +LDD R31 , Y + 6 + 1
0011a1 8568     +LDD R22 , Y + 6 + 2
0011a2 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
0011a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x24:
                +
0011a4 83ee     +STD Y + 6 , R30
0011a5 83ff     +STD Y + 6 + 1 , R31
0011a6 8768     +STD Y + 6 + 2 , R22
0011a7 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
0011a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
0011a9 dff5      	RCALL SUBOPT_0x23
0011aa cfef      	RJMP SUBOPT_0x22
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
0011ab 940e 1346 	CALL __MULF12
0011ad df0b      	RCALL SUBOPT_0x4
                +
0011ae 81ea     +LDD R30 , Y + 2
0011af 81fb     +LDD R31 , Y + 2 + 1
0011b0 816c     +LDD R22 , Y + 2 + 2
0011b1 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0011b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
0011b3 940e 1346 	CALL __MULF12
0011b5 01df      	MOVW R26,R30
0011b6 01cb      	MOVW R24,R22
0011b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
0011b8 940e 147b 	CALL __SWAPD12
0011ba 940e 12ef 	CALL __SUBF12
0011bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x29:
                +
0011bd 81ea     +LDD R30 , Y + 2
0011be 81fb     +LDD R31 , Y + 2 + 1
0011bf 816c     +LDD R22 , Y + 2 + 2
0011c0 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0011c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2A:
                +
0011c2 85aa     +LDD R26 , Y + 10
0011c3 85bb     +LDD R27 , Y + 10 + 1
0011c4 858c     +LDD R24 , Y + 10 + 2
0011c5 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
0011c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2B:
                +
0011c7 85e8     +LDD R30 , Y + 8
0011c8 85f9     +LDD R31 , Y + 8 + 1
0011c9 856a     +LDD R22 , Y + 8 + 2
0011ca 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
0011cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
                +
0011cc 81ec     +LDD R30 , Y + 4
0011cd 81fd     +LDD R31 , Y + 4 + 1
0011ce 816e     +LDD R22 , Y + 4 + 2
0011cf 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0011d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2D:
0011d1 940e 0e90 	CALL _log
                +
0011d3 81ac     +LDD R26 , Y + 4
0011d4 81bd     +LDD R27 , Y + 4 + 1
0011d5 818e     +LDD R24 , Y + 4 + 2
0011d6 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0011d7 cfdb      	RJMP SUBOPT_0x27
                 
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x15 ;PORTC
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
0011d8 98a8      	cbi  __i2c_port,__scl_bit
0011d9 98a9      	cbi  __i2c_port,__sda_bit
0011da 9aa0      	sbi  __i2c_dir,__scl_bit
0011db 98a1      	cbi  __i2c_dir,__sda_bit
0011dc c015      	rjmp __i2c_delay2
                 _i2c_start:
0011dd 98a1      	cbi  __i2c_dir,__sda_bit
0011de 98a0      	cbi  __i2c_dir,__scl_bit
0011df 27ee      	clr  r30
0011e0 0000      	nop
0011e1 9b99      	sbis __i2c_pin,__sda_bit
0011e2 9508      	ret
0011e3 9b98      	sbis __i2c_pin,__scl_bit
0011e4 9508      	ret
0011e5 d004      	rcall __i2c_delay1
0011e6 9aa1      	sbi  __i2c_dir,__sda_bit
0011e7 d002      	rcall __i2c_delay1
0011e8 9aa0      	sbi  __i2c_dir,__scl_bit
0011e9 e0e1      	ldi  r30,1
                 __i2c_delay1:
0011ea e06d      	ldi  r22,13
0011eb c007      	rjmp __i2c_delay2l
                 _i2c_stop:
0011ec 9aa1      	sbi  __i2c_dir,__sda_bit
0011ed 9aa0      	sbi  __i2c_dir,__scl_bit
0011ee d003      	rcall __i2c_delay2
0011ef 98a0      	cbi  __i2c_dir,__scl_bit
0011f0 dff9      	rcall __i2c_delay1
0011f1 98a1      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
0011f2 e16b      	ldi  r22,27
                 __i2c_delay2l:
0011f3 956a      	dec  r22
0011f4 f7f1      	brne __i2c_delay2l
0011f5 9508      	ret
                 _i2c_read:
0011f6 e078      	ldi  r23,8
                 __i2c_read0:
0011f7 98a0      	cbi  __i2c_dir,__scl_bit
0011f8 dff1      	rcall __i2c_delay1
                 __i2c_read3:
0011f9 9b98      	sbis __i2c_pin,__scl_bit
0011fa cffe      	rjmp __i2c_read3
0011fb dfee      	rcall __i2c_delay1
0011fc 9488      	clc
0011fd 9999      	sbic __i2c_pin,__sda_bit
0011fe 9408      	sec
0011ff 9aa0      	sbi  __i2c_dir,__scl_bit
001200 dff1      	rcall __i2c_delay2
001201 1fee      	rol  r30
001202 957a      	dec  r23
001203 f799      	brne __i2c_read0
001204 2f7a      	mov  r23,r26
001205 2377      	tst  r23
001206 f411      	brne __i2c_read1
001207 98a1      	cbi  __i2c_dir,__sda_bit
001208 c001      	rjmp __i2c_read2
                 __i2c_read1:
001209 9aa1      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
00120a dfdf      	rcall __i2c_delay1
00120b 98a0      	cbi  __i2c_dir,__scl_bit
00120c dfe5      	rcall __i2c_delay2
00120d 9aa0      	sbi  __i2c_dir,__scl_bit
00120e dfdb      	rcall __i2c_delay1
00120f 98a1      	cbi  __i2c_dir,__sda_bit
001210 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
001211 e078      	ldi  r23,8
                 __i2c_write0:
001212 0faa      	lsl  r26
001213 f410      	brcc __i2c_write1
001214 98a1      	cbi  __i2c_dir,__sda_bit
001215 c001      	rjmp __i2c_write2
                 __i2c_write1:
001216 9aa1      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
001217 dfda      	rcall __i2c_delay2
001218 98a0      	cbi  __i2c_dir,__scl_bit
001219 dfd0      	rcall __i2c_delay1
                 __i2c_write3:
00121a 9b98      	sbis __i2c_pin,__scl_bit
00121b cffe      	rjmp __i2c_write3
00121c dfcd      	rcall __i2c_delay1
00121d 9aa0      	sbi  __i2c_dir,__scl_bit
00121e 957a      	dec  r23
00121f f791      	brne __i2c_write0
001220 98a1      	cbi  __i2c_dir,__sda_bit
001221 dfc8      	rcall __i2c_delay1
001222 98a0      	cbi  __i2c_dir,__scl_bit
001223 dfce      	rcall __i2c_delay2
001224 e0e1      	ldi  r30,1
001225 9999      	sbic __i2c_pin,__sda_bit
001226 27ee      	clr  r30
001227 9aa0      	sbi  __i2c_dir,__scl_bit
001228 cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
001229 9610      	adiw r26,0
00122a f039      	breq __delay_ms1
                 __delay_ms0:
                +
00122b ed80     +LDI R24 , LOW ( 0x7D0 )
00122c e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00122d 9701     +SBIW R24 , 1
00122e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00122f 95a8      	wdr
001230 9711      	sbiw r26,1
001231 f7c9      	brne __delay_ms0
                 __delay_ms1:
001232 9508      	ret
                 
                 _frexp:
001233 91e9      	LD   R30,Y+
001234 91f9      	LD   R31,Y+
001235 9169      	LD   R22,Y+
001236 9179      	LD   R23,Y+
001237 fb77      	BST  R23,7
001238 0f66      	LSL  R22
001239 1f77      	ROL  R23
00123a 2788      	CLR  R24
00123b 577e      	SUBI R23,0x7E
00123c 0b88      	SBC  R24,R24
00123d 937d      	ST   X+,R23
00123e 938c      	ST   X,R24
00123f e77e      	LDI  R23,0x7E
001240 9576      	LSR  R23
001241 9567      	ROR  R22
001242 f06e      	BRTS __ANEGF1
001243 9508      	RET
                 
                 _ldexp:
001244 91e9      	LD   R30,Y+
001245 91f9      	LD   R31,Y+
001246 9169      	LD   R22,Y+
001247 9179      	LD   R23,Y+
001248 fb77      	BST  R23,7
001249 0f66      	LSL  R22
00124a 1f77      	ROL  R23
00124b 0f7a      	ADD  R23,R26
00124c 9576      	LSR  R23
00124d 9567      	ROR  R22
00124e f00e      	BRTS __ANEGF1
00124f 9508      	RET
                 
                 __ANEGF1:
001250 9730      	SBIW R30,0
001251 4060      	SBCI R22,0
001252 4070      	SBCI R23,0
001253 f009      	BREQ __ANEGF10
001254 5870      	SUBI R23,0x80
                 __ANEGF10:
001255 9508      	RET
                 
                 __ROUND_REPACK:
001256 2355      	TST  R21
001257 f442      	BRPL __REPACK
001258 3850      	CPI  R21,0x80
001259 f411      	BRNE __ROUND_REPACK0
00125a ffe0      	SBRS R30,0
00125b c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00125c 9631      	ADIW R30,1
00125d 1f69      	ADC  R22,R25
00125e 1f79      	ADC  R23,R25
00125f f06b      	BRVS __REPACK1
                 
                 __REPACK:
001260 e850      	LDI  R21,0x80
001261 2757      	EOR  R21,R23
001262 f411      	BRNE __REPACK0
001263 935f      	PUSH R21
001264 c0cf      	RJMP __ZERORES
                 __REPACK0:
001265 3f5f      	CPI  R21,0xFF
001266 f031      	BREQ __REPACK1
001267 0f66      	LSL  R22
001268 0c00      	LSL  R0
001269 9557      	ROR  R21
00126a 9567      	ROR  R22
00126b 2f75      	MOV  R23,R21
00126c 9508      	RET
                 __REPACK1:
00126d 935f      	PUSH R21
00126e 2000      	TST  R0
00126f f00a      	BRMI __REPACK2
001270 c0cf      	RJMP __MAXRES
                 __REPACK2:
001271 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
001272 e850      	LDI  R21,0x80
001273 2e19      	MOV  R1,R25
001274 2215      	AND  R1,R21
001275 0f88      	LSL  R24
001276 1f99      	ROL  R25
001277 2795      	EOR  R25,R21
001278 0f55      	LSL  R21
001279 9587      	ROR  R24
                 
                 __UNPACK1:
00127a e850      	LDI  R21,0x80
00127b 2e07      	MOV  R0,R23
00127c 2205      	AND  R0,R21
00127d 0f66      	LSL  R22
00127e 1f77      	ROL  R23
00127f 2775      	EOR  R23,R21
001280 0f55      	LSL  R21
001281 9567      	ROR  R22
001282 9508      	RET
                 
                 __CFD1U:
001283 9468      	SET
001284 c001      	RJMP __CFD1U0
                 __CFD1:
001285 94e8      	CLT
                 __CFD1U0:
001286 935f      	PUSH R21
001287 dff2      	RCALL __UNPACK1
001288 3870      	CPI  R23,0x80
001289 f018      	BRLO __CFD10
00128a 3f7f      	CPI  R23,0xFF
00128b f408      	BRCC __CFD10
00128c c0a7      	RJMP __ZERORES
                 __CFD10:
00128d e156      	LDI  R21,22
00128e 1b57      	SUB  R21,R23
00128f f4aa      	BRPL __CFD11
001290 9551      	NEG  R21
001291 3058      	CPI  R21,8
001292 f40e      	BRTC __CFD19
001293 3059      	CPI  R21,9
                 __CFD19:
001294 f030      	BRLO __CFD17
001295 efef      	SER  R30
001296 efff      	SER  R31
001297 ef6f      	SER  R22
001298 e77f      	LDI  R23,0x7F
001299 f977      	BLD  R23,7
00129a c01a      	RJMP __CFD15
                 __CFD17:
00129b 2777      	CLR  R23
00129c 2355      	TST  R21
00129d f0b9      	BREQ __CFD15
                 __CFD18:
00129e 0fee      	LSL  R30
00129f 1fff      	ROL  R31
0012a0 1f66      	ROL  R22
0012a1 1f77      	ROL  R23
0012a2 955a      	DEC  R21
0012a3 f7d1      	BRNE __CFD18
0012a4 c010      	RJMP __CFD15
                 __CFD11:
0012a5 2777      	CLR  R23
                 __CFD12:
0012a6 3058      	CPI  R21,8
0012a7 f028      	BRLO __CFD13
0012a8 2fef      	MOV  R30,R31
0012a9 2ff6      	MOV  R31,R22
0012aa 2f67      	MOV  R22,R23
0012ab 5058      	SUBI R21,8
0012ac cff9      	RJMP __CFD12
                 __CFD13:
0012ad 2355      	TST  R21
0012ae f031      	BREQ __CFD15
                 __CFD14:
0012af 9576      	LSR  R23
0012b0 9567      	ROR  R22
0012b1 95f7      	ROR  R31
0012b2 95e7      	ROR  R30
0012b3 955a      	DEC  R21
0012b4 f7d1      	BRNE __CFD14
                 __CFD15:
0012b5 2000      	TST  R0
0012b6 f40a      	BRPL __CFD16
0012b7 d149      	RCALL __ANEGD1
                 __CFD16:
0012b8 915f      	POP  R21
0012b9 9508      	RET
                 
                 __CDF1U:
0012ba 9468      	SET
0012bb c001      	RJMP __CDF1U0
                 __CDF1:
0012bc 94e8      	CLT
                 __CDF1U0:
0012bd 9730      	SBIW R30,0
0012be 4060      	SBCI R22,0
0012bf 4070      	SBCI R23,0
0012c0 f0b1      	BREQ __CDF10
0012c1 2400      	CLR  R0
0012c2 f026      	BRTS __CDF11
0012c3 2377      	TST  R23
0012c4 f412      	BRPL __CDF11
0012c5 9400      	COM  R0
0012c6 d13a      	RCALL __ANEGD1
                 __CDF11:
0012c7 2e17      	MOV  R1,R23
0012c8 e17e      	LDI  R23,30
0012c9 2011      	TST  R1
                 __CDF12:
0012ca f032      	BRMI __CDF13
0012cb 957a      	DEC  R23
0012cc 0fee      	LSL  R30
0012cd 1fff      	ROL  R31
0012ce 1f66      	ROL  R22
0012cf 1c11      	ROL  R1
0012d0 cff9      	RJMP __CDF12
                 __CDF13:
0012d1 2fef      	MOV  R30,R31
0012d2 2ff6      	MOV  R31,R22
0012d3 2d61      	MOV  R22,R1
0012d4 935f      	PUSH R21
0012d5 df8a      	RCALL __REPACK
0012d6 915f      	POP  R21
                 __CDF10:
0012d7 9508      	RET
                 
                 __SWAPACC:
0012d8 934f      	PUSH R20
0012d9 01af      	MOVW R20,R30
0012da 01fd      	MOVW R30,R26
0012db 01da      	MOVW R26,R20
0012dc 01ab      	MOVW R20,R22
0012dd 01bc      	MOVW R22,R24
0012de 01ca      	MOVW R24,R20
0012df 2d40      	MOV  R20,R0
0012e0 2c01      	MOV  R0,R1
0012e1 2e14      	MOV  R1,R20
0012e2 914f      	POP  R20
0012e3 9508      	RET
                 
                 __UADD12:
0012e4 0fea      	ADD  R30,R26
0012e5 1ffb      	ADC  R31,R27
0012e6 1f68      	ADC  R22,R24
0012e7 9508      	RET
                 
                 __NEGMAN1:
0012e8 95e0      	COM  R30
0012e9 95f0      	COM  R31
0012ea 9560      	COM  R22
0012eb 5fef      	SUBI R30,-1
0012ec 4fff      	SBCI R31,-1
0012ed 4f6f      	SBCI R22,-1
0012ee 9508      	RET
                 
                 __SUBF12:
0012ef 935f      	PUSH R21
0012f0 df81      	RCALL __UNPACK
0012f1 3890      	CPI  R25,0x80
0012f2 f171      	BREQ __ADDF129
0012f3 e850      	LDI  R21,0x80
0012f4 2615      	EOR  R1,R21
                 
0012f5 c004      	RJMP __ADDF120
                 
                 __ADDF12:
0012f6 935f      	PUSH R21
0012f7 df7a      	RCALL __UNPACK
0012f8 3890      	CPI  R25,0x80
0012f9 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0012fa 3870      	CPI  R23,0x80
0012fb f121      	BREQ __ADDF128
                 __ADDF121:
0012fc 2f57      	MOV  R21,R23
0012fd 1b59      	SUB  R21,R25
0012fe f12b      	BRVS __ADDF1211
0012ff f412      	BRPL __ADDF122
001300 dfd7      	RCALL __SWAPACC
001301 cffa      	RJMP __ADDF121
                 __ADDF122:
001302 3158      	CPI  R21,24
001303 f018      	BRLO __ADDF123
001304 27aa      	CLR  R26
001305 27bb      	CLR  R27
001306 2788      	CLR  R24
                 __ADDF123:
001307 3058      	CPI  R21,8
001308 f028      	BRLO __ADDF124
001309 2fab      	MOV  R26,R27
00130a 2fb8      	MOV  R27,R24
00130b 2788      	CLR  R24
00130c 5058      	SUBI R21,8
00130d cff9      	RJMP __ADDF123
                 __ADDF124:
00130e 2355      	TST  R21
00130f f029      	BREQ __ADDF126
                 __ADDF125:
001310 9586      	LSR  R24
001311 95b7      	ROR  R27
001312 95a7      	ROR  R26
001313 955a      	DEC  R21
001314 f7d9      	BRNE __ADDF125
                 __ADDF126:
001315 2d50      	MOV  R21,R0
001316 2551      	EOR  R21,R1
001317 f072      	BRMI __ADDF127
001318 dfcb      	RCALL __UADD12
001319 f438      	BRCC __ADDF129
00131a 9567      	ROR  R22
00131b 95f7      	ROR  R31
00131c 95e7      	ROR  R30
00131d 9573      	INC  R23
00131e f413      	BRVC __ADDF129
00131f c020      	RJMP __MAXRES
                 __ADDF128:
001320 dfb7      	RCALL __SWAPACC
                 __ADDF129:
001321 df3e      	RCALL __REPACK
001322 915f      	POP  R21
001323 9508      	RET
                 __ADDF1211:
001324 f7d8      	BRCC __ADDF128
001325 cffb      	RJMP __ADDF129
                 __ADDF127:
001326 1bea      	SUB  R30,R26
001327 0bfb      	SBC  R31,R27
001328 0b68      	SBC  R22,R24
001329 f051      	BREQ __ZERORES
00132a f410      	BRCC __ADDF1210
00132b 9400      	COM  R0
00132c dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
00132d 2366      	TST  R22
00132e f392      	BRMI __ADDF129
00132f 0fee      	LSL  R30
001330 1fff      	ROL  R31
001331 1f66      	ROL  R22
001332 957a      	DEC  R23
001333 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
001334 27ee      	CLR  R30
001335 27ff      	CLR  R31
001336 2766      	CLR  R22
001337 2777      	CLR  R23
001338 915f      	POP  R21
001339 9508      	RET
                 
                 __MINRES:
00133a efef      	SER  R30
00133b efff      	SER  R31
00133c e76f      	LDI  R22,0x7F
00133d ef7f      	SER  R23
00133e 915f      	POP  R21
00133f 9508      	RET
                 
                 __MAXRES:
001340 efef      	SER  R30
001341 efff      	SER  R31
001342 e76f      	LDI  R22,0x7F
001343 e77f      	LDI  R23,0x7F
001344 915f      	POP  R21
001345 9508      	RET
                 
                 __MULF12:
001346 935f      	PUSH R21
001347 df2a      	RCALL __UNPACK
001348 3870      	CPI  R23,0x80
001349 f351      	BREQ __ZERORES
00134a 3890      	CPI  R25,0x80
00134b f341      	BREQ __ZERORES
00134c 2401      	EOR  R0,R1
00134d 9408      	SEC
00134e 1f79      	ADC  R23,R25
00134f f423      	BRVC __MULF124
001350 f31c      	BRLT __ZERORES
                 __MULF125:
001351 2000      	TST  R0
001352 f33a      	BRMI __MINRES
001353 cfec      	RJMP __MAXRES
                 __MULF124:
001354 920f      	PUSH R0
001355 931f      	PUSH R17
001356 932f      	PUSH R18
001357 933f      	PUSH R19
001358 934f      	PUSH R20
001359 2711      	CLR  R17
00135a 2722      	CLR  R18
00135b 2799      	CLR  R25
00135c 9f68      	MUL  R22,R24
00135d 01a0      	MOVW R20,R0
00135e 9f8f      	MUL  R24,R31
00135f 2d30      	MOV  R19,R0
001360 0d41      	ADD  R20,R1
001361 1f59      	ADC  R21,R25
001362 9f6b      	MUL  R22,R27
001363 0d30      	ADD  R19,R0
001364 1d41      	ADC  R20,R1
001365 1f59      	ADC  R21,R25
001366 9f8e      	MUL  R24,R30
001367 d027      	RCALL __MULF126
001368 9fbf      	MUL  R27,R31
001369 d025      	RCALL __MULF126
00136a 9f6a      	MUL  R22,R26
00136b d023      	RCALL __MULF126
00136c 9fbe      	MUL  R27,R30
00136d d01d      	RCALL __MULF127
00136e 9faf      	MUL  R26,R31
00136f d01b      	RCALL __MULF127
001370 9fae      	MUL  R26,R30
001371 0d11      	ADD  R17,R1
001372 1f29      	ADC  R18,R25
001373 1f39      	ADC  R19,R25
001374 1f49      	ADC  R20,R25
001375 1f59      	ADC  R21,R25
001376 2fe3      	MOV  R30,R19
001377 2ff4      	MOV  R31,R20
001378 2f65      	MOV  R22,R21
001379 2f52      	MOV  R21,R18
00137a 914f      	POP  R20
00137b 913f      	POP  R19
00137c 912f      	POP  R18
00137d 911f      	POP  R17
00137e 900f      	POP  R0
00137f 2366      	TST  R22
001380 f02a      	BRMI __MULF122
001381 0f55      	LSL  R21
001382 1fee      	ROL  R30
001383 1fff      	ROL  R31
001384 1f66      	ROL  R22
001385 c002      	RJMP __MULF123
                 __MULF122:
001386 9573      	INC  R23
001387 f24b      	BRVS __MULF125
                 __MULF123:
001388 decd      	RCALL __ROUND_REPACK
001389 915f      	POP  R21
00138a 9508      	RET
                 
                 __MULF127:
00138b 0d10      	ADD  R17,R0
00138c 1d21      	ADC  R18,R1
00138d 1f39      	ADC  R19,R25
00138e c002      	RJMP __MULF128
                 __MULF126:
00138f 0d20      	ADD  R18,R0
001390 1d31      	ADC  R19,R1
                 __MULF128:
001391 1f49      	ADC  R20,R25
001392 1f59      	ADC  R21,R25
001393 9508      	RET
                 
                 __DIVF21:
001394 935f      	PUSH R21
001395 dedc      	RCALL __UNPACK
001396 3870      	CPI  R23,0x80
001397 f421      	BRNE __DIVF210
001398 2011      	TST  R1
                 __DIVF211:
001399 f40a      	BRPL __DIVF219
00139a cf9f      	RJMP __MINRES
                 __DIVF219:
00139b cfa4      	RJMP __MAXRES
                 __DIVF210:
00139c 3890      	CPI  R25,0x80
00139d f409      	BRNE __DIVF218
                 __DIVF217:
00139e cf95      	RJMP __ZERORES
                 __DIVF218:
00139f 2401      	EOR  R0,R1
0013a0 9408      	SEC
0013a1 0b97      	SBC  R25,R23
0013a2 f41b      	BRVC __DIVF216
0013a3 f3d4      	BRLT __DIVF217
0013a4 2000      	TST  R0
0013a5 cff3      	RJMP __DIVF211
                 __DIVF216:
0013a6 2f79      	MOV  R23,R25
0013a7 931f      	PUSH R17
0013a8 932f      	PUSH R18
0013a9 933f      	PUSH R19
0013aa 934f      	PUSH R20
0013ab 2411      	CLR  R1
0013ac 2711      	CLR  R17
0013ad 2722      	CLR  R18
0013ae 2733      	CLR  R19
0013af 2744      	CLR  R20
0013b0 2755      	CLR  R21
0013b1 e290      	LDI  R25,32
                 __DIVF212:
0013b2 17ae      	CP   R26,R30
0013b3 07bf      	CPC  R27,R31
0013b4 0786      	CPC  R24,R22
0013b5 0741      	CPC  R20,R17
0013b6 f030      	BRLO __DIVF213
0013b7 1bae      	SUB  R26,R30
0013b8 0bbf      	SBC  R27,R31
0013b9 0b86      	SBC  R24,R22
0013ba 0b41      	SBC  R20,R17
0013bb 9408      	SEC
0013bc c001      	RJMP __DIVF214
                 __DIVF213:
0013bd 9488      	CLC
                 __DIVF214:
0013be 1f55      	ROL  R21
0013bf 1f22      	ROL  R18
0013c0 1f33      	ROL  R19
0013c1 1c11      	ROL  R1
0013c2 1faa      	ROL  R26
0013c3 1fbb      	ROL  R27
0013c4 1f88      	ROL  R24
0013c5 1f44      	ROL  R20
0013c6 959a      	DEC  R25
0013c7 f751      	BRNE __DIVF212
0013c8 01f9      	MOVW R30,R18
0013c9 2d61      	MOV  R22,R1
0013ca 914f      	POP  R20
0013cb 913f      	POP  R19
0013cc 912f      	POP  R18
0013cd 911f      	POP  R17
0013ce 2366      	TST  R22
0013cf f032      	BRMI __DIVF215
0013d0 0f55      	LSL  R21
0013d1 1fee      	ROL  R30
0013d2 1fff      	ROL  R31
0013d3 1f66      	ROL  R22
0013d4 957a      	DEC  R23
0013d5 f243      	BRVS __DIVF217
                 __DIVF215:
0013d6 de7f      	RCALL __ROUND_REPACK
0013d7 915f      	POP  R21
0013d8 9508      	RET
                 
                 __CMPF12:
0013d9 2399      	TST  R25
0013da f09a      	BRMI __CMPF120
0013db 2377      	TST  R23
0013dc f042      	BRMI __CMPF121
0013dd 1797      	CP   R25,R23
0013de f048      	BRLO __CMPF122
0013df f429      	BRNE __CMPF121
0013e0 17ae      	CP   R26,R30
0013e1 07bf      	CPC  R27,R31
0013e2 0786      	CPC  R24,R22
0013e3 f020      	BRLO __CMPF122
0013e4 f031      	BREQ __CMPF123
                 __CMPF121:
0013e5 9498      	CLZ
0013e6 9488      	CLC
0013e7 9508      	RET
                 __CMPF122:
0013e8 9498      	CLZ
0013e9 9408      	SEC
0013ea 9508      	RET
                 __CMPF123:
0013eb 9418      	SEZ
0013ec 9488      	CLC
0013ed 9508      	RET
                 __CMPF120:
0013ee 2377      	TST  R23
0013ef f7c2      	BRPL __CMPF122
0013f0 1797      	CP   R25,R23
0013f1 f398      	BRLO __CMPF121
0013f2 f7a9      	BRNE __CMPF122
0013f3 17ea      	CP   R30,R26
0013f4 07fb      	CPC  R31,R27
0013f5 0768      	CPC  R22,R24
0013f6 f388      	BRLO __CMPF122
0013f7 f399      	BREQ __CMPF123
0013f8 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
0013f9 2400      	CLR  R0
0013fa 0daf      	ADD  R26,R15
0013fb 1db0      	ADC  R27,R0
0013fc 9508      	RET
                 
                 __ANEGW1:
0013fd 95f1      	NEG  R31
0013fe 95e1      	NEG  R30
0013ff 40f0      	SBCI R31,0
001400 9508      	RET
                 
                 __ANEGD1:
001401 95f0      	COM  R31
001402 9560      	COM  R22
001403 9570      	COM  R23
001404 95e1      	NEG  R30
001405 4fff      	SBCI R31,-1
001406 4f6f      	SBCI R22,-1
001407 4f7f      	SBCI R23,-1
001408 9508      	RET
                 
                 __LSLB12:
001409 23ee      	TST  R30
00140a 2e0e      	MOV  R0,R30
00140b 2fea      	MOV  R30,R26
00140c f019      	BREQ __LSLB12R
                 __LSLB12L:
00140d 0fee      	LSL  R30
00140e 940a      	DEC  R0
00140f f7e9      	BRNE __LSLB12L
                 __LSLB12R:
001410 9508      	RET
                 
                 __LSRB12:
001411 23ee      	TST  R30
001412 2e0e      	MOV  R0,R30
001413 2fea      	MOV  R30,R26
001414 f019      	BREQ __LSRB12R
                 __LSRB12L:
001415 95e6      	LSR  R30
001416 940a      	DEC  R0
001417 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
001418 9508      	RET
                 
                 __LSLW4:
001419 0fee      	LSL  R30
00141a 1fff      	ROL  R31
                 __LSLW3:
00141b 0fee      	LSL  R30
00141c 1fff      	ROL  R31
                 __LSLW2:
00141d 0fee      	LSL  R30
00141e 1fff      	ROL  R31
00141f 0fee      	LSL  R30
001420 1fff      	ROL  R31
001421 9508      	RET
                 
                 __CBD1:
001422 2ffe      	MOV  R31,R30
001423 0fff      	ADD  R31,R31
001424 0bff      	SBC  R31,R31
001425 2f6f      	MOV  R22,R31
001426 2f7f      	MOV  R23,R31
001427 9508      	RET
                 
                 __CWD1:
001428 2f6f      	MOV  R22,R31
001429 0f66      	ADD  R22,R22
00142a 0b66      	SBC  R22,R22
00142b 2f76      	MOV  R23,R22
00142c 9508      	RET
                 
                 __MULW12U:
00142d 9ffa      	MUL  R31,R26
00142e 2df0      	MOV  R31,R0
00142f 9feb      	MUL  R30,R27
001430 0df0      	ADD  R31,R0
001431 9fea      	MUL  R30,R26
001432 2de0      	MOV  R30,R0
001433 0df1      	ADD  R31,R1
001434 9508      	RET
                 
                 __MULD12U:
001435 9f7a      	MUL  R23,R26
001436 2d70      	MOV  R23,R0
001437 9f6b      	MUL  R22,R27
001438 0d70      	ADD  R23,R0
001439 9ff8      	MUL  R31,R24
00143a 0d70      	ADD  R23,R0
00143b 9fe9      	MUL  R30,R25
00143c 0d70      	ADD  R23,R0
00143d 9f6a      	MUL  R22,R26
00143e 2d60      	MOV  R22,R0
00143f 0d71      	ADD  R23,R1
001440 9ffb      	MUL  R31,R27
001441 0d60      	ADD  R22,R0
001442 1d71      	ADC  R23,R1
001443 9fe8      	MUL  R30,R24
001444 0d60      	ADD  R22,R0
001445 1d71      	ADC  R23,R1
001446 2788      	CLR  R24
001447 9ffa      	MUL  R31,R26
001448 2df0      	MOV  R31,R0
001449 0d61      	ADD  R22,R1
00144a 1f78      	ADC  R23,R24
00144b 9feb      	MUL  R30,R27
00144c 0df0      	ADD  R31,R0
00144d 1d61      	ADC  R22,R1
00144e 1f78      	ADC  R23,R24
00144f 9fea      	MUL  R30,R26
001450 2de0      	MOV  R30,R0
001451 0df1      	ADD  R31,R1
001452 1f68      	ADC  R22,R24
001453 1f78      	ADC  R23,R24
001454 9508      	RET
                 
                 __GETW1P:
001455 91ed      	LD   R30,X+
001456 91fc      	LD   R31,X
001457 9711      	SBIW R26,1
001458 9508      	RET
                 
                 __PUTDP1:
001459 93ed      	ST   X+,R30
00145a 93fd      	ST   X+,R31
00145b 936d      	ST   X+,R22
00145c 937c      	ST   X,R23
00145d 9508      	RET
                 
                 __GETW1PF:
00145e 9005      	LPM  R0,Z+
00145f 91f4      	LPM  R31,Z
001460 2de0      	MOV  R30,R0
001461 9508      	RET
                 
                 __GETD1S0:
001462 81e8      	LD   R30,Y
001463 81f9      	LDD  R31,Y+1
001464 816a      	LDD  R22,Y+2
001465 817b      	LDD  R23,Y+3
001466 9508      	RET
                 
                 __GETD2S0:
001467 81a8      	LD   R26,Y
001468 81b9      	LDD  R27,Y+1
001469 818a      	LDD  R24,Y+2
00146a 819b      	LDD  R25,Y+3
00146b 9508      	RET
                 
                 __PUTD1S0:
00146c 83e8      	ST   Y,R30
00146d 83f9      	STD  Y+1,R31
00146e 836a      	STD  Y+2,R22
00146f 837b      	STD  Y+3,R23
001470 9508      	RET
                 
                 __PUTPARD1:
001471 937a      	ST   -Y,R23
001472 936a      	ST   -Y,R22
001473 93fa      	ST   -Y,R31
001474 93ea      	ST   -Y,R30
001475 9508      	RET
                 
                 __PUTPARD2:
001476 939a      	ST   -Y,R25
001477 938a      	ST   -Y,R24
001478 93ba      	ST   -Y,R27
001479 93aa      	ST   -Y,R26
00147a 9508      	RET
                 
                 __SWAPD12:
00147b 2e18      	MOV  R1,R24
00147c 2f86      	MOV  R24,R22
00147d 2d61      	MOV  R22,R1
00147e 2e19      	MOV  R1,R25
00147f 2f97      	MOV  R25,R23
001480 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
001481 2e1b      	MOV  R1,R27
001482 2fbf      	MOV  R27,R31
001483 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
001484 2e1a      	MOV  R1,R26
001485 2fae      	MOV  R26,R30
001486 2de1      	MOV  R30,R1
001487 9508      	RET
                 
                 __EEPROMRDB:
001488 99e1      	SBIC EECR,EEWE
001489 cffe      	RJMP __EEPROMRDB
00148a 93ff      	PUSH R31
00148b b7ff      	IN   R31,SREG
00148c 94f8      	CLI
00148d bbae      	OUT  EEARL,R26
00148e bbbf      	OUT  EEARH,R27
00148f 9ae0      	SBI  EECR,EERE
001490 b3ed      	IN   R30,EEDR
001491 bfff      	OUT  SREG,R31
001492 91ff      	POP  R31
001493 9508      	RET
                 
                 __EEPROMWRB:
001494 9be1      	SBIS EECR,EEWE
001495 c002      	RJMP __EEPROMWRB1
001496 95a8      	WDR
001497 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
001498 b79f      	IN   R25,SREG
001499 94f8      	CLI
00149a bbae      	OUT  EEARL,R26
00149b bbbf      	OUT  EEARH,R27
00149c 9ae0      	SBI  EECR,EERE
00149d b38d      	IN   R24,EEDR
00149e 17e8      	CP   R30,R24
00149f f019      	BREQ __EEPROMWRB0
0014a0 bbed      	OUT  EEDR,R30
0014a1 9ae2      	SBI  EECR,EEMWE
0014a2 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0014a3 bf9f      	OUT  SREG,R25
0014a4 9508      	RET
                 
                 __CPD10:
0014a5 9730      	SBIW R30,0
0014a6 4060      	SBCI R22,0
0014a7 4070      	SBCI R23,0
0014a8 9508      	RET
                 
                 __CPW02:
0014a9 2400      	CLR  R0
0014aa 160a      	CP   R0,R26
0014ab 060b      	CPC  R0,R27
0014ac 9508      	RET
                 
                 __CPD02:
0014ad 2400      	CLR  R0
0014ae 160a      	CP   R0,R26
0014af 060b      	CPC  R0,R27
0014b0 0608      	CPC  R0,R24
0014b1 0609      	CPC  R0,R25
0014b2 9508      	RET
                 
                 __CPD12:
0014b3 17ea      	CP   R30,R26
0014b4 07fb      	CPC  R31,R27
0014b5 0768      	CPC  R22,R24
0014b6 0779      	CPC  R23,R25
0014b7 9508      	RET
                 
                 __SAVELOCR6:
0014b8 935a      	ST   -Y,R21
                 __SAVELOCR5:
0014b9 934a      	ST   -Y,R20
                 __SAVELOCR4:
0014ba 933a      	ST   -Y,R19
                 __SAVELOCR3:
0014bb 932a      	ST   -Y,R18
                 __SAVELOCR2:
0014bc 931a      	ST   -Y,R17
0014bd 930a      	ST   -Y,R16
0014be 9508      	RET
                 
                 __LOADLOCR6:
0014bf 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0014c0 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0014c1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0014c2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0014c3 8119      	LDD  R17,Y+1
0014c4 8108      	LD   R16,Y
0014c5 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  68 r1 :  44 r2 :  15 r3 :   0 r4 :   3 r5 :   2 r6 :   0 r7 :   2 
r8 :   2 r9 :   0 r10:   2 r11:   2 r12:   7 r13:   3 r14:   0 r15:   8 
r16: 102 r17: 167 r18:  85 r19:  50 r20:  44 r21: 108 r22: 129 r23: 127 
r24:  93 r25:  74 r26: 387 r27: 167 r28:  46 r29:   1 r30: 982 r31: 285 
x  :  40 y  : 694 z  :  26 
Registers used: 31 out of 35 (88.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  36 add   :  34 
adiw  :  49 and   :  12 andi  :  58 asr   :   0 bclr  :   0 bld   :  12 
brbc  :   0 brbs  :   0 brcc  :   7 brcs  :   1 break :   0 breq  :  92 
brge  :   6 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  25 
brlt  :   7 brmi  :  10 brne  : 125 brpl  :   8 brsh  :  31 brtc  :   2 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   4 call  : 306 
cbi   :  46 cbr   :   1 clc   :   4 clh   :   0 cli   :   4 cln   :   0 
clr   :  61 cls   :   0 clt   :   7 clv   :   0 clz   :   2 com   :  15 
cp    :  36 cpc   :  31 cpi   : 160 cpse  :   0 dec   :  16 des   :   0 
eor   :   8 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   8 ijmp  :   0 
in    :  52 inc   :   9 jmp   :  60 ld    : 107 ldd   : 313 ldi   : 383 
lds   :  69 lpm   :  26 lsl   :  22 lsr   :  20 mov   : 147 movw  :  61 
mul   :  23 muls  :   0 mulsu :   0 neg   :   4 nop   :   3 or    :   8 
ori   :  31 out   :  63 pop   :  52 push  :  52 rcall :  83 ret   : 120 
reti  :   5 rjmp  : 243 rol   :  33 ror   :  17 sbc   :  10 sbci  :  28 
sbi   :  58 sbic  :  12 sbis  :   6 sbiw  :  45 sbr   :   2 sbrc  :   5 
sbrs  :  17 sec   :   6 seh   :   0 sei   :   2 sen   :   0 ser   :   8 
ses   :   0 set   :   8 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    : 231 std   :  89 sts   :  35 sub   :  11 subi  :  63 swap  :   1 
tst   :  24 wdr   :   2 
Instructions used: 84 out of 116 (72.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00298c   8738   1898  10636   16384  64.9%
[.dseg] 0x000060 0x00043e      0    734    734    1024  71.7%
[.eseg] 0x000000 0x000200      0    512    512     512 100.0%

Assembly complete, 0 errors, 17 warnings
