
AVRASM ver. 2.1.30  C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm Thu Dec 03 12:38:07 2020

C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1093): warning: Register r8 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R6
                 	.DEF _rx_counter_msb=R7
                 	.DEF _tx_wr_index=R9
                 	.DEF _tx_rd_index=R8
                 	.DEF _tx_counter=R10
                 	.DEF _tx_counter_msb=R11
                 	.DEF _adc_old_data=R12
                 	.DEF _adc_old_data_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0351 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 05dd 	JMP  _timer1_ovf_isr
000012 940c 0000 	JMP  0x00
000014 940c 03f5 	JMP  _spi_isr
000016 940c 0439 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0457 	JMP  _usart_tx_isr
00001c 940c 0506 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0848 	JMP  _twi_int_handler
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _font5x7:
00002a 0705
00002b 6020
00002c 0000
00002d 0000      	.DB  0x5,0x7,0x20,0x60,0x0,0x0,0x0,0x0
00002e 0000
00002f 5f00
000030 0000
000031 0700      	.DB  0x0,0x0,0x0,0x5F,0x0,0x0,0x0,0x7
000032 0700
000033 1400
000034 147f
000035 147f      	.DB  0x0,0x7,0x0,0x14,0x7F,0x14,0x7F,0x14
000036 2a24
000037 2a7f
000038 2312
000039 0813      	.DB  0x24,0x2A,0x7F,0x2A,0x12,0x23,0x13,0x8
00003a 6264
00003b 4936
00003c 2255
00003d 0050      	.DB  0x64,0x62,0x36,0x49,0x55,0x22,0x50,0x0
00003e 0305
00003f 0000
000040 1c00
000041 4122      	.DB  0x5,0x3,0x0,0x0,0x0,0x1C,0x22,0x41
000042 0000
000043 2241
000044 001c
000045 2a08      	.DB  0x0,0x0,0x41,0x22,0x1C,0x0,0x8,0x2A
000046 2a1c
000047 0808
000048 3e08
000049 0808      	.DB  0x1C,0x2A,0x8,0x8,0x8,0x3E,0x8,0x8
00004a 5000
00004b 0030
00004c 0800
00004d 0808      	.DB  0x0,0x50,0x30,0x0,0x0,0x8,0x8,0x8
00004e 0808
00004f 3000
000050 0030
000051 2000      	.DB  0x8,0x8,0x0,0x30,0x30,0x0,0x0,0x20
000052 0810
000053 0204
000054 513e
000055 4549      	.DB  0x10,0x8,0x4,0x2,0x3E,0x51,0x49,0x45
000056 003e
000057 7f42
000058 0040
000059 6142      	.DB  0x3E,0x0,0x42,0x7F,0x40,0x0,0x42,0x61
00005a 4951
00005b 2146
00005c 4541
00005d 314b      	.DB  0x51,0x49,0x46,0x21,0x41,0x45,0x4B,0x31
00005e 1418
00005f 7f12
000060 2710
000061 4545      	.DB  0x18,0x14,0x12,0x7F,0x10,0x27,0x45,0x45
000062 3945
000063 4a3c
000064 4949
000065 0130      	.DB  0x45,0x39,0x3C,0x4A,0x49,0x49,0x30,0x1
000066 0971
000067 0305
000068 4936
000069 4949      	.DB  0x71,0x9,0x5,0x3,0x36,0x49,0x49,0x49
00006a 0636
00006b 4949
00006c 1e29
00006d 3600      	.DB  0x36,0x6,0x49,0x49,0x29,0x1E,0x0,0x36
00006e 0036
00006f 0000
000070 3656
000071 0000      	.DB  0x36,0x0,0x0,0x0,0x56,0x36,0x0,0x0
000072 0800
000073 2214
000074 1441
000075 1414      	.DB  0x0,0x8,0x14,0x22,0x41,0x14,0x14,0x14
000076 1414
000077 2241
000078 0814
000079 0200      	.DB  0x14,0x14,0x41,0x22,0x14,0x8,0x0,0x2
00007a 5101
00007b 0609
00007c 4932
00007d 4179      	.DB  0x1,0x51,0x9,0x6,0x32,0x49,0x79,0x41
00007e 7e3e
00007f 1111
000080 7e11
000081 497f      	.DB  0x3E,0x7E,0x11,0x11,0x11,0x7E,0x7F,0x49
000082 4949
000083 3e36
000084 4141
000085 2241      	.DB  0x49,0x49,0x36,0x3E,0x41,0x41,0x41,0x22
000086 417f
000087 2241
000088 7f1c
000089 4949      	.DB  0x7F,0x41,0x41,0x22,0x1C,0x7F,0x49,0x49
00008a 4149
00008b 097f
00008c 0109
00008d 3e01      	.DB  0x49,0x41,0x7F,0x9,0x9,0x1,0x1,0x3E
00008e 4141
00008f 3251
000090 087f
000091 0808      	.DB  0x41,0x41,0x51,0x32,0x7F,0x8,0x8,0x8
000092 007f
000093 7f41
000094 0041
000095 4020      	.DB  0x7F,0x0,0x41,0x7F,0x41,0x0,0x20,0x40
000096 3f41
000097 7f01
000098 1408
000099 4122      	.DB  0x41,0x3F,0x1,0x7F,0x8,0x14,0x22,0x41
00009a 407f
00009b 4040
00009c 7f40
00009d 0402      	.DB  0x7F,0x40,0x40,0x40,0x40,0x7F,0x2,0x4
00009e 7f02
00009f 047f
0000a0 1008
0000a1 3e7f      	.DB  0x2,0x7F,0x7F,0x4,0x8,0x10,0x7F,0x3E
0000a2 4141
0000a3 3e41
0000a4 097f
0000a5 0909      	.DB  0x41,0x41,0x41,0x3E,0x7F,0x9,0x9,0x9
0000a6 3e06
0000a7 5141
0000a8 5e21
0000a9 097f      	.DB  0x6,0x3E,0x41,0x51,0x21,0x5E,0x7F,0x9
0000aa 2919
0000ab 4646
0000ac 4949
0000ad 3149      	.DB  0x19,0x29,0x46,0x46,0x49,0x49,0x49,0x31
0000ae 0101
0000af 017f
0000b0 3f01
0000b1 4040      	.DB  0x1,0x1,0x7F,0x1,0x1,0x3F,0x40,0x40
0000b2 3f40
0000b3 201f
0000b4 2040
0000b5 7f1f      	.DB  0x40,0x3F,0x1F,0x20,0x40,0x20,0x1F,0x7F
0000b6 1820
0000b7 7f20
0000b8 1463
0000b9 1408      	.DB  0x20,0x18,0x20,0x7F,0x63,0x14,0x8,0x14
0000ba 0363
0000bb 7804
0000bc 0304
0000bd 5161      	.DB  0x63,0x3,0x4,0x78,0x4,0x3,0x61,0x51
0000be 4549
0000bf 0043
0000c0 7f00
0000c1 4141      	.DB  0x49,0x45,0x43,0x0,0x0,0x7F,0x41,0x41
0000c2 0402
0000c3 1008
0000c4 4120
0000c5 7f41      	.DB  0x2,0x4,0x8,0x10,0x20,0x41,0x41,0x7F
0000c6 0000
0000c7 0204
0000c8 0201
0000c9 4004      	.DB  0x0,0x0,0x4,0x2,0x1,0x2,0x4,0x40
0000ca 4040
0000cb 4040
0000cc 0100
0000cd 0402      	.DB  0x40,0x40,0x40,0x40,0x0,0x1,0x2,0x4
0000ce 2000
0000cf 5454
0000d0 7854
0000d1 487f      	.DB  0x0,0x20,0x54,0x54,0x54,0x78,0x7F,0x48
0000d2 4444
0000d3 3838
0000d4 4444
0000d5 2044      	.DB  0x44,0x44,0x38,0x38,0x44,0x44,0x44,0x20
0000d6 4438
0000d7 4844
0000d8 387f
0000d9 5454      	.DB  0x38,0x44,0x44,0x48,0x7F,0x38,0x54,0x54
0000da 1854
0000db 7e08
0000dc 0109
0000dd 0802      	.DB  0x54,0x18,0x8,0x7E,0x9,0x1,0x2,0x8
0000de 5414
0000df 3c54
0000e0 087f
0000e1 0404      	.DB  0x14,0x54,0x54,0x3C,0x7F,0x8,0x4,0x4
0000e2 0078
0000e3 7d44
0000e4 0040
0000e5 4020      	.DB  0x78,0x0,0x44,0x7D,0x40,0x0,0x20,0x40
0000e6 3d44
0000e7 0000
0000e8 107f
0000e9 4428      	.DB  0x44,0x3D,0x0,0x0,0x7F,0x10,0x28,0x44
0000ea 4100
0000eb 407f
0000ec 7c00
0000ed 1804      	.DB  0x0,0x41,0x7F,0x40,0x0,0x7C,0x4,0x18
0000ee 7804
0000ef 087c
0000f0 0404
0000f1 3878      	.DB  0x4,0x78,0x7C,0x8,0x4,0x4,0x78,0x38
0000f2 4444
0000f3 3844
0000f4 147c
0000f5 1414      	.DB  0x44,0x44,0x44,0x38,0x7C,0x14,0x14,0x14
0000f6 0808
0000f7 1414
0000f8 7c18
0000f9 087c      	.DB  0x8,0x8,0x14,0x14,0x18,0x7C,0x7C,0x8
0000fa 0404
0000fb 4808
0000fc 5454
0000fd 2054      	.DB  0x4,0x4,0x8,0x48,0x54,0x54,0x54,0x20
0000fe 3f04
0000ff 4044
000100 3c20
000101 4040      	.DB  0x4,0x3F,0x44,0x40,0x20,0x3C,0x40,0x40
000102 7c20
000103 201c
000104 2040
000105 3c1c      	.DB  0x20,0x7C,0x1C,0x20,0x40,0x20,0x1C,0x3C
000106 3040
000107 3c40
000108 2844
000109 2810      	.DB  0x40,0x30,0x40,0x3C,0x44,0x28,0x10,0x28
00010a 0c44
00010b 5050
00010c 3c50
00010d 6444      	.DB  0x44,0xC,0x50,0x50,0x50,0x3C,0x44,0x64
00010e 4c54
00010f 0044
000110 3608
000111 0041      	.DB  0x54,0x4C,0x44,0x0,0x8,0x36,0x41,0x0
000112 0000
000113 007f
000114 0000
000115 3641      	.DB  0x0,0x0,0x7F,0x0,0x0,0x0,0x41,0x36
000116 0008
000117 0102
000118 0402
000119 7f02      	.DB  0x8,0x0,0x2,0x1,0x2,0x4,0x2,0x7F
00011a 4141
00011b 7f41      	.DB  0x41,0x41,0x41,0x7F
                 _clock:
00011c 0040
00011d 0040
00011e 0000
00011f 0000      	.DB  0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0
000120 0000
000121 0000
000122 0000
000123 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000124 8080
000125 e0c0
000126 f0e0
000127 78f0      	.DB  0x80,0x80,0xC0,0xE0,0xE0,0xF0,0xF0,0x78
000128 3c78
000129 1c3c
00012a 1e1e
00012b 0e1e      	.DB  0x78,0x3C,0x3C,0x1C,0x1E,0x1E,0x1E,0xE
00012c 0e0e
00012d ce0e
00012e cece
00012f 0e0e      	.DB  0xE,0xE,0xE,0xCE,0xCE,0xCE,0xE,0xE
000130 0e0e
000131 1e1e
000132 1c1e
000133 3c3c      	.DB  0xE,0xE,0x1E,0x1E,0x1E,0x1C,0x3C,0x3C
000134 7878
000135 f0f0
000136 e0e0
000137 80c0      	.DB  0x78,0x78,0xF0,0xF0,0xE0,0xE0,0xC0,0x80
000138 0080
000139 0000
00013a 0000
00013b 0000      	.DB  0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00013c 0000
00013d 0000
00013e 0000
00013f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000140 8000
000141 f0c0
000142 fcf8
000143 1f7e      	.DB  0x0,0x80,0xC0,0xF0,0xF8,0xFC,0x7E,0x1F
000144 070f
000145 0307
000146 0001
000147 3e0e      	.DB  0xF,0x7,0x7,0x3,0x1,0x0,0xE,0x3E
000148 7c7e
000149 0078
00014a 0000
00014b 0000      	.DB  0x7E,0x7C,0x78,0x0,0x0,0x0,0x0,0x0
00014c 0000
00014d 0f00
00014e 0f0f
00014f 0000      	.DB  0x0,0x0,0x0,0xF,0xF,0xF,0x0,0x0
000150 0000
000151 0000
000152 0000
000153 7c70      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x70,0x7C
000154 3e7e
000155 000e
000156 0301
000157 0703      	.DB  0x7E,0x3E,0xE,0x0,0x1,0x3,0x3,0x7
000158 1f0f
000159 fc3e
00015a f0f8
00015b 80e0      	.DB  0xF,0x1F,0x3E,0xFC,0xF8,0xF0,0xE0,0x80
00015c 0000
00015d 0000
00015e 0000
00015f f8e0      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0xE0,0xF8
000160 7ffe
000161 071f
000162 3c01
000163 7c3c      	.DB  0xFE,0x7F,0x1F,0x7,0x1,0x3C,0x3C,0x7C
000164 7078
000165 0070
000166 0000
000167 0000      	.DB  0x78,0x70,0x70,0x0,0x0,0x0,0x0,0x0
000168 0000
000169 0000
00016a 0000
00016b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00016c 0000
00016d 0000
00016e 0000
00016f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000170 0000
000171 0000
000172 0000
000173 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000174 0000
000175 0000
000176 2000
000177 7070      	.DB  0x0,0x0,0x0,0x0,0x0,0x20,0x70,0x70
000178 7878
000179 3c3c
00017a 0701
00017b 7f1f      	.DB  0x78,0x78,0x3C,0x3C,0x1,0x7,0x1F,0x7F
00017c f8fe
00017d 00e0
00017e ffc0
00017f ffff      	.DB  0xFE,0xF8,0xE0,0x0,0xC0,0xFF,0xFF,0xFF
000180 0007
000181 8080
000182 8080
000183 8080      	.DB  0x7,0x0,0x80,0x80,0x80,0x80,0x80,0x80
000184 0000
000185 0000
000186 0000
000187 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000188 0000
000189 0000
00018a 0000
00018b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00018c 0000
00018d 0000
00018e 0000
00018f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000190 0000
000191 0000
000192 0000
000193 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000194 0000
000195 0000
000196 0000
000197 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000198 8000
000199 8080
00019a 8080
00019b 0080      	.DB  0x0,0x80,0x80,0x80,0x80,0x80,0x80,0x0
00019c ff07
00019d ffff
00019e ff07
00019f ffff      	.DB  0x7,0xFF,0xFF,0xFF,0x7,0xFF,0xFF,0xFF
0001a0 01c0
0001a1 0303
0001a2 0303
0001a3 0303      	.DB  0xC0,0x1,0x3,0x3,0x3,0x3,0x3,0x3
0001a4 0000
0001a5 0000
0001a6 0000
0001a7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001a8 0000
0001a9 0000
0001aa 0000
0001ab 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001ac 0000
0001ad 0000
0001ae 0000
0001af 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001b0 0000
0001b1 0000
0001b2 0000
0001b3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001b4 0000
0001b5 0000
0001b6 0000
0001b7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001b8 0300
0001b9 0303
0001ba 0303
0001bb 0303      	.DB  0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3
0001bc ff80
0001bd ffff
0001be 0100
0001bf 7f0f      	.DB  0x80,0xFF,0xFF,0xFF,0x0,0x1,0xF,0x7F
0001c0 fcff
0001c1 c0f0
0001c2 7000
0001c3 7878      	.DB  0xFF,0xFC,0xF0,0xC0,0x0,0x70,0x78,0x78
0001c4 3c3c
0001c5 001c
0001c6 0000
0001c7 0000      	.DB  0x3C,0x3C,0x1C,0x0,0x0,0x0,0x0,0x0
0001c8 0000
0001c9 0000
0001ca 0000
0001cb 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001cc 0000
0001cd 0000
0001ce 0000
0001cf 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001d0 0000
0001d1 0000
0001d2 0000
0001d3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001d4 0000
0001d5 0000
0001d6 0000
0001d7 3c1c      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x1C,0x3C
0001d8 783c
0001d9 7078
0001da c000
0001db fcf0      	.DB  0x3C,0x78,0x78,0x70,0x0,0xC0,0xF0,0xFC
0001dc 7fff
0001dd 010f
0001de 0000
0001df 0000      	.DB  0xFF,0x7F,0xF,0x1,0x0,0x0,0x0,0x0
0001e0 0300
0001e1 1f0f
0001e2 7e3f
0001e3 f0f8      	.DB  0x0,0x3,0xF,0x1F,0x3F,0x7E,0xF8,0xF0
0001e4 c0e0
0001e5 8080
0001e6 0000
0001e7 f0c0      	.DB  0xE0,0xC0,0x80,0x80,0x0,0x0,0xC0,0xF0
0001e8 fcfc
0001e9 003c
0001ea 0000
0001eb 0000      	.DB  0xFC,0xFC,0x3C,0x0,0x0,0x0,0x0,0x0
0001ec 0000
0001ed e000
0001ee e0e0
0001ef 0000      	.DB  0x0,0x0,0x0,0xE0,0xE0,0xE0,0x0,0x0
0001f0 0000
0001f1 0000
0001f2 0000
0001f3 7c3c      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x7C
0001f4 f8fc
0001f5 00e0
0001f6 0000
0001f7 c080      	.DB  0xFC,0xF8,0xE0,0x0,0x0,0x0,0x80,0xC0
0001f8 f0e0
0001f9 7cf8
0001fa 1f3f
0001fb 030f      	.DB  0xE0,0xF0,0xF8,0x7C,0x3F,0x1F,0xF,0x3
0001fc 0001
0001fd 0000
0001fe 0000
0001ff 0000      	.DB  0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000200 0000
000201 0000
000202 0000
000203 0100      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1
000204 0703
000205 0f07
000206 1e1f
000207 3c3e      	.DB  0x3,0x7,0x7,0xF,0x1F,0x1E,0x3E,0x3C
000208 783c
000209 7078
00020a f0f0
00020b e0e0      	.DB  0x3C,0x78,0x78,0x70,0xF0,0xF0,0xE0,0xE0
00020c e0e0
00020d efe0
00020e efef
00020f e0e0      	.DB  0xE0,0xE0,0xE0,0xEF,0xEF,0xEF,0xE0,0xE0
000210 e0e0
000211 f0e0
000212 f0f0
000213 7878      	.DB  0xE0,0xE0,0xE0,0xF0,0xF0,0xF0,0x78,0x78
000214 3c78
000215 1e3e
000216 0f1f
000217 0707      	.DB  0x78,0x3C,0x3E,0x1E,0x1F,0xF,0x7,0x7
000218 0103
000219 0000
00021a 0000
00021b 0000      	.DB  0x3,0x1,0x0,0x0,0x0,0x0,0x0,0x0
00021c 0000
00021d 0000      	.DB  0x0,0x0,0x0,0x0
                 _cos6data:
00021e 0000
00021f 000b
000220 0015
000221 001f      	.DB  0x0,0x0,0xB,0x0,0x15,0x0,0x1F,0x0
000222 0029
000223 0032
000224 003b
000225 0043      	.DB  0x29,0x0,0x32,0x0,0x3B,0x0,0x43,0x0
000226 004a
000227 0051
000228 0057
000229 005b      	.DB  0x4A,0x0,0x51,0x0,0x57,0x0,0x5B,0x0
00022a 005f
00022b 0062
00022c 0063
00022d 0064      	.DB  0x5F,0x0,0x62,0x0,0x63,0x0,0x64,0x0
00022e 0063
00022f 0062
000230 005f
000231 005b      	.DB  0x63,0x0,0x62,0x0,0x5F,0x0,0x5B,0x0
000232 0057
000233 0051
000234 004a
000235 0043      	.DB  0x57,0x0,0x51,0x0,0x4A,0x0,0x43,0x0
000236 003b
000237 0032
000238 0029
000239 001f      	.DB  0x3B,0x0,0x32,0x0,0x29,0x0,0x1F,0x0
00023a 0015
00023b 000b
00023c 0000
00023d fff6      	.DB  0x15,0x0,0xB,0x0,0x0,0x0,0xF6,0xFF
00023e ffeb
00023f ffe1
000240 ffd7
000241 ffce      	.DB  0xEB,0xFF,0xE1,0xFF,0xD7,0xFF,0xCE,0xFF
000242 ffc5
000243 ffbd
000244 ffb6
000245 ffaf      	.DB  0xC5,0xFF,0xBD,0xFF,0xB6,0xFF,0xAF,0xFF
000246 ffa9
000247 ffa5
000248 ffa1
000249 ff9e      	.DB  0xA9,0xFF,0xA5,0xFF,0xA1,0xFF,0x9E,0xFF
00024a ff9d
00024b ff9c
00024c ff9d
00024d ff9e      	.DB  0x9D,0xFF,0x9C,0xFF,0x9D,0xFF,0x9E,0xFF
00024e ffa1
00024f ffa5
000250 ffa9
000251 ffaf      	.DB  0xA1,0xFF,0xA5,0xFF,0xA9,0xFF,0xAF,0xFF
000252 ffb6
000253 ffbd
000254 ffc5
000255 ffce      	.DB  0xB6,0xFF,0xBD,0xFF,0xC5,0xFF,0xCE,0xFF
000256 ffd7
000257 ffe1
000258 ffeb
000259 fff5      	.DB  0xD7,0xFF,0xE1,0xFF,0xEB,0xFF,0xF5,0xFF
00025a 0000      	.DB  0x0,0x0
                 _sin6data:
00025b 0064
00025c 0063
00025d 0062
00025e 005f      	.DB  0x64,0x0,0x63,0x0,0x62,0x0,0x5F,0x0
00025f 005b
000260 0057
000261 0051
000262 004a      	.DB  0x5B,0x0,0x57,0x0,0x51,0x0,0x4A,0x0
000263 0043
000264 003b
000265 0032
000266 0029      	.DB  0x43,0x0,0x3B,0x0,0x32,0x0,0x29,0x0
000267 001f
000268 0015
000269 000a
00026a 0000      	.DB  0x1F,0x0,0x15,0x0,0xA,0x0,0x0,0x0
00026b fff6
00026c ffeb
00026d ffe1
00026e ffd7      	.DB  0xF6,0xFF,0xEB,0xFF,0xE1,0xFF,0xD7,0xFF
00026f ffce
000270 ffc5
000271 ffbd
000272 ffb6      	.DB  0xCE,0xFF,0xC5,0xFF,0xBD,0xFF,0xB6,0xFF
000273 ffaf
000274 ffa9
000275 ffa5
000276 ffa1      	.DB  0xAF,0xFF,0xA9,0xFF,0xA5,0xFF,0xA1,0xFF
000277 ff9e
000278 ff9d
000279 ff9c
00027a ff9d      	.DB  0x9E,0xFF,0x9D,0xFF,0x9C,0xFF,0x9D,0xFF
00027b ff9e
00027c ffa1
00027d ffa5
00027e ffa9      	.DB  0x9E,0xFF,0xA1,0xFF,0xA5,0xFF,0xA9,0xFF
00027f ffaf
000280 ffb6
000281 ffbd
000282 ffc5      	.DB  0xAF,0xFF,0xB6,0xFF,0xBD,0xFF,0xC5,0xFF
000283 ffce
000284 ffd7
000285 ffe1
000286 ffeb      	.DB  0xCE,0xFF,0xD7,0xFF,0xE1,0xFF,0xEB,0xFF
000287 fff5
000288 0000
000289 000a
00028a 0015      	.DB  0xF5,0xFF,0x0,0x0,0xA,0x0,0x15,0x0
00028b 001f
00028c 0029
00028d 0032
00028e 003b      	.DB  0x1F,0x0,0x29,0x0,0x32,0x0,0x3B,0x0
00028f 0043
000290 004a
000291 0051
000292 0056      	.DB  0x43,0x0,0x4A,0x0,0x51,0x0,0x56,0x0
000293 005b
000294 005f
000295 0062
000296 0063      	.DB  0x5B,0x0,0x5F,0x0,0x62,0x0,0x63,0x0
000297 0064      	.DB  0x64,0x0
                 _tbl10_G100:
000298 2710
000299 03e8
00029a 0064
00029b 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00029c 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00029d 1000
00029e 0100
00029f 0010
0002a0 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 __glcd_mask:
0002a1 0100
0002a2 0703
0002a3 1f0f
0002a4 7f3f      	.DB  0x0,0x1,0x3,0x7,0xF,0x1F,0x3F,0x7F
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1297): warning: .cseg .db misalignment - padding zero byte
0002a5 00ff      	.DB  0xFF
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
0002a6 0002      	.DW  0x0002
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
0002a7 0000
0002a8 0000      	.DB  0x0,0x0,0x0,0x0
0002a9 0000
0002aa 0000      	.DB  0x0,0x0,0x0,0x0
0002ab 0000      	.DB  0x0,0x0
                 
                 _0x0:
0002ac 6548
0002ad 6c6c
0002ae 2c6f
0002af 2020      	.DB  0x48,0x65,0x6C,0x6C,0x6F,0x2C,0x20,0x20
0002b0 4e45
0002b1 2044
0002b2 666f
0002b3 4f20      	.DB  0x45,0x4E,0x44,0x20,0x6F,0x66,0x20,0x4F
0002b4 4c4e
0002b5 4e49
0002b6 2045
0002b7 4c43      	.DB  0x4E,0x4C,0x49,0x4E,0x45,0x20,0x43,0x4C
0002b8 5341
0002b9 2053
0002ba 0a0d
0002bb 2020      	.DB  0x41,0x53,0x53,0x20,0xD,0xA,0x20,0x20
0002bc 2a20
0002bd 2a2a
0002be 2020
0002bf 2020      	.DB  0x20,0x2A,0x2A,0x2A,0x20,0x20,0x20,0x20
0002c0 4d20
0002c1 5341
0002c2 4554
0002c3 2052      	.DB  0x20,0x4D,0x41,0x53,0x54,0x45,0x52,0x20
0002c4 494d
0002c5 5243
0002c6 204f
0002c7 2032      	.DB  0x4D,0x49,0x43,0x52,0x4F,0x20,0x32,0x20
0002c8 2020
0002c9 2a20
0002ca 2a2a
0002cb 0d0d      	.DB  0x20,0x20,0x20,0x2A,0x2A,0x2A,0xD,0xD
0002cc 0a0d
0002cd 5400
0002ce 4d49
0002cf 3a45      	.DB  0xD,0xA,0x0,0x54,0x49,0x4D,0x45,0x3A
0002d0 0020
0002d1 0a0d
0002d2 5220
0002d3 6365      	.DB  0x20,0x0,0xD,0xA,0x20,0x52,0x65,0x63
0002d4 6965
0002d5 6976
0002d6 676e
0002d7 3a20      	.DB  0x65,0x69,0x76,0x69,0x6E,0x67,0x20,0x3A
0002d8 2020
0002d9 2020
0002da 2020
0002db 0020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0
0002dc 6425
0002dd 2020
0002de 2020
0002df 0d00      	.DB  0x25,0x64,0x20,0x20,0x20,0x20,0x0,0xD
0002e0 200a
0002e1 6553
0002e2 646e
0002e3 6e69      	.DB  0xA,0x20,0x53,0x65,0x6E,0x64,0x69,0x6E
0002e4 2067
0002e5 203a
0002e6 2020
0002e7 2020      	.DB  0x67,0x20,0x3A,0x20,0x20,0x20,0x20,0x20
0002e8 2020
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1325): warning: .cseg .db misalignment - padding zero byte
0002e9 0000      	.DB  0x20,0x20,0x0
                 _0x60003:
0002ea 0063
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1327): warning: .cseg .db misalignment - padding zero byte
0002eb 0063      	.DB  0x63,0x0,0x63
                 _0x60000:
0002ec 0a0d
0002ed 4120
0002ee 4344
0002ef 3d30      	.DB  0xD,0xA,0x20,0x41,0x44,0x43,0x30,0x3D
0002f0 6425
0002f1 6120
0002f2 6470
0002f3 7461      	.DB  0x25,0x64,0x20,0x61,0x70,0x64,0x61,0x74
0002f4 6465
0002f5 2121
0002f6 0d20
0002f7 000a      	.DB  0x65,0x64,0x21,0x21,0x20,0xD,0xA,0x0
                 _0xC0000:
0002f8 0a0d
0002f9 4120
0002fa 4344
0002fb 3d30      	.DB  0xD,0xA,0x20,0x41,0x44,0x43,0x30,0x3D
0002fc 6425
0002fd 0a0d
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1334): warning: .cseg .db misalignment - padding zero byte
0002fe 0000      	.DB  0x25,0x64,0xD,0xA,0x0
                 _0x100003:
0002ff 0600
000300 0c0a
000301 060a
000302 fa00      	.DB  0x0,0x6,0xA,0xC,0xA,0x6,0x0,0xFA
000303 f4f6
000304 faf6      	.DB  0xF6,0xF4,0xF6,0xFA
                 _0x100004:
000305 f6f4
000306 00fa
000307 0a06
000308 0a0c      	.DB  0xF4,0xF6,0xFA,0x0,0x6,0xA,0xC,0xA
000309 0006
00030a f6fa
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1340): warning: .cseg .db misalignment - padding zero byte
00030b 00f4      	.DB  0x6,0x0,0xFA,0xF6,0xF4
                 _0x100005:
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1342): warning: .cseg .db misalignment - padding zero byte
00030c 001e      	.DB  0x1E
                 _0x100006:
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1344): warning: .cseg .db misalignment - padding zero byte
00030d 001e      	.DB  0x1E
                 _0x100000:
00030e 6425
00030f 253a
000310 3a64
000311 6425      	.DB  0x25,0x64,0x3A,0x25,0x64,0x3A,0x25,0x64
000312 0020
000313 6548
000314 6c6c
000315 006f      	.DB  0x20,0x0,0x48,0x65,0x6C,0x6C,0x6F,0x0
000316 6954
000317 656d
000318 2500
000319 6432      	.DB  0x54,0x69,0x6D,0x65,0x0,0x25,0x32,0x64
00031a 253a
00031b 6432
00031c 253a
00031d 6432      	.DB  0x3A,0x25,0x32,0x64,0x3A,0x25,0x32,0x64
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1350): warning: .cseg .db misalignment - padding zero byte
00031e 0000      	.DB  0x0
                 _0x2020003:
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1352): warning: .cseg .db misalignment - padding zero byte
00031f 0007      	.DB  0x7
                 _0x20C0060:
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1354): warning: .cseg .db misalignment - padding zero byte
000320 0001      	.DB  0x1
                 _0x20C0000:
000321 4e2d
000322 4e41
000323 4900
000324 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\cvavr\BIN\work\az9\az9\master\Debug\List\slave.asm(1357): warning: .cseg .db misalignment - padding zero byte
000325 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000326 0001      	.DW  0x01
000327 0002      	.DW  0x02
000328 054c      	.DW  __REG_BIT_VARS*2
                 
000329 000a      	.DW  0x0A
00032a 0004      	.DW  0x04
00032b 054e      	.DW  __REG_VARS*2
                 
00032c 0043      	.DW  0x43
00032d 0160      	.DW  _0x3
00032e 0558      	.DW  _0x0*2
                 
00032f 0016      	.DW  0x16
000330 01a3      	.DW  _0x3+67
000331 05a2      	.DW  _0x0*2+74
                 
000332 0014      	.DW  0x14
000333 01b9      	.DW  _0x3+89
000334 05bf      	.DW  _0x0*2+103
                 
000335 0003      	.DW  0x03
000336 01da      	.DW  _data_spi
000337 05d4      	.DW  _0x60003*2
                 
000338 000c      	.DW  0x0C
000339 0400      	.DW  _hx
00033a 05fe      	.DW  _0x100003*2
                 
00033b 000d      	.DW  0x0D
00033c 040d      	.DW  _hy
00033d 060a      	.DW  _0x100004*2
                 
00033e 0001      	.DW  0x01
00033f 041a      	.DW  _xold
000340 0618      	.DW  _0x100005*2
                 
000341 0001      	.DW  0x01
000342 041b      	.DW  _yold
000343 061a      	.DW  _0x100006*2
                 
000344 0006      	.DW  0x06
000345 01cd      	.DW  _0x10000C
000346 0626      	.DW  _0x100000*2+10
                 
000347 0005      	.DW  0x05
000348 01d3      	.DW  _0x10000C+6
000349 062c      	.DW  _0x100000*2+16
                 
00034a 0001      	.DW  0x01
00034b 01e1      	.DW  _twi_result
00034c 063e      	.DW  _0x2020003*2
                 
00034d 0001      	.DW  0x01
00034e 0431      	.DW  __seed_G106
00034f 0640      	.DW  _0x20C0060*2
                 
                 _0xFFFFFFFF:
000350 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000351 94f8      	CLI
000352 27ee      	CLR  R30
000353 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000354 e0f1      	LDI  R31,1
000355 bffb      	OUT  GICR,R31
000356 bfeb      	OUT  GICR,R30
000357 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000358 e08d      	LDI  R24,(14-2)+1
000359 e0a2      	LDI  R26,2
00035a 27bb      	CLR  R27
                 __CLEAR_REG:
00035b 93ed      	ST   X+,R30
00035c 958a      	DEC  R24
00035d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00035e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00035f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000360 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000361 93ed      	ST   X+,R30
000362 9701      	SBIW R24,1
000363 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000364 e4ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000365 e0f6      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000366 9185      	LPM  R24,Z+
000367 9195      	LPM  R25,Z+
000368 9700      	SBIW R24,0
000369 f061      	BREQ __GLOBAL_INI_END
00036a 91a5      	LPM  R26,Z+
00036b 91b5      	LPM  R27,Z+
00036c 9005      	LPM  R0,Z+
00036d 9015      	LPM  R1,Z+
00036e 01bf      	MOVW R22,R30
00036f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000370 9005      	LPM  R0,Z+
000371 920d      	ST   X+,R0
000372 9701      	SBIW R24,1
000373 f7e1      	BRNE __GLOBAL_INI_LOOP
000374 01fb      	MOVW R30,R22
000375 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000376 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000377 bfed      	OUT  SPL,R30
000378 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000379 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00037a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00037b e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00037c 940c 037e 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <myheader.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <glcd_s.h>
                 ;#include <clock.h>
                 ;#include <timer.h>
                 ;
                 ;void main(void)
                 ; 0000 0007 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0008 
                 ; 0000 0009 char scr[];
                 ; 0000 000A 
                 ; 0000 000B char count1 = 0,count3;
                 ; 0000 000C 
                 ; 0000 000D master_micro=0;
                 ;	scr -> Y+0
                 ;	count1 -> R17
                 ;	count3 -> R16
00037e e010      	LDI  R17,0
00037f 94e8      	CLT
000380 f821      	BLD  R2,1
                 ; 0000 000E 
                 ; 0000 000F port_init();
000381 940e 03e2 	CALL _port_init
                 ; 0000 0010 spi_init_slave();
000383 940e 03ee 	CALL _spi_init_slave
                 ; 0000 0011 uart_init();
000385 940e 048b 	CALL _uart_init
                 ; 0000 0012 clock_display();
000387 940e 0640 	CALL _clock_display
                 ; 0000 0013 timer1_init();
000389 940e 061f 	CALL _timer1_init
                 ; 0000 0014 
                 ; 0000 0015 #asm("sei")
00038b 9478      	sei
                 ; 0000 0016 
                 ; 0000 0017 puts("Hello,  END of ONLINE CLASS \r\n   ***     MASTER MICRO 2    ***\r\r\r\n");
                +
00038c e6a0     +LDI R26 , LOW ( _0x3 + ( 0 ) )
00038d e0b1     +LDI R27 , HIGH ( _0x3 + ( 0 ) )
                 	__POINTW2MN _0x3,0
00038e 940e 0690 	CALL _puts
                 ; 0000 0018 
                 ; 0000 0019 sprintf(scr,"TIME: ");
000390 940e 102f 	CALL SUBOPT_0x0
                +
000392 e9eb     +LDI R30 , LOW ( 2 * _0x0 + ( 67 ) )
000393 e0f5     +LDI R31 , HIGH ( 2 * _0x0 + ( 67 ) )
                 	__POINTW1FN _0x0,67
000394 93fa      	ST   -Y,R31
000395 93ea      	ST   -Y,R30
000396 e080      	LDI  R24,0
000397 940e 0814 	CALL _sprintf
000399 9624      	ADIW R28,4
                 ; 0000 001A glcd_moveto(80,  32);
00039a e5e0      	LDI  R30,LOW(80)
00039b 93ea      	ST   -Y,R30
00039c e2a0      	LDI  R26,LOW(32)
00039d 940e 0e92 	CALL _glcd_moveto
                 ; 0000 001B glcd_outtext(scr);
00039f 01de      	MOVW R26,R28
0003a0 940e 0e3d 	CALL _glcd_outtext
                 ; 0000 001C 
                 ; 0000 001D 
                 ; 0000 001E I2C_Slave_Init(Slave_Address);
0003a2 e2a0      	LDI  R26,LOW(32)
0003a3 940e 0496 	CALL _I2C_Slave_Init
                 ; 0000 001F 
                 ; 0000 0020 
                 ; 0000 0021 
                 ; 0000 0022     while (1)
                 _0x4:
                 ; 0000 0023      {
                 ; 0000 0024 
                 ; 0000 0025 
                 ; 0000 0026     switch(I2C_Slave_Listen())    /* Check for SLA+W or SLA+R */
0003a5 940e 049d 	CALL _I2C_Slave_Listen
                 ; 0000 0027      {
                 ; 0000 0028         case 0:
0003a7 30e0      	CPI  R30,0
0003a8 f4b9      	BRNE _0xA
                 ; 0000 0029         {
                 ; 0000 002A           puts("\r\n Receiving :       ");
                +
0003a9 eaa3     +LDI R26 , LOW ( _0x3 + ( 67 ) )
0003aa e0b1     +LDI R27 , HIGH ( _0x3 + ( 67 ) )
                 	__POINTW2MN _0x3,67
0003ab 940e 0690 	CALL _puts
                 ; 0000 002B 
                 ; 0000 002C           do
                 _0xC:
                 ; 0000 002D           {
                 ; 0000 002E             count1 = I2C_Slave_Receive();/* Receive data byte*/
0003ad 940e 04e4 	CALL _I2C_Slave_Receive
0003af 2f1e      	MOV  R17,R30
                 ; 0000 002F 
                 ; 0000 0030             sprintf(scr, "%d    ", count1);
0003b0 940e 102f 	CALL SUBOPT_0x0
                +
0003b2 ebe8     +LDI R30 , LOW ( 2 * _0x0 + ( 96 ) )
0003b3 e0f5     +LDI R31 , HIGH ( 2 * _0x0 + ( 96 ) )
                 	__POINTW1FN _0x0,96
0003b4 93fa      	ST   -Y,R31
0003b5 93ea      	ST   -Y,R30
0003b6 2fe1      	MOV  R30,R17
0003b7 940e 1033 	CALL SUBOPT_0x1
                 ; 0000 0031             puts(scr);
0003b9 01de      	MOVW R26,R28
0003ba 940e 0690 	CALL _puts
                 ; 0000 0032 
                 ; 0000 0033 
                 ; 0000 0034           }while (count1 != 255); /* Receive until STOP/REPEATED START */
0003bc 3f1f      	CPI  R17,255
0003bd f779      	BRNE _0xC
                 ; 0000 0035 		  count1 = 0;
0003be e010      	LDI  R17,LOW(0)
                 ; 0000 0036 		  break;
0003bf c020      	RJMP _0x9
                 ; 0000 0037 		}
                 ; 0000 0038 	    case 1:
                 _0xA:
0003c0 30e1      	CPI  R30,LOW(0x1)
0003c1 f4f1      	BRNE _0x12
                 ; 0000 0039 		{
                 ; 0000 003A 		  char Ack_status;
                 ; 0000 003B           count3=10;
0003c2 9721      	SBIW R28,1
                 ;	scr -> Y+1
                 ;	Ack_status -> Y+0
0003c3 e00a      	LDI  R16,LOW(10)
                 ; 0000 003C 		  puts("\r\n Sending :       ");
                +
0003c4 eba9     +LDI R26 , LOW ( _0x3 + ( 89 ) )
0003c5 e0b1     +LDI R27 , HIGH ( _0x3 + ( 89 ) )
                 	__POINTW2MN _0x3,89
0003c6 940e 0690 	CALL _puts
                 ; 0000 003D 		  do
                 _0x10:
                 ; 0000 003E 		  {
                 ; 0000 003F 		    Ack_status = I2C_Slave_Transmit(count3);/* Send data byte */
0003c8 2fa0      	MOV  R26,R16
0003c9 940e 04be 	CALL _I2C_Slave_Transmit
0003cb 83e8      	ST   Y,R30
                 ; 0000 0040 
                 ; 0000 0041 		    sprintf(scr, "%d    ",count3);
0003cc 01fe      	MOVW R30,R28
0003cd 9631      	ADIW R30,1
0003ce 93fa      	ST   -Y,R31
0003cf 93ea      	ST   -Y,R30
                +
0003d0 ebe8     +LDI R30 , LOW ( 2 * _0x0 + ( 96 ) )
0003d1 e0f5     +LDI R31 , HIGH ( 2 * _0x0 + ( 96 ) )
                 	__POINTW1FN _0x0,96
0003d2 93fa      	ST   -Y,R31
0003d3 93ea      	ST   -Y,R30
0003d4 2fe0      	MOV  R30,R16
0003d5 940e 1033 	CALL SUBOPT_0x1
                 ; 0000 0042 		    puts(scr);
0003d7 01de      	MOVW R26,R28
0003d8 9611      	ADIW R26,1
0003d9 940e 0690 	CALL _puts
                 ; 0000 0043 		    count3++;
0003db 5f0f      	SUBI R16,-1
                 ; 0000 0044 		  } while (Ack_status == 0);/* Send until Ack is receive */
0003dc 81e8      	LD   R30,Y
0003dd 30e0      	CPI  R30,0
0003de f349      	BREQ _0x10
                 ; 0000 0045 		  break;
0003df 9621      	ADIW R28,1
                 ; 0000 0046 		}
                 ; 0000 0047 	    default:
                 _0x12:
                 ; 0000 0048 		break;
                 ; 0000 0049 	 }
                 _0x9:
                 ; 0000 004A      }
0003e0 cfc4      	RJMP _0x4
                 ; 0000 004B  }
                 _0x13:
0003e1 cfff      	RJMP _0x13
                 ; .FEND
                 
                 	.DSEG
                 _0x3:
000160           	.BYTE 0x6D
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ; #include <myheader.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void port_init(void)
                 ; 0002 0005 {
                 
                 	.CSEG
                 _port_init:
                 ; .FSTART _port_init
                 ; 0002 0006 // Declare your local variables here
                 ; 0002 0007 
                 ; 0002 0008 // Input/Output Ports initialization
                 ; 0002 0009 // Port A initialization
                 ; 0002 000A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0002 000B DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0003e2 e0e0      	LDI  R30,LOW(0)
0003e3 bbea      	OUT  0x1A,R30
                 ; 0002 000C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0002 000D PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0003e4 bbeb      	OUT  0x1B,R30
                 ; 0002 000E 
                 ; 0002 000F // Port B initialization
                 ; 0002 0010 // Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0002 0011 DDRB=(1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0003e5 ebe0      	LDI  R30,LOW(176)
0003e6 bbe7      	OUT  0x17,R30
                 ; 0002 0012 // State: Bit7=0 Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0002 0013 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0003e7 e0e0      	LDI  R30,LOW(0)
0003e8 bbe8      	OUT  0x18,R30
                 ; 0002 0014 
                 ; 0002 0015 // Port C initialization
                 ; 0002 0016 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0002 0017 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0003e9 bbe4      	OUT  0x14,R30
                 ; 0002 0018 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0002 0019 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0003ea bbe5      	OUT  0x15,R30
                 ; 0002 001A 
                 ; 0002 001B // Port D initialization
                 ; 0002 001C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0002 001D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0003eb bbe1      	OUT  0x11,R30
                 ; 0002 001E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0002 001F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0003ec bbe2      	OUT  0x12,R30
                 ; 0002 0020  }
0003ed 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ; #include <myheader.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ; int data_spi[2]={99,99};
                 
                 	.DSEG
                 ; char num_data_spi=0;
                 ; bit new_data_spi=0;
                 ; bit master_micro=1;
                 ;
                 ; void spi_init(void)
                 ; 0003 000A {
                 
                 	.CSEG
                 ; 0003 000B // SPI initialization
                 ; 0003 000C // SPI Type: Master
                 ; 0003 000D // SPI Clock Rate: 2000.000 kHz
                 ; 0003 000E // SPI Clock Phase: Cycle Start
                 ; 0003 000F // SPI Clock Polarity: Low
                 ; 0003 0010 // SPI Data Order: MSB First
                 ; 0003 0011 SPCR=(1<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
                 ; 0003 0012 SPSR=(0<<SPI2X);
                 ; 0003 0013 
                 ; 0003 0014 // Clear the SPI interrupt flag
                 ; 0003 0015 #asm
                 ; 0003 0016     in   r30,spsr
                 ; 0003 0017     in   r30,spdr
                 ; 0003 0018 #endasm
                 ; 0003 0019 
                 ; 0003 001A 
                 ; 0003 001B }
                 ; void spi_init_slave(void)
                 ; 0003 001D {
                 _spi_init_slave:
                 ; .FSTART _spi_init_slave
                 ; 0003 001E 
                 ; 0003 001F 
                 ; 0003 0020 
                 ; 0003 0021 // SPI initialization
                 ; 0003 0022 // SPI Type: Slave
                 ; 0003 0023 // SPI Clock Rate: 2000.000 kHz
                 ; 0003 0024 // SPI Clock Phase: Cycle Start
                 ; 0003 0025 // SPI Clock Polarity: Low
                 ; 0003 0026 // SPI Data Order: MSB First
                 ; 0003 0027 SPCR=(1<<SPIE) | (1<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0003ee ece0      	LDI  R30,LOW(192)
0003ef b9ed      	OUT  0xD,R30
                 ; 0003 0028 SPSR=(0<<SPI2X);
0003f0 e0e0      	LDI  R30,LOW(0)
0003f1 b9ee      	OUT  0xE,R30
                 ; 0003 0029 
                 ; 0003 002A #asm
                 ; 0003 002B     in   r30,spsr
0003f2 b1ee          in   r30,spsr
                 ; 0003 002C     in   r30,spdr
0003f3 b1ef          in   r30,spdr
                 ; 0003 002D #endasm
                 ; 0003 002E 
                 ; 0003 002F 
                 ; 0003 0030 
                 ; 0003 0031 }
0003f4 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [SPI_STC] void spi_isr(void)
                 ; 0003 0034 {
                 _spi_isr:
                 ; .FSTART _spi_isr
0003f5 940e 103d 	CALL SUBOPT_0x2
                 ; 0003 0035 //unsigned char data;
                 ; 0003 0036 //data_spi[0]=SPDR;
                 ; 0003 0037 char scr[20];
                 ; 0003 0038 
                 ; 0003 0039 
                 ; 0003 003A data_spi[num_data_spi]=SPDR;
0003f7 9764      	SBIW R28,20
                 ;	scr -> Y+0
0003f8 91e0 01de 	LDS  R30,_num_data_spi
0003fa edaa      	LDI  R26,LOW(_data_spi)
0003fb e0b1      	LDI  R27,HIGH(_data_spi)
0003fc e0f0      	LDI  R31,0
0003fd 0fee      	LSL  R30
0003fe 1fff      	ROL  R31
0003ff 0fae      	ADD  R26,R30
000400 1fbf      	ADC  R27,R31
000401 b1ef      	IN   R30,0xF
000402 e0f0      	LDI  R31,0
000403 93ed      	ST   X+,R30
000404 93fc      	ST   X,R31
                 ; 0003 003B num_data_spi++;
000405 91e0 01de 	LDS  R30,_num_data_spi
000407 5fef      	SUBI R30,-LOW(1)
000408 93e0 01de 	STS  _num_data_spi,R30
                 ; 0003 003C if (num_data_spi==2)
00040a 91a0 01de 	LDS  R26,_num_data_spi
00040c 30a2      	CPI  R26,LOW(0x2)
00040d f429      	BRNE _0x60004
                 ; 0003 003D {
                 ; 0003 003E new_data_spi=1;
00040e 9468      	SET
00040f f820      	BLD  R2,0
                 ; 0003 003F num_data_spi=0;
000410 e0e0      	LDI  R30,LOW(0)
000411 93e0 01de 	STS  _num_data_spi,R30
                 ; 0003 0040 }
                 ; 0003 0041 if (master_micro==0)
                 _0x60004:
000413 fc21      	SBRC R2,1
000414 c020      	RJMP _0x60005
                 ; 0003 0042 {
                 ; 0003 0043             if (new_data_spi==1)
000415 fe20      	SBRS R2,0
000416 c01e      	RJMP _0x60006
                 ; 0003 0044        {
                 ; 0003 0045        sprintf(scr,"\r\n ADC0=%d apdated!! \r\n",((data_spi[0]&0x00ff)|(data_spi[1]<<8)));
000417 940e 102f 	CALL SUBOPT_0x0
                +
000419 ede8     +LDI R30 , LOW ( 2 * _0x60000 + ( 0 ) )
00041a e0f5     +LDI R31 , HIGH ( 2 * _0x60000 + ( 0 ) )
                 	__POINTW1FN _0x60000,0
00041b 93fa      	ST   -Y,R31
00041c 93ea      	ST   -Y,R30
00041d 91e0 01da 	LDS  R30,_data_spi
00041f 91f0 01db 	LDS  R31,_data_spi+1
000421 70f0      	ANDI R31,HIGH(0xFF)
000422 01df      	MOVW R26,R30
                +
000423 91f0 01dc+LDS R31 , _data_spi + ( 2 )
                 	__GETB1HMN _data_spi,2
000425 e0e0      	LDI  R30,LOW(0)
000426 2bea      	OR   R30,R26
000427 2bfb      	OR   R31,R27
000428 940e 11a6 	CALL __CWD1
00042a 940e 120b 	CALL __PUTPARD1
00042c e084      	LDI  R24,4
00042d 940e 0814 	CALL _sprintf
00042f 9628      	ADIW R28,8
                 ; 0003 0046         puts(scr);
000430 01de      	MOVW R26,R28
000431 940e 0690 	CALL _puts
                 ; 0003 0047        new_data_spi=0;
000433 94e8      	CLT
000434 f820      	BLD  R2,0
                 ; 0003 0048        }
                 ; 0003 0049  }
                 _0x60006:
                 ; 0003 004A }
                 _0x60005:
000435 9664      	ADIW R28,20
000436 940e 104b 	CALL SUBOPT_0x3
000438 9518      	RETI
                 ; .FEND
                 ;
                 ; #include <myheader.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 256
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0004 0022 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000439 93ea      	ST   -Y,R30
00043a 93fa      	ST   -Y,R31
00043b b7ef      	IN   R30,SREG
00043c 93ea      	ST   -Y,R30
                 ; 0004 0023 char status,data;
                 ; 0004 0024 status=UCSRA;
00043d 931a      	ST   -Y,R17
00043e 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00043f b11b      	IN   R17,11
                 ; 0004 0025 data=UDR;
000440 b10c      	IN   R16,12
                 ; 0004 0026 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000441 2fe1      	MOV  R30,R17
000442 71ec      	ANDI R30,LOW(0x1C)
000443 f461      	BRNE _0x80003
                 ; 0004 0027    {
                 ; 0004 0028    rx_buffer[rx_wr_index++]=data;
000444 2de5      	MOV  R30,R5
000445 9453      	INC  R5
000446 e0f0      	LDI  R31,0
000447 50e1      	SUBI R30,LOW(-_rx_buffer)
000448 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000449 8300      	ST   Z,R16
                 ; 0004 0029 #if RX_BUFFER_SIZE == 256
                 ; 0004 002A    // special case for receiver buffer size=256
                 ; 0004 002B    if (++rx_counter == 0) rx_buffer_overflow=1;
00044a 01f3      	MOVW R30,R6
00044b 9631      	ADIW R30,1
00044c 013f      	MOVW R6,R30
00044d f411      	BRNE _0x80004
00044e 9468      	SET
00044f f822      	BLD  R2,2
                 ; 0004 002C #else
                 ; 0004 002D    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
                 ; 0004 002E    if (++rx_counter == RX_BUFFER_SIZE)
                 ; 0004 002F       {
                 ; 0004 0030       rx_counter=0;
                 ; 0004 0031       rx_buffer_overflow=1;
                 ; 0004 0032       }
                 ; 0004 0033 #endif
                 ; 0004 0034    }
                 _0x80004:
                 ; 0004 0035 }
                 _0x80003:
000450 9109      	LD   R16,Y+
000451 9119      	LD   R17,Y+
000452 91e9      	LD   R30,Y+
000453 bfef      	OUT  SREG,R30
000454 91f9      	LD   R31,Y+
000455 91e9      	LD   R30,Y+
000456 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0004 003C {
                 ; 0004 003D char data;
                 ; 0004 003E while (rx_counter==0);
                 ;	data -> R17
                 ; 0004 003F data=rx_buffer[rx_rd_index++];
                 ; 0004 0040 #if RX_BUFFER_SIZE != 256
                 ; 0004 0041 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0004 0042 #endif
                 ; 0004 0043 #asm("cli")
                 ; 0004 0044 --rx_counter;
                 ; 0004 0045 #asm("sei")
                 ; 0004 0046 return data;
                 ; 0004 0047 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 256
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;#else
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter=0;
                 ;#else
                 ;unsigned int tx_counter=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0004 005D {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
000457 920a      	ST   -Y,R0
000458 93ea      	ST   -Y,R30
000459 93fa      	ST   -Y,R31
00045a b7ef      	IN   R30,SREG
00045b 93ea      	ST   -Y,R30
                 ; 0004 005E if (tx_counter)
00045c 2c0a      	MOV  R0,R10
00045d 280b      	OR   R0,R11
00045e f051      	BREQ _0x80008
                 ; 0004 005F    {
                 ; 0004 0060    --tx_counter;
00045f 01f5      	MOVW R30,R10
000460 9731      	SBIW R30,1
000461 015f      	MOVW R10,R30
                 ; 0004 0061    UDR=tx_buffer[tx_rd_index++];
000462 2de8      	MOV  R30,R8
000463 9483      	INC  R8
000464 e0f0      	LDI  R31,0
000465 50e1      	SUBI R30,LOW(-_tx_buffer)
000466 4ffd      	SBCI R31,HIGH(-_tx_buffer)
000467 81e0      	LD   R30,Z
000468 b9ec      	OUT  0xC,R30
                 ; 0004 0062 #if TX_BUFFER_SIZE != 256
                 ; 0004 0063    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
                 ; 0004 0064 #endif
                 ; 0004 0065    }
                 ; 0004 0066 }
                 _0x80008:
000469 91e9      	LD   R30,Y+
00046a bfef      	OUT  SREG,R30
00046b 91f9      	LD   R31,Y+
00046c 91e9      	LD   R30,Y+
00046d 9009      	LD   R0,Y+
00046e 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0004 006D {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0004 006E while (tx_counter == TX_BUFFER_SIZE);
00046f 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x80009:
000470 e0e0      	LDI  R30,LOW(256)
000471 e0f1      	LDI  R31,HIGH(256)
000472 15ea      	CP   R30,R10
000473 05fb      	CPC  R31,R11
000474 f3d9      	BREQ _0x80009
                 ; 0004 006F #asm("cli")
000475 94f8      	cli
                 ; 0004 0070 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
000476 2c0a      	MOV  R0,R10
000477 280b      	OR   R0,R11
000478 f411      	BRNE _0x8000D
000479 995d      	SBIC 0xB,5
00047a c00b      	RJMP _0x8000C
                 _0x8000D:
                 ; 0004 0071    {
                 ; 0004 0072    tx_buffer[tx_wr_index++]=c;
00047b 2de9      	MOV  R30,R9
00047c 9493      	INC  R9
00047d e0f0      	LDI  R31,0
00047e 50e1      	SUBI R30,LOW(-_tx_buffer)
00047f 4ffd      	SBCI R31,HIGH(-_tx_buffer)
000480 81a8      	LD   R26,Y
000481 83a0      	STD  Z+0,R26
                 ; 0004 0073 #if TX_BUFFER_SIZE != 256
                 ; 0004 0074    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
                 ; 0004 0075 #endif
                 ; 0004 0076    ++tx_counter;
000482 01f5      	MOVW R30,R10
000483 9631      	ADIW R30,1
000484 015f      	MOVW R10,R30
                 ; 0004 0077    }
                 ; 0004 0078 else
000485 c002      	RJMP _0x8000F
                 _0x8000C:
                 ; 0004 0079    UDR=c;
000486 81e8      	LD   R30,Y
000487 b9ec      	OUT  0xC,R30
                 ; 0004 007A #asm("sei")
                 _0x8000F:
000488 9478      	sei
                 ; 0004 007B }
000489 940c 0a1b 	JMP  _0x214000B
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;void uart_init(void)
                 ; 0004 0084 {
                 _uart_init:
                 ; .FSTART _uart_init
                 ; 0004 0085 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
00048b e0e0      	LDI  R30,LOW(0)
00048c b9eb      	OUT  0xB,R30
                 ; 0004 0086 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00048d ede8      	LDI  R30,LOW(216)
00048e b9ea      	OUT  0xA,R30
                 ; 0004 0087 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
00048f e8e6      	LDI  R30,LOW(134)
000490 bde0      	OUT  0x20,R30
                 ; 0004 0088 UBRRH=0x00;
000491 e0e0      	LDI  R30,LOW(0)
000492 bde0      	OUT  0x20,R30
                 ; 0004 0089 UBRRL=0x33;
000493 e3e3      	LDI  R30,LOW(51)
000494 b9e9      	OUT  0x9,R30
                 ; 0004 008A  }
000495 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;/*
                 ; * I2C_Master_C_file.c
                 ; *
                 ; */
                 ;
                 ;#include <myheader.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;
                 ;                            /* Include I2C header file */
                 ;
                 ;void I2C_Init2()                                                /* I2C initialize function */
                 ; 0005 000D {
                 
                 	.CSEG
                 ; 0005 000E     TWBR = BITRATE(TWSR = 0x00);                            /* Get bit rate register value by formula */
                 ; 0005 000F }
                 ;
                 ;
                 ;char I2C_Start2(char write_address)                        /* I2C start function */
                 ; 0005 0013 {
                 ; 0005 0014     char status;                                            /* Declare variable */
                 ; 0005 0015     TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);                    /* Enable TWI, generate start condition and clear interru ...
                 ;	write_address -> Y+1
                 ;	status -> R17
                 ; 0005 0016     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (start condition)  ...
                 ; 0005 0017     status = TWSR & 0xF8;                                    /* Read TWI status register with masking lower three bits * ...
                 ; 0005 0018     if (status != 0x08)                                        /* Check weather start condition transmitted successfully ...
                 ; 0005 0019     return 0;                                                /* If not then return 0 to indicate start condition fail */
                 ; 0005 001A     TWDR = write_address;                                    /* If yes then write SLA+W in TWI data register */
                 ; 0005 001B     TWCR = (1<<TWEN)|(1<<TWINT);                            /* Enable TWI and clear interrupt flag */
                 ; 0005 001C     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (Write operation)  ...
                 ; 0005 001D     status = TWSR & 0xF8;                                    /* Read TWI status register with masking lower three bits * ...
                 ; 0005 001E     if (status == 0x18)                                        /* Check weather SLA+W transmitted & ack received or not? ...
                 ; 0005 001F     return 1;                                                /* If yes then return 1 to indicate ack received i.e. ready ...
                 ; 0005 0020     if (status == 0x20)                                        /* Check weather SLA+W transmitted & nack received or not ...
                 ; 0005 0021     return 2;                                                /* If yes then return 2 to indicate nack received i.e. devi ...
                 ; 0005 0022     else
                 ; 0005 0023     return 3;                                                /* Else return 3 to indicate SLA+W failed */
                 ; 0005 0024 }
                 ;
                 ;char I2C_Repeated_Start(char read_address)                /* I2C repeated start function */
                 ; 0005 0027 {
                 ; 0005 0028     char status;                                            /* Declare variable */
                 ; 0005 0029     TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);                    /* Enable TWI, generate start condition and clear interru ...
                 ;	read_address -> Y+1
                 ;	status -> R17
                 ; 0005 002A     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (start condition)  ...
                 ; 0005 002B     status = TWSR & 0xF8;                                    /* Read TWI status register with masking lower three bits * ...
                 ; 0005 002C     if (status != 0x10)                                        /* Check weather repeated start condition transmitted suc ...
                 ; 0005 002D     return 0;                                                /* If no then return 0 to indicate repeated start condition ...
                 ; 0005 002E     TWDR = read_address;                                    /* If yes then write SLA+R in TWI data register */
                 ; 0005 002F     TWCR = (1<<TWEN)|(1<<TWINT);                            /* Enable TWI and clear interrupt flag */
                 ; 0005 0030     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (Write operation)  ...
                 ; 0005 0031     status = TWSR & 0xF8;                                    /* Read TWI status register with masking lower three bits * ...
                 ; 0005 0032     if (status == 0x40)                                        /* Check weather SLA+R transmitted & ack received or not? ...
                 ; 0005 0033     return 1;                                                /* If yes then return 1 to indicate ack received */
                 ; 0005 0034     if (status == 0x20)                                        /* Check weather SLA+R transmitted & nack received or not ...
                 ; 0005 0035     return 2;                                                /* If yes then return 2 to indicate nack received i.e. devi ...
                 ; 0005 0036     else
                 ; 0005 0037     return 3;                                                /* Else return 3 to indicate SLA+W failed */
                 ; 0005 0038 }
                 ;
                 ;void I2C_Stop2()                                                /* I2C stop function */
                 ; 0005 003B {
                 ; 0005 003C     TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);                    /* Enable TWI, generate stop condition and clear interrupt  ...
                 ; 0005 003D     while(TWCR & (1<<TWSTO));                                /* Wait until stop condition execution */
                 ; 0005 003E }
                 ;
                 ;void I2C_Start_Wait(char write_address)                        /* I2C start wait function */
                 ; 0005 0041 {
                 ; 0005 0042     char status;                                            /* Declare variable */
                 ; 0005 0043     while (1)
                 ;	write_address -> Y+1
                 ;	status -> R17
                 ; 0005 0044     {
                 ; 0005 0045         TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);                /* Enable TWI, generate start condition and clear interru ...
                 ; 0005 0046         while (!(TWCR & (1<<TWINT)));                        /* Wait until TWI finish its current job (start condition)  ...
                 ; 0005 0047         status = TWSR & 0xF8;                                /* Read TWI status register with masking lower three bits * ...
                 ; 0005 0048         if (status != 0x08)                                    /* Check weather start condition transmitted successfully ...
                 ; 0005 0049         continue;                                            /* If no then continue with start loop again */
                 ; 0005 004A         TWDR = write_address;                                /* If yes then write SLA+W in TWI data register */
                 ; 0005 004B         TWCR = (1<<TWEN)|(1<<TWINT);                        /* Enable TWI and clear interrupt flag */
                 ; 0005 004C         while (!(TWCR & (1<<TWINT)));                        /* Wait until TWI finish its current job (Write operation)  ...
                 ; 0005 004D         status = TWSR & 0xF8;                                /* Read TWI status register with masking lower three bits * ...
                 ; 0005 004E         if (status != 0x18 )                                /* Check weather SLA+W transmitted & ack received or not? */
                 ; 0005 004F         {
                 ; 0005 0050             I2C_Stop2();                                        /* If not then generate stop condition */
                 ; 0005 0051             //i2c_stop();
                 ; 0005 0052             continue;                                        /* continue with start loop again */
                 ; 0005 0053         }
                 ; 0005 0054         break;                                                /* If yes then break loop */
                 ; 0005 0055     }
                 ; 0005 0056 }
                 ;
                 ;char I2C_Write2(char data)                                /* I2C write function */
                 ; 0005 0059 {
                 ; 0005 005A     char status;                                            /* Declare variable */
                 ; 0005 005B     TWDR = data;                                            /* Copy data in TWI data register */
                 ;	data -> Y+1
                 ;	status -> R17
                 ; 0005 005C     TWCR = (1<<TWEN)|(1<<TWINT);                            /* Enable TWI and clear interrupt flag */
                 ; 0005 005D     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (Write operation)  ...
                 ; 0005 005E     status = TWSR & 0xF8;                                    /* Read TWI status register with masking lower three bits * ...
                 ; 0005 005F     if (status == 0x28)                                        /* Check weather data transmitted & ack received or not?  ...
                 ; 0005 0060     return 0;                                                /* If yes then return 0 to indicate ack received */
                 ; 0005 0061     if (status == 0x30)                                        /* Check weather data transmitted & nack received or not? ...
                 ; 0005 0062     return 1;                                                /* If yes then return 1 to indicate nack received */
                 ; 0005 0063     else
                 ; 0005 0064     return 2;                                                /* Else return 2 to indicate data transmission failed */
                 ; 0005 0065 }
                 ;
                 ;char I2C_Read_Ack()                                            /* I2C read ack function */
                 ; 0005 0068 {
                 ; 0005 0069     TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);                    /* Enable TWI, generation of ack and clear interrupt flag */
                 ; 0005 006A     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (read operation) * ...
                 ; 0005 006B     return TWDR;                                            /* Return received data */
                 ; 0005 006C }
                 ;
                 ;char I2C_Read_Nack()                                        /* I2C read nack function */
                 ; 0005 006F {
                 ; 0005 0070     TWCR=(1<<TWEN)|(1<<TWINT);                                /* Enable TWI and clear interrupt flag */
                 ; 0005 0071     while (!(TWCR & (1<<TWINT)));                            /* Wait until TWI finish its current job (read operation) * ...
                 ; 0005 0072     return TWDR;                                            /* Return received data */
                 ; 0005 0073 }
                 ;
                 ;
                 ;
                 ;void I2C_Slave_Init(char slave_address)
                 ; 0005 0078 {
                 _I2C_Slave_Init:
                 ; .FSTART _I2C_Slave_Init
                 ; 0005 0079 	TWAR = slave_address;						/* Assign address in TWI address register */
000496 93aa      	ST   -Y,R26
                 ;	slave_address -> Y+0
000497 81e8      	LD   R30,Y
000498 b9e2      	OUT  0x2,R30
                 ; 0005 007A 	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);	/* Enable TWI, Enable ack generation, clear TWI interrupt */
000499 ece4      	LDI  R30,LOW(196)
00049a bfe6      	OUT  0x36,R30
                 ; 0005 007B }
00049b 940c 0a1b 	JMP  _0x214000B
                 ; .FEND
                 ;
                 ;char I2C_Slave_Listen()
                 ; 0005 007E {
                 _I2C_Slave_Listen:
                 ; .FSTART _I2C_Slave_Listen
                 ; 0005 007F 	while(1)
                 _0xA0031:
                 ; 0005 0080 	{
                 ; 0005 0081 		char status;							/* Declare variable */
                 ; 0005 0082 		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
00049d 9721      	SBIW R28,1
                 ;	status -> Y+0
                 _0xA0034:
00049e b7e6      	IN   R30,0x36
00049f 78e0      	ANDI R30,LOW(0x80)
0004a0 f3e9      	BREQ _0xA0034
                 ; 0005 0083 		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
0004a1 b1e1      	IN   R30,0x1
0004a2 7fe8      	ANDI R30,LOW(0xF8)
0004a3 83e8      	ST   Y,R30
                 ; 0005 0084 		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
0004a4 81a8      	LD   R26,Y
0004a5 36a0      	CPI  R26,LOW(0x60)
0004a6 f011      	BREQ _0xA0038
0004a7 36a8      	CPI  R26,LOW(0x68)
0004a8 f419      	BRNE _0xA0037
                 _0xA0038:
                 ; 0005 0085 		return 0;								/* If yes then return 0 to indicate ack returned */
0004a9 e0e0      	LDI  R30,LOW(0)
0004aa 940c 0a1b 	JMP  _0x214000B
                 ; 0005 0086 		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
                 _0xA0037:
0004ac 81a8      	LD   R26,Y
0004ad 3aa8      	CPI  R26,LOW(0xA8)
0004ae f011      	BREQ _0xA003B
0004af 3ba0      	CPI  R26,LOW(0xB0)
0004b0 f419      	BRNE _0xA003A
                 _0xA003B:
                 ; 0005 0087 		return 1;								/* If yes then return 1 to indicate ack returned */
0004b1 e0e1      	LDI  R30,LOW(1)
0004b2 940c 0a1b 	JMP  _0x214000B
                 ; 0005 0088 		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
                 _0xA003A:
0004b4 81a8      	LD   R26,Y
0004b5 37a0      	CPI  R26,LOW(0x70)
0004b6 f011      	BREQ _0xA003E
0004b7 37a8      	CPI  R26,LOW(0x78)
0004b8 f419      	BRNE _0xA003D
                 _0xA003E:
                 ; 0005 0089 		return 2;								/* If yes then return 2 to indicate ack returned */
0004b9 e0e2      	LDI  R30,LOW(2)
0004ba 940c 0a1b 	JMP  _0x214000B
                 ; 0005 008A 		else
                 _0xA003D:
                 ; 0005 008B 		continue;								/* Else continue */
0004bc 9621      	ADIW R28,1
0004bd cfdf      	RJMP _0xA0031
                 ; 0005 008C 	}
                 ; 0005 008D }
                 ; .FEND
                 ;
                 ;char I2C_Slave_Transmit(char data)
                 ; 0005 0090 {
                 _I2C_Slave_Transmit:
                 ; .FSTART _I2C_Slave_Transmit
                 ; 0005 0091 	char status;
                 ; 0005 0092 	TWDR = data;								/* Write data to TWDR to be transmitted */
0004be 93aa      	ST   -Y,R26
0004bf 931a      	ST   -Y,R17
                 ;	data -> Y+1
                 ;	status -> R17
0004c0 81e9      	LDD  R30,Y+1
0004c1 b9e3      	OUT  0x3,R30
                 ; 0005 0093 	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);		/* Enable TWI and clear interrupt flag */
0004c2 ece4      	LDI  R30,LOW(196)
0004c3 bfe6      	OUT  0x36,R30
                 ; 0005 0094 	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (Write operation) */
                 _0xA0041:
0004c4 b7e6      	IN   R30,0x36
0004c5 78e0      	ANDI R30,LOW(0x80)
0004c6 f3e9      	BREQ _0xA0041
                 ; 0005 0095 	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
0004c7 b1e1      	IN   R30,0x1
0004c8 7fe8      	ANDI R30,LOW(0xF8)
0004c9 2f1e      	MOV  R17,R30
                 ; 0005 0096 	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
0004ca 3a10      	CPI  R17,160
0004cb f429      	BRNE _0xA0044
                 ; 0005 0097 	{
                 ; 0005 0098 		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
0004cc b7e6      	IN   R30,0x36
0004cd 68e0      	ORI  R30,0x80
0004ce bfe6      	OUT  0x36,R30
                 ; 0005 0099 		return -1;
0004cf efef      	LDI  R30,LOW(255)
0004d0 c010      	RJMP _0x214000E
                 ; 0005 009A 	}
                 ; 0005 009B 	if (status == 0xB8)							/* Check weather data transmitted & ack received */
                 _0xA0044:
0004d1 3b18      	CPI  R17,184
0004d2 f411      	BRNE _0xA0045
                 ; 0005 009C 		return 0;									/* If yes then return 0 */
0004d3 e0e0      	LDI  R30,LOW(0)
0004d4 c00c      	RJMP _0x214000E
                 ; 0005 009D 	if (status == 0xC0)							/* Check weather data transmitted & nack received */
                 _0xA0045:
0004d5 3c10      	CPI  R17,192
0004d6 f429      	BRNE _0xA0046
                 ; 0005 009E 	{
                 ; 0005 009F 		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -2 */
0004d7 b7e6      	IN   R30,0x36
0004d8 68e0      	ORI  R30,0x80
0004d9 bfe6      	OUT  0x36,R30
                 ; 0005 00A0 		return -2;
0004da efee      	LDI  R30,LOW(254)
0004db c005      	RJMP _0x214000E
                 ; 0005 00A1 	}
                 ; 0005 00A2 	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
                 _0xA0046:
0004dc 3c18      	CPI  R17,200
0004dd f411      	BRNE _0xA0047
                 ; 0005 00A3 	return -3;									/* If yes then return -3 */
0004de efed      	LDI  R30,LOW(253)
0004df c001      	RJMP _0x214000E
                 ; 0005 00A4 	else										/* else return -4 */
                 _0xA0047:
                 ; 0005 00A5 	return -4;
0004e0 efec      	LDI  R30,LOW(252)
                 ; 0005 00A6 }
                 _0x214000E:
0004e1 8118      	LDD  R17,Y+0
0004e2 9622      	ADIW R28,2
0004e3 9508      	RET
                 ; .FEND
                 ;
                 ;char I2C_Slave_Receive()
                 ; 0005 00A9 {
                 _I2C_Slave_Receive:
                 ; .FSTART _I2C_Slave_Receive
                 ; 0005 00AA 	char status;								/* Declare variable */
                 ; 0005 00AB 	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);		/* Enable TWI, generation of ack and clear interrupt flag */
0004e4 931a      	ST   -Y,R17
                 ;	status -> R17
0004e5 ece4      	LDI  R30,LOW(196)
0004e6 bfe6      	OUT  0x36,R30
                 ; 0005 00AC 	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (read operation) */
                 _0xA0049:
0004e7 b7e6      	IN   R30,0x36
0004e8 78e0      	ANDI R30,LOW(0x80)
0004e9 f3e9      	BREQ _0xA0049
                 ; 0005 00AD 	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
0004ea b1e1      	IN   R30,0x1
0004eb 7fe8      	ANDI R30,LOW(0xF8)
0004ec 2f1e      	MOV  R17,R30
                 ; 0005 00AE 	if (status == 0x80 || status == 0x90)		/* Check weather data received & ack returned (TWEA = 1) */
0004ed 3810      	CPI  R17,128
0004ee f011      	BREQ _0xA004D
0004ef 3910      	CPI  R17,144
0004f0 f419      	BRNE _0xA004C
                 _0xA004D:
                 ; 0005 00AF 	return TWDR;								/* If yes then return received data */
0004f1 b1e3      	IN   R30,0x3
0004f2 940c 09ba 	JMP  _0x214000C
                 ; 0005 00B0 	if (status == 0x88 || status == 0x98)		/* Check weather data received, nack returned and switched to not addressed slav ...
                 _0xA004C:
0004f4 3818      	CPI  R17,136
0004f5 f011      	BREQ _0xA0050
0004f6 3918      	CPI  R17,152
0004f7 f419      	BRNE _0xA004F
                 _0xA0050:
                 ; 0005 00B1 	return TWDR;								/* If yes then return received data */
0004f8 b1e3      	IN   R30,0x3
0004f9 940c 09ba 	JMP  _0x214000C
                 ; 0005 00B2 	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
                 _0xA004F:
0004fb 3a10      	CPI  R17,160
0004fc f431      	BRNE _0xA0052
                 ; 0005 00B3 	{
                 ; 0005 00B4 		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return 0 */
0004fd b7e6      	IN   R30,0x36
0004fe 68e0      	ORI  R30,0x80
0004ff bfe6      	OUT  0x36,R30
                 ; 0005 00B5 		return -1;
000500 efef      	LDI  R30,LOW(255)
000501 940c 09ba 	JMP  _0x214000C
                 ; 0005 00B6 	}
                 ; 0005 00B7 	else
                 _0xA0052:
                 ; 0005 00B8 	return -2;									/* Else return 1 */
000503 efee      	LDI  R30,LOW(254)
000504 940c 09ba 	JMP  _0x214000C
                 ; 0005 00B9 }
                 ; .FEND
                 ;
                 ;
                 ; #include <myheader.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;
                 ;int adc_old_data=0;
                 ;
                 ;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
                 ;
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0006 000F {
                 
                 	.CSEG
                 _adc_isr:
                 ; .FSTART _adc_isr
000506 938a      	ST   -Y,R24
000507 93aa      	ST   -Y,R26
000508 93ba      	ST   -Y,R27
000509 93ea      	ST   -Y,R30
00050a 93fa      	ST   -Y,R31
00050b b7ef      	IN   R30,SREG
00050c 93ea      	ST   -Y,R30
                 ; 0006 0010 static unsigned char input_index=0;
                 ; 0006 0011 // Read the AD conversion result
                 ; 0006 0012 adc_data[input_index]=ADCW;
00050d 91e0 03ff 	LDS  R30,_input_index_S0060000000
00050f eda8      	LDI  R26,LOW(_adc_data)
000510 e0b1      	LDI  R27,HIGH(_adc_data)
000511 e0f0      	LDI  R31,0
000512 0fee      	LSL  R30
000513 1fff      	ROL  R31
000514 0fae      	ADD  R26,R30
000515 1fbf      	ADC  R27,R31
000516 b1e4      	IN   R30,0x4
000517 b1f5      	IN   R31,0x4+1
000518 93ed      	ST   X+,R30
000519 93fc      	ST   X,R31
                 ; 0006 0013 // Select next ADC input
                 ; 0006 0014 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
00051a 91a0 03ff 	LDS  R26,_input_index_S0060000000
00051c 5faf      	SUBI R26,-LOW(1)
00051d 93a0 03ff 	STS  _input_index_S0060000000,R26
00051f 30a1      	CPI  R26,LOW(0x1)
000520 f018      	BRLO _0xC0003
                 ; 0006 0015    input_index=0;
000521 e0e0      	LDI  R30,LOW(0)
000522 93e0 03ff 	STS  _input_index_S0060000000,R30
                 ; 0006 0016 ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
                 _0xC0003:
000524 91e0 03ff 	LDS  R30,_input_index_S0060000000
000526 5ce0      	SUBI R30,-LOW(64)
000527 b9e7      	OUT  0x7,R30
                 ; 0006 0017 // Delay needed for the stabilization of the ADC input voltage
                 ; 0006 0018 delay_us(10);
                +
000528 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000529 958a     +DEC R24
00052a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0006 0019 // Start the AD conversion
                 ; 0006 001A ADCSRA|=(1<<ADSC);
00052b 9a36      	SBI  0x6,6
                 ; 0006 001B 
                 ; 0006 001C }
00052c 91e9      	LD   R30,Y+
00052d bfef      	OUT  SREG,R30
00052e 91f9      	LD   R31,Y+
00052f 91e9      	LD   R30,Y+
000530 91b9      	LD   R27,Y+
000531 91a9      	LD   R26,Y+
000532 9189      	LD   R24,Y+
000533 9518      	RETI
                 ; .FEND
                 ;
                 ; void adc_send_to_spi(void)
                 ; 0006 001F 
                 ; 0006 0020  { char scr[20];
                 ; 0006 0021  adc_data[0]= read_adc(0);
                 ;	scr -> Y+0
                 ; 0006 0022  if (adc_data[0]!=  adc_old_data)
                 ; 0006 0023 {
                 ; 0006 0024     SPDR=adc_data[0]&0x00ff;
                 ; 0006 0025     delay_ms(10);
                 ; 0006 0026     SPDR=adc_data[0]>>8;
                 ; 0006 0027     adc_old_data=adc_data[0];
                 ; 0006 0028     sprintf(scr,"\r\n ADC0=%d\r\n",adc_old_data);
                 ; 0006 0029     puts(scr);
                 ; 0006 002A }
                 ; 0006 002B }
                 ;
                 ;
                 ;
                 ;
                 ;void adc_init_no_intterupt(void)
                 ; 0006 0031 {
                 ; 0006 0032 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
                 ; 0006 0033 ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
                 ; 0006 0034 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
                 ; 0006 0035 
                 ; 0006 0036 }
                 ;
                 ;
                 ;void adc_init_interrupt(void)
                 ; 0006 003A {
                 ; 0006 003B ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
                 ; 0006 003C ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
                 ; 0006 003D SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
                 ; 0006 003E 
                 ; 0006 003F }
                 ;
                 ;
                 ;
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0006 0046 {
                 ; 0006 0047 ADMUX=adc_input | ADC_VREF_TYPE;
                 ;	adc_input -> Y+0
                 ; 0006 0048 // Delay needed for the stabilization of the ADC input voltage
                 ; 0006 0049 delay_us(10);
                 ; 0006 004A // Start the AD conversion
                 ; 0006 004B ADCSRA|=(1<<ADSC);
                 ; 0006 004C // Wait for the AD conversion to complete
                 ; 0006 004D while ((ADCSRA & (1<<ADIF))==0);
                 ; 0006 004E ADCSRA|=(1<<ADIF);
                 ; 0006 004F return ADCW;
                 ; 0006 0050 }
                 ;/****************************************************************************
                 ;Image data created by the LCD Vision V1.05 font & image editor/converter
                 ;(C) Copyright 2011-2013 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Graphic LCD controller: KS0108 128x64 /CS1,/CS2
                 ;Image width: 64 pixels
                 ;Image height: 64 pixels
                 ;Color depth: 1 bits/pixel
                 ;Imported image file name: Tempo-schwarz-1.bmp
                 ;
                 ;Exported monochrome image data size:
                 ;516 bytes for displays organized as horizontal rows of bytes
                 ;516 bytes for displays organized as rows of vertical bytes.
                 ;****************************************************************************/
                 ;
                 ;flash unsigned char clock[]=
                 ;{
                 ;/* Image width: 64 pixels */
                 ;0x40, 0x00,
                 ;/* Image height: 64 pixels */
                 ;0x40, 0x00,
                 ;
                 ;
                 ;#ifndef _GLCD_DATA_BYTEY_
                 ;/* Image data for monochrome displays organized
                 ;   as horizontal rows of bytes */
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x00,
                 ;0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x0F, 0x00, 0x00,
                 ;0x00, 0x00, 0xF8, 0xFF, 0xFF, 0x3F, 0x00, 0x00,
                 ;0x00, 0x00, 0xFE, 0x07, 0xC0, 0xFF, 0x00, 0x00,
                 ;0x00, 0x80, 0x7F, 0x00, 0x00, 0xFC, 0x03, 0x00,
                 ;0x00, 0xC0, 0x1F, 0x80, 0x03, 0xF0, 0x07, 0x00,
                 ;0x00, 0xF0, 0x07, 0x80, 0x03, 0xC0, 0x1F, 0x00,
                 ;0x00, 0xF8, 0x01, 0x80, 0x03, 0x00, 0x3F, 0x00,
                 ;0x00, 0xFC, 0x1C, 0x80, 0x03, 0x70, 0x7E, 0x00,
                 ;0x00, 0x7E, 0x3C, 0x80, 0x03, 0x78, 0xF8, 0x00,
                 ;0x00, 0x1F, 0x7C, 0x80, 0x03, 0x78, 0xF0, 0x01,
                 ;0x80, 0x0F, 0x78, 0x00, 0x00, 0x3C, 0xE0, 0x03,
                 ;0x80, 0x07, 0x78, 0x00, 0x00, 0x3C, 0xC0, 0x07,
                 ;0xC0, 0x07, 0x70, 0x00, 0x00, 0x1C, 0x80, 0x07,
                 ;0xE0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0F,
                 ;0xE0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
                 ;0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E,
                 ;0xF0, 0x0E, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x1E,
                 ;0x78, 0x1E, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x3C,
                 ;0x78, 0x7E, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x3C,
                 ;0x3C, 0x7E, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x78,
                 ;0x3C, 0x78, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x78,
                 ;0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70,
                 ;0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0,
                 ;0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0,
                 ;0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0,
                 ;0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0,
                 ;0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0,
                 ;0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0,
                 ;0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0,
                 ;0xCF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE7,
                 ;0xEF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xEF,
                 ;0xCF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xEF,
                 ;0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0,
                 ;0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0,
                 ;0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0,
                 ;0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0,
                 ;0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0,
                 ;0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0,
                 ;0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0,
                 ;0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70,
                 ;0x3C, 0x70, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x78,
                 ;0x3C, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x78,
                 ;0x78, 0x7E, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x3C,
                 ;0x78, 0x3E, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3C,
                 ;0xF8, 0x0E, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3E,
                 ;0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E,
                 ;0xE0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                 ;0xE0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
                 ;0xC0, 0x03, 0x70, 0x00, 0x00, 0x1C, 0x80, 0x07,
                 ;0xC0, 0x07, 0x70, 0x00, 0x00, 0x3C, 0xC0, 0x07,
                 ;0x80, 0x0F, 0x78, 0x00, 0x00, 0x3C, 0xE0, 0x03,
                 ;0x00, 0x1F, 0x78, 0x80, 0x03, 0x7C, 0xF0, 0x01,
                 ;0x00, 0x3E, 0x3C, 0x80, 0x03, 0x78, 0xF8, 0x00,
                 ;0x00, 0xFC, 0x3C, 0x80, 0x03, 0x70, 0x7C, 0x00,
                 ;0x00, 0xF8, 0x01, 0x80, 0x03, 0x00, 0x3F, 0x00,
                 ;0x00, 0xF0, 0x07, 0x80, 0x03, 0xC0, 0x1F, 0x00,
                 ;0x00, 0xE0, 0x1F, 0x80, 0x03, 0xE0, 0x0F, 0x00,
                 ;0x00, 0x80, 0x7F, 0x80, 0x03, 0xFC, 0x03, 0x00,
                 ;0x00, 0x00, 0xFF, 0x03, 0x80, 0xFF, 0x01, 0x00,
                 ;0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x7F, 0x00, 0x00,
                 ;0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x00,
                 ;#else
                 ;/* Image data for monochrome displays organized
                 ;   as rows of vertical bytes */
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xE0,
                 ;0xE0, 0xF0, 0xF0, 0x78, 0x78, 0x3C, 0x3C, 0x1C,
                 ;0x1E, 0x1E, 0x1E, 0x0E, 0x0E, 0x0E, 0x0E, 0xCE,
                 ;0xCE, 0xCE, 0x0E, 0x0E, 0x0E, 0x0E, 0x1E, 0x1E,
                 ;0x1E, 0x1C, 0x3C, 0x3C, 0x78, 0x78, 0xF0, 0xF0,
                 ;0xE0, 0xE0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0,
                 ;0xF8, 0xFC, 0x7E, 0x1F, 0x0F, 0x07, 0x07, 0x03,
                 ;0x01, 0x00, 0x0E, 0x3E, 0x7E, 0x7C, 0x78, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
                 ;0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x70, 0x7C, 0x7E, 0x3E, 0x0E, 0x00,
                 ;0x01, 0x03, 0x03, 0x07, 0x0F, 0x1F, 0x3E, 0xFC,
                 ;0xF8, 0xF0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0xE0, 0xF8, 0xFE, 0x7F, 0x1F, 0x07,
                 ;0x01, 0x3C, 0x3C, 0x7C, 0x78, 0x70, 0x70, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x20, 0x70, 0x70, 0x78, 0x78, 0x3C, 0x3C,
                 ;0x01, 0x07, 0x1F, 0x7F, 0xFE, 0xF8, 0xE0, 0x00,
                 ;0xC0, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x80, 0x80,
                 ;0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
                 ;0x80, 0x80, 0x80, 0x00, 0x07, 0xFF, 0xFF, 0xFF,
                 ;0x07, 0xFF, 0xFF, 0xFF, 0xC0, 0x01, 0x03, 0x03,
                 ;0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03,
                 ;0x03, 0x03, 0x03, 0x03, 0x80, 0xFF, 0xFF, 0xFF,
                 ;0x00, 0x01, 0x0F, 0x7F, 0xFF, 0xFC, 0xF0, 0xC0,
                 ;0x00, 0x70, 0x78, 0x78, 0x3C, 0x3C, 0x1C, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x1C, 0x3C, 0x3C, 0x78, 0x78, 0x70,
                 ;0x00, 0xC0, 0xF0, 0xFC, 0xFF, 0x7F, 0x0F, 0x01,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x1F,
                 ;0x3F, 0x7E, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x80,
                 ;0x00, 0x00, 0xC0, 0xF0, 0xFC, 0xFC, 0x3C, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0,
                 ;0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x3C, 0x7C, 0xFC, 0xF8, 0xE0, 0x00,
                 ;0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0x7C,
                 ;0x3F, 0x1F, 0x0F, 0x03, 0x01, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F,
                 ;0x1F, 0x1E, 0x3E, 0x3C, 0x3C, 0x78, 0x78, 0x70,
                 ;0xF0, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xEF,
                 ;0xEF, 0xEF, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0,
                 ;0xF0, 0xF0, 0x78, 0x78, 0x78, 0x3C, 0x3E, 0x1E,
                 ;0x1F, 0x0F, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00,
                 ;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 ;#endif
                 ;};
                 ;
                 ;
                 ;#include <myheader.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;flash int cos6data[]={0    ,  11    ,21    ,  31    ,  41    ,50    ,  59    ,  67    ,  74    ,81    ,87    ,
                 ;91    ,95    ,  98    ,  99    ,  100    ,99    ,98    ,  95    ,  91    ,87    ,81    ,74    ,67    ,59    ,50    ,41   ...
                 ;31    ,21    ,  11    ,0    ,  -10    ,-21    ,  -31    ,  -41    ,-50    ,-59    ,-67    ,-74    ,
                 ;-81    ,-87    ,-91    ,-95    ,-98    ,-99    ,-100    ,  -99    ,-98    ,-95    ,
                 ;-91    ,-87    ,-81    ,-74    ,-67    ,-59    ,-50    ,-41    ,-31    ,-21    ,-11    ,
                 ;0
                 ;};
                 ;
                 ;flash int sin6data[]={
                 ;100    ,99    ,98    ,95    ,91    ,87    ,81    ,74    ,
                 ;67    ,59    ,  50    ,41    ,31    ,21    ,  10    ,0    ,
                 ;-10    ,-21    ,-31    ,-41    ,-50    ,-59    ,-67    ,-74    ,
                 ;-81    ,-87    ,-91    ,-95    ,-98    ,-99    ,-100    ,-99    ,
                 ;-98    ,-95    ,-91    ,  -87    ,-81    ,-74    ,-67    ,  -59    ,
                 ;-50    ,  -41    ,-31    ,  -21    ,-11    ,  0    ,10    ,  21    ,
                 ;31    ,  41    ,50    ,  59    ,      67    ,  74    ,  81    ,    86    ,
                 ;91    ,  95    ,98    ,  99    ,100
                 ;};
                 ;
                 ;char hx[]={0,6,10,12,10,6,0,-6,-10,-12,-10,-6,0};
                 
                 	.DSEG
                 ;char hy[]={-12,-10,-6,0,6,10,12,10,6,0,-6,-10,-12};
                 ;
                 ;char xold=30,yold=30,xmold,ymold;
                 ;char hourd=0,mind=0,secd=0,count_clock=0;
                 ;bit hsecd=0,hmind=0,hhourd=0;
                 ;
                 ;
                 ;void hms_display(void)
                 ; 0008 0021 {
                 
                 	.CSEG
                 _hms_display:
                 ; .FSTART _hms_display
                 ; 0008 0022  char x,y;
                 ; 0008 0023  char scr[20];
                 ; 0008 0024 
                 ; 0008 0025 
                 ; 0008 0026  sprintf(scr,"%d:%d:%d ",hourd,mind,secd);
000534 9764      	SBIW R28,20
000535 931a      	ST   -Y,R17
000536 930a      	ST   -Y,R16
                 ;	x -> R17
                 ;	y -> R16
                 ;	scr -> Y+2
000537 01fe      	MOVW R30,R28
000538 9632      	ADIW R30,2
000539 93fa      	ST   -Y,R31
00053a 93ea      	ST   -Y,R30
                +
00053b e1ec     +LDI R30 , LOW ( 2 * _0x100000 + ( 0 ) )
00053c e0f6     +LDI R31 , HIGH ( 2 * _0x100000 + ( 0 ) )
                 	__POINTW1FN _0x100000,0
00053d 93fa      	ST   -Y,R31
00053e 93ea      	ST   -Y,R30
00053f 91e0 041e 	LDS  R30,_hourd
000541 940e 1059 	CALL SUBOPT_0x4
000543 91e0 041f 	LDS  R30,_mind
000545 940e 1059 	CALL SUBOPT_0x4
000547 91e0 0420 	LDS  R30,_secd
000549 940e 1059 	CALL SUBOPT_0x4
00054b e08c      	LDI  R24,12
00054c 940e 0814 	CALL _sprintf
00054e 9660      	ADIW R28,16
                 ; 0008 0027  glcd_moveto(80,  40);
00054f e5e0      	LDI  R30,LOW(80)
000550 93ea      	ST   -Y,R30
000551 e2a8      	LDI  R26,LOW(40)
000552 940e 0e92 	CALL _glcd_moveto
                 ; 0008 0028  glcd_outtext(scr);
000554 01de      	MOVW R26,R28
000555 9612      	ADIW R26,2
000556 940e 0e3d 	CALL _glcd_outtext
                 ; 0008 0029 
                 ; 0008 002A  glcd_setlinestyle(1,GLCD_LINE_SOLID);
000558 940e 105f 	CALL SUBOPT_0x5
                 ; 0008 002B  deleteclock(sec_radius, xold,yold);
00055a e1e3      	LDI  R30,LOW(19)
00055b 93ea      	ST   -Y,R30
00055c 91e0 041a 	LDS  R30,_xold
00055e 93ea      	ST   -Y,R30
00055f 91a0 041b 	LDS  R26,_yold
000561 d0ea      	RCALL _deleteclock
                 ; 0008 002C 
                 ; 0008 002D  glcd_line(x_center_clock ,y_center_clock,(x_center_clock +sec_radius*cos6data[secd]/100),(y_center_clock-sec_radius*sin ...
000562 940e 1066 	CALL SUBOPT_0x6
000564 91e0 0420 	LDS  R30,_secd
000566 940e 106a 	CALL SUBOPT_0x7
000568 940e 1074 	CALL SUBOPT_0x8
00056a 5ee0      	SUBI R30,-LOW(32)
00056b 93ea      	ST   -Y,R30
00056c 91e0 0420 	LDS  R30,_secd
00056e 940e 107e 	CALL SUBOPT_0x9
000570 940e 1074 	CALL SUBOPT_0x8
000572 e2a0      	LDI  R26,LOW(32)
000573 1bae      	SUB  R26,R30
000574 940e 0e9f 	CALL _glcd_line
                 ; 0008 002E 
                 ; 0008 002F 
                 ; 0008 0030  if (hmind==1)
000576 fe24      	SBRS R2,4
000577 c008      	RJMP _0x100007
                 ; 0008 0031  {
                 ; 0008 0032   deleteclock(min_radius,xmold,ymold);
000578 e0ef      	LDI  R30,LOW(15)
000579 93ea      	ST   -Y,R30
00057a 91e0 041c 	LDS  R30,_xmold
00057c 93ea      	ST   -Y,R30
00057d 91a0 041d 	LDS  R26,_ymold
00057f d0cc      	RCALL _deleteclock
                 ; 0008 0033   }
                 ; 0008 0034 
                 ; 0008 0035  glcd_line(x_center_clock ,y_center_clock,(x_center_clock +min_radius*cos6data[mind]/100),(y_center_clock-min_radius*sin ...
                 _0x100007:
000580 940e 1066 	CALL SUBOPT_0x6
000582 91e0 041f 	LDS  R30,_mind
000584 940e 106a 	CALL SUBOPT_0x7
000586 940e 1088 	CALL SUBOPT_0xA
000588 5ee0      	SUBI R30,-LOW(32)
000589 93ea      	ST   -Y,R30
00058a 91e0 041f 	LDS  R30,_mind
00058c 940e 107e 	CALL SUBOPT_0x9
00058e 940e 1088 	CALL SUBOPT_0xA
000590 e2a0      	LDI  R26,LOW(32)
000591 1bae      	SUB  R26,R30
000592 940e 0e9f 	CALL _glcd_line
                 ; 0008 0036  x=hx[hourd]+(mind*(hx[hourd+1]-hx[hourd]))/60;
000594 91e0 041e 	LDS  R30,_hourd
000596 e0f0      	LDI  R31,0
000597 010f      	MOVW R0,R30
000598 01df      	MOVW R26,R30
000599 50e0      	SUBI R30,LOW(-_hx)
00059a 4ffc      	SBCI R31,HIGH(-_hx)
00059b 8180      	LD   R24,Z
00059c 9160 041f 	LDS  R22,_mind
00059e 2777      	CLR  R23
00059f 01fd      	MOVW R30,R26
                +
0005a0 5fef     +SUBI R30 , LOW ( - _hx - ( 1 ) )
0005a1 4ffb     +SBCI R31 , HIGH ( - _hx - ( 1 ) )
                 	__ADDW1MN _hx,1
0005a2 81a0      	LD   R26,Z
0005a3 e0b0      	LDI  R27,0
0005a4 01f0      	MOVW R30,R0
0005a5 50e0      	SUBI R30,LOW(-_hx)
0005a6 4ffc      	SBCI R31,HIGH(-_hx)
0005a7 940e 1092 	CALL SUBOPT_0xB
0005a9 2f1e      	MOV  R17,R30
                 ; 0008 0037  y=hy[hourd]+(mind*(hy[hourd+1]-hy[hourd]))/60;
0005aa 91e0 041e 	LDS  R30,_hourd
0005ac e0f0      	LDI  R31,0
0005ad 010f      	MOVW R0,R30
0005ae 01df      	MOVW R26,R30
0005af 5fe3      	SUBI R30,LOW(-_hy)
0005b0 4ffb      	SBCI R31,HIGH(-_hy)
0005b1 8180      	LD   R24,Z
0005b2 9160 041f 	LDS  R22,_mind
0005b4 2777      	CLR  R23
0005b5 01fd      	MOVW R30,R26
                +
0005b6 5fe2     +SUBI R30 , LOW ( - _hy - ( 1 ) )
0005b7 4ffb     +SBCI R31 , HIGH ( - _hy - ( 1 ) )
                 	__ADDW1MN _hy,1
0005b8 81a0      	LD   R26,Z
0005b9 e0b0      	LDI  R27,0
0005ba 01f0      	MOVW R30,R0
0005bb 5fe3      	SUBI R30,LOW(-_hy)
0005bc 4ffb      	SBCI R31,HIGH(-_hy)
0005bd 940e 1092 	CALL SUBOPT_0xB
0005bf 2f0e      	MOV  R16,R30
                 ; 0008 0038 
                 ; 0008 0039 glcd_line(x_center_clock ,y_center_clock,(x_center_clock+x),(y_center_clock+y)); //min
0005c0 940e 1066 	CALL SUBOPT_0x6
0005c2 2fe1      	MOV  R30,R17
0005c3 5ee0      	SUBI R30,-LOW(32)
0005c4 93ea      	ST   -Y,R30
0005c5 2fa0      	MOV  R26,R16
0005c6 5ea0      	SUBI R26,-LOW(32)
0005c7 940e 0e9f 	CALL _glcd_line
                 ; 0008 003A  yold=secd;
0005c9 91e0 0420 	LDS  R30,_secd
0005cb 93e0 041b 	STS  _yold,R30
                 ; 0008 003B  xold=secd;
0005cd 91e0 0420 	LDS  R30,_secd
0005cf 93e0 041a 	STS  _xold,R30
                 ; 0008 003C  xmold=mind;
0005d1 91e0 041f 	LDS  R30,_mind
0005d3 93e0 041c 	STS  _xmold,R30
                 ; 0008 003D  ymold=mind;
0005d5 91e0 041f 	LDS  R30,_mind
0005d7 93e0 041d 	STS  _ymold,R30
                 ; 0008 003E  }
0005d9 8119      	LDD  R17,Y+1
0005da 8108      	LDD  R16,Y+0
0005db 9666      	ADIW R28,22
0005dc 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0008 0043 {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
0005dd 940e 103d 	CALL SUBOPT_0x2
                 ; 0008 0044 // Reinitialize Timer1 value
                 ; 0008 0045 TCNT1H=0xD8F0 >> 8;
0005df ede8      	LDI  R30,LOW(216)
0005e0 bded      	OUT  0x2D,R30
                 ; 0008 0046 TCNT1L=0xD8F0 & 0xff;
0005e1 efe0      	LDI  R30,LOW(240)
0005e2 bdec      	OUT  0x2C,R30
                 ; 0008 0047 // Place your code here
                 ; 0008 0048  count_clock++;
0005e3 91e0 0421 	LDS  R30,_count_clock
0005e5 5fef      	SUBI R30,-LOW(1)
0005e6 93e0 0421 	STS  _count_clock,R30
                 ; 0008 0049  //if (count==50)clockdisplay();
                 ; 0008 004A  if (count_clock==20)
0005e8 91a0 0421 	LDS  R26,_count_clock
0005ea 31a4      	CPI  R26,LOW(0x14)
0005eb f581      	BRNE _0x100008
                 ; 0008 004B  {
                 ; 0008 004C      count_clock=0;
0005ec e0e0      	LDI  R30,LOW(0)
0005ed 93e0 0421 	STS  _count_clock,R30
                 ; 0008 004D      secd++;
0005ef 91e0 0420 	LDS  R30,_secd
0005f1 5fef      	SUBI R30,-LOW(1)
0005f2 93e0 0420 	STS  _secd,R30
                 ; 0008 004E      hsecd==1;
0005f4 e0a0      	LDI  R26,0
0005f5 fc23      	SBRC R2,3
0005f6 e0a1      	LDI  R26,1
0005f7 e0e1      	LDI  R30,LOW(1)
0005f8 940e 11ab 	CALL __EQB12
                 ; 0008 004F      if (secd==60)
0005fa 91a0 0420 	LDS  R26,_secd
0005fc 33ac      	CPI  R26,LOW(0x3C)
0005fd f4e9      	BRNE _0x100009
                 ; 0008 0050      {
                 ; 0008 0051         secd=0;
0005fe e0e0      	LDI  R30,LOW(0)
0005ff 93e0 0420 	STS  _secd,R30
                 ; 0008 0052         mind++;
000601 91e0 041f 	LDS  R30,_mind
000603 5fef      	SUBI R30,-LOW(1)
000604 93e0 041f 	STS  _mind,R30
                 ; 0008 0053         hmind=1;
000606 9468      	SET
000607 f824      	BLD  R2,4
                 ; 0008 0054         if (mind==60){
000608 91a0 041f 	LDS  R26,_mind
00060a 33ac      	CPI  R26,LOW(0x3C)
00060b f479      	BRNE _0x10000A
                 ; 0008 0055         hourd++;
00060c 91e0 041e 	LDS  R30,_hourd
00060e 5fef      	SUBI R30,-LOW(1)
00060f 93e0 041e 	STS  _hourd,R30
                 ; 0008 0056         hhourd=1;
000611 f825      	BLD  R2,5
                 ; 0008 0057         mind=0;
000612 e0e0      	LDI  R30,LOW(0)
000613 93e0 041f 	STS  _mind,R30
                 ; 0008 0058         if (hourd==12)hourd=0;
000615 91a0 041e 	LDS  R26,_hourd
000617 30ac      	CPI  R26,LOW(0xC)
000618 f411      	BRNE _0x10000B
000619 93e0 041e 	STS  _hourd,R30
                 ; 0008 0059         }
                 _0x10000B:
                 ; 0008 005A         }
                 _0x10000A:
                 ; 0008 005B 
                 ; 0008 005C      hms_display();
                 _0x100009:
00061b df18      	RCALL _hms_display
                 ; 0008 005D  }
                 ; 0008 005E 
                 ; 0008 005F }
                 _0x100008:
00061c 940e 104b 	CALL SUBOPT_0x3
00061e 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void timer1_init(void)
                 ; 0008 0064 {
                 _timer1_init:
                 ; .FSTART _timer1_init
                 ; 0008 0065 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00061f e0e0      	LDI  R30,LOW(0)
000620 bdef      	OUT  0x2F,R30
                 ; 0008 0066 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
000621 e0e2      	LDI  R30,LOW(2)
000622 bdee      	OUT  0x2E,R30
                 ; 0008 0067 TCNT1H=0xD8;
000623 ede8      	LDI  R30,LOW(216)
000624 bded      	OUT  0x2D,R30
                 ; 0008 0068 TCNT1L=0xF0;
000625 efe0      	LDI  R30,LOW(240)
000626 bdec      	OUT  0x2C,R30
                 ; 0008 0069 ICR1H=0x00;
000627 e0e0      	LDI  R30,LOW(0)
000628 bde7      	OUT  0x27,R30
                 ; 0008 006A ICR1L=0x00;
000629 bde6      	OUT  0x26,R30
                 ; 0008 006B OCR1AH=0x00;
00062a bdeb      	OUT  0x2B,R30
                 ; 0008 006C OCR1AL=0x00;
00062b bdea      	OUT  0x2A,R30
                 ; 0008 006D OCR1BH=0x00;
00062c bde9      	OUT  0x29,R30
                 ; 0008 006E OCR1BL=0x00;
00062d bde8      	OUT  0x28,R30
                 ; 0008 006F 
                 ; 0008 0070 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0008 0071 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
00062e e0e4      	LDI  R30,LOW(4)
00062f bfe9      	OUT  0x39,R30
                 ; 0008 0072 
                 ; 0008 0073 // Global enable interrupts
                 ; 0008 0074 }
000630 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;/****************************/
                 ;void clockdisplay(void)
                 ; 0008 007E {
                 ; 0008 007F  char scr[10];
                 ; 0008 0080 char i,j,alfa,beta;
                 ; 0008 0081 
                 ; 0008 0082 glcd_outtext("Hello");
                 ;	scr -> Y+4
                 ;	i -> R17
                 ;	j -> R16
                 ;	alfa -> R19
                 ;	beta -> R18
                 ; 0008 0083 
                 ; 0008 0084 glcd_outtextxy(0,40,"Time");
                 ; 0008 0085 sprintf(scr,"%2d:%2d:%2d",10,30,9);
                 ; 0008 0086 //glcd_outtextxy(30,20,"in the name of god");
                 ; 0008 0087 glcd_outtextxy(0,50,scr);
                 ; 0008 0088 
                 ; 0008 0089 glcd_setlinestyle(3,4);
                 ; 0008 008A 
                 ; 0008 008B glcd_circle(80,30,30); //clock circle
                 ; 0008 008C glcd_circle(80,30,2); //clock circle
                 ; 0008 008D 
                 ; 0008 008E glcd_setlinestyle(1,GLCD_LINE_SOLID);
                 ; 0008 008F 
                 ; 0008 0090 
                 ; 0008 0091  for (i=0;i<60;i++)
                 ; 0008 0092  {
                 ; 0008 0093   glcd_setlinestyle(1,GLCD_LINE_SOLID);
                 ; 0008 0094 
                 ; 0008 0095   glcd_setpixel( 80+25*cos6data[i]/100, (30+25*sin6data[i]/100));
                 ; 0008 0096 
                 ; 0008 0097   if((i==0)||(i==15)||(i==30)||(i==45))
                 ; 0008 0098   {
                 ; 0008 0099 
                 ; 0008 009A   glcd_setpixel( 80+25*cos6data[i]/100, (30+25*sin6data[i]/100));
                 ; 0008 009B   glcd_setpixel( 80+24*cos6data[i]/100, (30+24*sin6data[i]/100));
                 ; 0008 009C   glcd_setpixel( 80+23*cos6data[i]/100, (30+23*sin6data[i]/100));
                 ; 0008 009D   glcd_setpixel( 80+22*cos6data[i]/100, (30+22*sin6data[i]/100));
                 ; 0008 009E 
                 ; 0008 009F   glcd_line((80+22*sin6data[i]/100),(30+20*cos6data[i]/100),(80+25*sin6data[i]/100),(30+25*cos6data[i]/100));
                 ; 0008 00A0  }
                 ; 0008 00A1 
                 ; 0008 00A2  if((i==5)||(i==10))
                 ; 0008 00A3 
                 ; 0008 00A4  {
                 ; 0008 00A5  alfa=25*cos6data[i]/100;
                 ; 0008 00A6  beta=25*sin6data[i]/100;
                 ; 0008 00A7  glcd_setpixel( 80+alfa, 30+beta);
                 ; 0008 00A8  for (j=0;j<2;j++)glcd_setpixel( 80+alfa-j, 30+beta-j);
                 ; 0008 00A9 }
                 ; 0008 00AA  if((i==40)||(i==35))
                 ; 0008 00AB 
                 ; 0008 00AC  {
                 ; 0008 00AD  alfa=25*cos6data[i]/100;
                 ; 0008 00AE  beta=25*sin6data[i]/100;
                 ; 0008 00AF  glcd_setpixel( 80+alfa, 30+beta);
                 ; 0008 00B0  for (j=0;j<2;j++)glcd_setpixel( 80+alfa+j, 30+beta+j);
                 ; 0008 00B1 }
                 ; 0008 00B2  if((i==20)||(i==25))
                 ; 0008 00B3 
                 ; 0008 00B4  {
                 ; 0008 00B5  alfa=25*cos6data[i]/100;
                 ; 0008 00B6  beta=25*sin6data[i]/100;
                 ; 0008 00B7  glcd_setpixel( 80+alfa, 30+beta);
                 ; 0008 00B8  for (j=0;j<2;j++)glcd_setpixel( 80+alfa-j, 30+beta+j);
                 ; 0008 00B9 }
                 ; 0008 00BA  if((i==50)||(i==55))
                 ; 0008 00BB 
                 ; 0008 00BC  {
                 ; 0008 00BD  alfa=25*cos6data[i]/100;
                 ; 0008 00BE  beta=25*sin6data[i]/100;
                 ; 0008 00BF  glcd_setpixel( 80+alfa, 30+beta);
                 ; 0008 00C0  for (j=0;j<2;j++)glcd_setpixel( 80+alfa+j, 30+beta-j);
                 ; 0008 00C1 }
                 ; 0008 00C2  }
                 ; 0008 00C3 
                 ; 0008 00C4   }
                 
                 	.DSEG
                 _0x10000C:
0001cd           	.BYTE 0xB
                 ;
                 ;#include <myheader.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <clock.h>
                 ;#include <timer.h>
                 ;
                 ;
                 ;
                 ;void glcd_init_func(void)
                 ; 0009 0008 {
                 
                 	.CSEG
                 _glcd_init_func:
                 ; .FSTART _glcd_init_func
                 ; 0009 0009  GLCDINIT_t glcd_init_data;
                 ; 0009 000A 
                 ; 0009 000B 
                 ; 0009 000C glcd_init_data.font=font5x7;
000631 9726      	SBIW R28,6
                 ;	glcd_init_data -> Y+0
000632 e5e4      	LDI  R30,LOW(_font5x7*2)
000633 e0f0      	LDI  R31,HIGH(_font5x7*2)
000634 83e8      	ST   Y,R30
000635 83f9      	STD  Y+1,R31
                 ; 0009 000D glcd_init_data.readxmem=NULL;
000636 e0e0      	LDI  R30,LOW(0)
000637 83ea      	STD  Y+2,R30
000638 83eb      	STD  Y+2+1,R30
                 ; 0009 000E glcd_init_data.writexmem=NULL;
000639 83ec      	STD  Y+4,R30
00063a 83ed      	STD  Y+4+1,R30
                 ; 0009 000F glcd_init(&glcd_init_data);
00063b 01de      	MOVW R26,R28
00063c 940e 0a31 	CALL _glcd_init
                 ; 0009 0010 
                 ; 0009 0011 
                 ; 0009 0012 
                 ; 0009 0013 }
00063e 940c 0b19 	JMP  _0x214000A
                 ; .FEND
                 ;
                 ;/**************************************************/
                 ;
                 ;void clock_display(void)
                 ; 0009 0018 {
                 _clock_display:
                 ; .FSTART _clock_display
                 ; 0009 0019 glcd_init_func();
000640 dff0      	RCALL _glcd_init_func
                 ; 0009 001A glcd_putimagef(0,0,clock,GLCD_PUTCOPY);
000641 e0e0      	LDI  R30,LOW(0)
000642 93ea      	ST   -Y,R30
000643 93ea      	ST   -Y,R30
000644 e3e8      	LDI  R30,LOW(_clock*2)
000645 e0f2      	LDI  R31,HIGH(_clock*2)
000646 93fa      	ST   -Y,R31
000647 93ea      	ST   -Y,R30
000648 e0a0      	LDI  R26,LOW(0)
000649 940e 0e49 	CALL _glcd_putimagef
                 ; 0009 001B }
00064b 9508      	RET
                 ; .FEND
                 ;/***********************************************/
                 ;void deleteclock(char data,char xxold,char yyold)
                 ; 0009 001E  {
                 _deleteclock:
                 ; .FSTART _deleteclock
                 ; 0009 001F  char i,x,y;
                 ; 0009 0020  //????????????????????????????
                 ; 0009 0021  for (i=1;i<(data+1);i++)
00064c 93aa      	ST   -Y,R26
00064d 940e 123a 	CALL __SAVELOCR4
                 ;	data -> Y+6
                 ;	xxold -> Y+5
                 ;	yyold -> Y+4
                 ;	i -> R17
                 ;	x -> R16
                 ;	y -> R19
00064f e011      	LDI  R17,LOW(1)
                 _0x120004:
000650 81ee      	LDD  R30,Y+6
000651 e0f0      	LDI  R31,0
000652 9631      	ADIW R30,1
000653 2fa1      	MOV  R26,R17
000654 e0b0      	LDI  R27,0
000655 17ae      	CP   R26,R30
000656 07bf      	CPC  R27,R31
000657 f5a4      	BRGE _0x120005
                 ; 0009 0022  {
                 ; 0009 0023  x=x_center_clock +i*cos6data[xxold]/100;
000658 2f61      	MOV  R22,R17
000659 2777      	CLR  R23
00065a 81ed      	LDD  R30,Y+5
00065b 940e 106a 	CALL SUBOPT_0x7
00065d 940e 10a2 	CALL SUBOPT_0xC
00065f 5ee0      	SUBI R30,-LOW(32)
000660 2f0e      	MOV  R16,R30
                 ; 0009 0024  y=y_center_clock-i*sin6data[yyold]/100;
000661 2f61      	MOV  R22,R17
000662 2777      	CLR  R23
000663 81ec      	LDD  R30,Y+4
000664 940e 107e 	CALL SUBOPT_0x9
000666 940e 10a2 	CALL SUBOPT_0xC
000668 e2a0      	LDI  R26,LOW(32)
000669 1bae      	SUB  R26,R30
00066a 2f3a      	MOV  R19,R26
                 ; 0009 0025 
                 ; 0009 0026  glcd_clrpixel(x,y);
00066b 930a      	ST   -Y,R16
00066c 940e 0d22 	CALL _glcd_clrpixel
                 ; 0009 0027  glcd_clrpixel(x,y+1);
00066e 930a      	ST   -Y,R16
00066f 2fa3      	MOV  R26,R19
000670 5faf      	SUBI R26,-LOW(1)
000671 940e 0d22 	CALL _glcd_clrpixel
                 ; 0009 0028  glcd_clrpixel(x,y-1);
000673 930a      	ST   -Y,R16
000674 2fa3      	MOV  R26,R19
000675 50a1      	SUBI R26,LOW(1)
000676 940e 0d22 	CALL _glcd_clrpixel
                 ; 0009 0029 
                 ; 0009 002A  glcd_clrpixel(x-1,y);
000678 2fe0      	MOV  R30,R16
000679 50e1      	SUBI R30,LOW(1)
00067a 940e 10ab 	CALL SUBOPT_0xD
                 ; 0009 002B  glcd_clrpixel(x+1,y);
00067c 940e 10ab 	CALL SUBOPT_0xD
                 ; 0009 002C  glcd_clrpixel(x+1,y+1);
00067e 93ea      	ST   -Y,R30
00067f 2fa3      	MOV  R26,R19
000680 5faf      	SUBI R26,-LOW(1)
000681 940e 0d22 	CALL _glcd_clrpixel
                 ; 0009 002D  glcd_clrpixel(x+1,y-1);
000683 2fe0      	MOV  R30,R16
000684 5fef      	SUBI R30,-LOW(1)
000685 93ea      	ST   -Y,R30
000686 2fa3      	MOV  R26,R19
000687 50a1      	SUBI R26,LOW(1)
000688 940e 0d22 	CALL _glcd_clrpixel
                 ; 0009 002E   }
00068a 5f1f      	SUBI R17,-1
00068b cfc4      	RJMP _0x120004
                 _0x120005:
                 ; 0009 002F   }
00068c 940e 1241 	CALL __LOADLOCR4
00068e 9627      	ADIW R28,7
00068f 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _puts:
                 ; .FSTART _puts
000690 93ba      	ST   -Y,R27
000691 93aa      	ST   -Y,R26
000692 931a      	ST   -Y,R17
                 _0x2000003:
000693 940e 10b2 	CALL SUBOPT_0xE
000695 f021      	BREQ _0x2000005
000696 2fa1      	MOV  R26,R17
000697 940e 046f 	CALL _putchar
000699 cff9      	RJMP _0x2000003
                 _0x2000005:
00069a e0aa      	LDI  R26,LOW(10)
00069b 940e 046f 	CALL _putchar
00069d 8118      	LDD  R17,Y+0
00069e 9623      	ADIW R28,3
00069f 9508      	RET
                 ; .FEND
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0006a0 93ba      	ST   -Y,R27
0006a1 93aa      	ST   -Y,R26
0006a2 931a      	ST   -Y,R17
0006a3 930a      	ST   -Y,R16
0006a4 81aa      	LDD  R26,Y+2
0006a5 81bb      	LDD  R27,Y+2+1
0006a6 9612      	ADIW R26,2
0006a7 940e 1203 	CALL __GETW1P
0006a9 9730      	SBIW R30,0
0006aa f159      	BREQ _0x2000010
0006ab 81aa      	LDD  R26,Y+2
0006ac 81bb      	LDD  R27,Y+2+1
0006ad 9614      	ADIW R26,4
0006ae 940e 1203 	CALL __GETW1P
0006b0 018f      	MOVW R16,R30
0006b1 9730      	SBIW R30,0
0006b2 f061      	BREQ _0x2000012
                +
0006b3 3002     +CPI R16 , LOW ( 2 )
0006b4 e0e0     +LDI R30 , HIGH ( 2 )
0006b5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0006b6 f098      	BRLO _0x2000013
0006b7 01f8      	MOVW R30,R16
0006b8 9731      	SBIW R30,1
0006b9 018f      	MOVW R16,R30
                +
0006ba 81aa     +LDD R26 , Y + 2
0006bb 81bb     +LDD R27 , Y + 2 + 1
0006bc 9614     +ADIW R26 , 4
0006bd 93ed     +ST X + , R30
0006be 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0006bf 81aa      	LDD  R26,Y+2
0006c0 81bb      	LDD  R27,Y+2+1
0006c1 9612      	ADIW R26,2
0006c2 91ed      	LD   R30,X+
0006c3 91fd      	LD   R31,X+
0006c4 9631      	ADIW R30,1
0006c5 93fe      	ST   -X,R31
0006c6 93ee      	ST   -X,R30
0006c7 9731      	SBIW R30,1
0006c8 81ac      	LDD  R26,Y+4
0006c9 83a0      	STD  Z+0,R26
                 _0x2000013:
0006ca 81aa      	LDD  R26,Y+2
0006cb 81bb      	LDD  R27,Y+2+1
0006cc 940e 1203 	CALL __GETW1P
0006ce 23ff      	TST  R31
0006cf f02a      	BRMI _0x2000014
0006d0 91ed      	LD   R30,X+
0006d1 91fd      	LD   R31,X+
0006d2 9631      	ADIW R30,1
0006d3 93fe      	ST   -X,R31
0006d4 93ee      	ST   -X,R30
                 _0x2000014:
0006d5 c006      	RJMP _0x2000015
                 _0x2000010:
0006d6 81aa      	LDD  R26,Y+2
0006d7 81bb      	LDD  R27,Y+2+1
0006d8 efef      	LDI  R30,LOW(65535)
0006d9 efff      	LDI  R31,HIGH(65535)
0006da 93ed      	ST   X+,R30
0006db 93fc      	ST   X,R31
                 _0x2000015:
0006dc 8119      	LDD  R17,Y+1
0006dd 8108      	LDD  R16,Y+0
0006de 9625      	ADIW R28,5
0006df 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0006e0 93ba      	ST   -Y,R27
0006e1 93aa      	ST   -Y,R26
0006e2 9726      	SBIW R28,6
0006e3 940e 1238 	CALL __SAVELOCR6
0006e5 e010      	LDI  R17,0
0006e6 85ac      	LDD  R26,Y+12
0006e7 85bd      	LDD  R27,Y+12+1
0006e8 e0e0      	LDI  R30,LOW(0)
0006e9 e0f0      	LDI  R31,HIGH(0)
0006ea 93ed      	ST   X+,R30
0006eb 93fc      	ST   X,R31
                 _0x2000016:
0006ec 89ea      	LDD  R30,Y+18
0006ed 89fb      	LDD  R31,Y+18+1
0006ee 9631      	ADIW R30,1
0006ef 8bea      	STD  Y+18,R30
0006f0 8bfb      	STD  Y+18+1,R31
0006f1 9731      	SBIW R30,1
0006f2 91e4      	LPM  R30,Z
0006f3 2f2e      	MOV  R18,R30
0006f4 30e0      	CPI  R30,0
0006f5 f409      	BRNE PC+2
0006f6 c115      	RJMP _0x2000018
0006f7 2fe1      	MOV  R30,R17
0006f8 30e0      	CPI  R30,0
0006f9 f439      	BRNE _0x200001C
0006fa 3225      	CPI  R18,37
0006fb f411      	BRNE _0x200001D
0006fc e011      	LDI  R17,LOW(1)
0006fd c002      	RJMP _0x200001E
                 _0x200001D:
0006fe 940e 10ba 	CALL SUBOPT_0xF
                 _0x200001E:
000700 c10a      	RJMP _0x200001B
                 _0x200001C:
000701 30e1      	CPI  R30,LOW(0x1)
000702 f4a9      	BRNE _0x200001F
000703 3225      	CPI  R18,37
000704 f419      	BRNE _0x2000020
000705 940e 10ba 	CALL SUBOPT_0xF
000707 c102      	RJMP _0x20000CC
                 _0x2000020:
000708 e012      	LDI  R17,LOW(2)
000709 e040      	LDI  R20,LOW(0)
00070a e000      	LDI  R16,LOW(0)
00070b 322d      	CPI  R18,45
00070c f411      	BRNE _0x2000021
00070d e001      	LDI  R16,LOW(1)
00070e c0fc      	RJMP _0x200001B
                 _0x2000021:
00070f 322b      	CPI  R18,43
000710 f411      	BRNE _0x2000022
000711 e24b      	LDI  R20,LOW(43)
000712 c0f8      	RJMP _0x200001B
                 _0x2000022:
000713 3220      	CPI  R18,32
000714 f411      	BRNE _0x2000023
000715 e240      	LDI  R20,LOW(32)
000716 c0f4      	RJMP _0x200001B
                 _0x2000023:
000717 c002      	RJMP _0x2000024
                 _0x200001F:
000718 30e2      	CPI  R30,LOW(0x2)
000719 f439      	BRNE _0x2000025
                 _0x2000024:
00071a e050      	LDI  R21,LOW(0)
00071b e013      	LDI  R17,LOW(3)
00071c 3320      	CPI  R18,48
00071d f411      	BRNE _0x2000026
00071e 6800      	ORI  R16,LOW(128)
00071f c0eb      	RJMP _0x200001B
                 _0x2000026:
000720 c003      	RJMP _0x2000027
                 _0x2000025:
000721 30e3      	CPI  R30,LOW(0x3)
000722 f009      	BREQ PC+2
000723 c0e7      	RJMP _0x200001B
                 _0x2000027:
000724 3320      	CPI  R18,48
000725 f010      	BRLO _0x200002A
000726 332a      	CPI  R18,58
000727 f008      	BRLO _0x200002B
                 _0x200002A:
000728 c007      	RJMP _0x2000029
                 _0x200002B:
000729 e0aa      	LDI  R26,LOW(10)
00072a 9f5a      	MUL  R21,R26
00072b 2d50      	MOV  R21,R0
00072c 2fe2      	MOV  R30,R18
00072d 53e0      	SUBI R30,LOW(48)
00072e 0f5e      	ADD  R21,R30
00072f c0db      	RJMP _0x200001B
                 _0x2000029:
000730 2fe2      	MOV  R30,R18
000731 36e3      	CPI  R30,LOW(0x63)
000732 f449      	BRNE _0x200002F
000733 940e 10c1 	CALL SUBOPT_0x10
000735 89e8      	LDD  R30,Y+16
000736 89f9      	LDD  R31,Y+16+1
000737 81a4      	LDD  R26,Z+4
000738 93aa      	ST   -Y,R26
000739 940e 10c7 	CALL SUBOPT_0x11
00073b c0ce      	RJMP _0x2000030
                 _0x200002F:
00073c 37e3      	CPI  R30,LOW(0x73)
00073d f441      	BRNE _0x2000032
00073e 940e 10c1 	CALL SUBOPT_0x10
000740 940e 10cd 	CALL SUBOPT_0x12
000742 940e 0fa5 	CALL _strlen
000744 2f1e      	MOV  R17,R30
000745 c00a      	RJMP _0x2000033
                 _0x2000032:
000746 37e0      	CPI  R30,LOW(0x70)
000747 f461      	BRNE _0x2000035
000748 940e 10c1 	CALL SUBOPT_0x10
00074a 940e 10cd 	CALL SUBOPT_0x12
00074c 940e 0fb1 	CALL _strlenf
00074e 2f1e      	MOV  R17,R30
00074f 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000750 6002      	ORI  R16,LOW(2)
000751 770f      	ANDI R16,LOW(127)
000752 e030      	LDI  R19,LOW(0)
000753 c034      	RJMP _0x2000036
                 _0x2000035:
000754 36e4      	CPI  R30,LOW(0x64)
000755 f011      	BREQ _0x2000039
000756 36e9      	CPI  R30,LOW(0x69)
000757 f411      	BRNE _0x200003A
                 _0x2000039:
000758 6004      	ORI  R16,LOW(4)
000759 c002      	RJMP _0x200003B
                 _0x200003A:
00075a 37e5      	CPI  R30,LOW(0x75)
00075b f431      	BRNE _0x200003C
                 _0x200003B:
00075c e3e0      	LDI  R30,LOW(_tbl10_G100*2)
00075d e0f5      	LDI  R31,HIGH(_tbl10_G100*2)
00075e 83ee      	STD  Y+6,R30
00075f 83ff      	STD  Y+6+1,R31
000760 e015      	LDI  R17,LOW(5)
000761 c00c      	RJMP _0x200003D
                 _0x200003C:
000762 35e8      	CPI  R30,LOW(0x58)
000763 f411      	BRNE _0x200003F
000764 6008      	ORI  R16,LOW(8)
000765 c003      	RJMP _0x2000040
                 _0x200003F:
000766 37e8      	CPI  R30,LOW(0x78)
000767 f009      	BREQ PC+2
000768 c0a1      	RJMP _0x2000071
                 _0x2000040:
000769 e3ea      	LDI  R30,LOW(_tbl16_G100*2)
00076a e0f5      	LDI  R31,HIGH(_tbl16_G100*2)
00076b 83ee      	STD  Y+6,R30
00076c 83ff      	STD  Y+6+1,R31
00076d e014      	LDI  R17,LOW(4)
                 _0x200003D:
00076e ff02      	SBRS R16,2
00076f c014      	RJMP _0x2000042
000770 940e 10c1 	CALL SUBOPT_0x10
000772 940e 10d7 	CALL SUBOPT_0x13
000774 85ab      	LDD  R26,Y+11
000775 23aa      	TST  R26
000776 f43a      	BRPL _0x2000043
000777 85ea      	LDD  R30,Y+10
000778 85fb      	LDD  R31,Y+10+1
000779 940e 1192 	CALL __ANEGW1
00077b 87ea      	STD  Y+10,R30
00077c 87fb      	STD  Y+10+1,R31
00077d e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00077e 3040      	CPI  R20,0
00077f f011      	BREQ _0x2000044
000780 5f1f      	SUBI R17,-LOW(1)
000781 c001      	RJMP _0x2000045
                 _0x2000044:
000782 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000783 c004      	RJMP _0x2000046
                 _0x2000042:
000784 940e 10c1 	CALL SUBOPT_0x10
000786 940e 10d7 	CALL SUBOPT_0x13
                 _0x2000046:
                 _0x2000036:
000788 fd00      	SBRC R16,0
000789 c011      	RJMP _0x2000047
                 _0x2000048:
00078a 1715      	CP   R17,R21
00078b f478      	BRSH _0x200004A
00078c ff07      	SBRS R16,7
00078d c008      	RJMP _0x200004B
00078e ff02      	SBRS R16,2
00078f c004      	RJMP _0x200004C
000790 7f0b      	ANDI R16,LOW(251)
000791 2f24      	MOV  R18,R20
000792 5011      	SUBI R17,LOW(1)
000793 c001      	RJMP _0x200004D
                 _0x200004C:
000794 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000795 c001      	RJMP _0x200004E
                 _0x200004B:
000796 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000797 940e 10ba 	CALL SUBOPT_0xF
000799 5051      	SUBI R21,LOW(1)
00079a cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00079b 2f31      	MOV  R19,R17
00079c ff01      	SBRS R16,1
00079d c017      	RJMP _0x200004F
                 _0x2000050:
00079e 3030      	CPI  R19,0
00079f f0a1      	BREQ _0x2000052
0007a0 ff03      	SBRS R16,3
0007a1 c006      	RJMP _0x2000053
0007a2 81ee      	LDD  R30,Y+6
0007a3 81ff      	LDD  R31,Y+6+1
0007a4 9125      	LPM  R18,Z+
0007a5 83ee      	STD  Y+6,R30
0007a6 83ff      	STD  Y+6+1,R31
0007a7 c005      	RJMP _0x2000054
                 _0x2000053:
0007a8 81ae      	LDD  R26,Y+6
0007a9 81bf      	LDD  R27,Y+6+1
0007aa 912d      	LD   R18,X+
0007ab 83ae      	STD  Y+6,R26
0007ac 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0007ad 940e 10ba 	CALL SUBOPT_0xF
0007af 3050      	CPI  R21,0
0007b0 f009      	BREQ _0x2000055
0007b1 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0007b2 5031      	SUBI R19,LOW(1)
0007b3 cfea      	RJMP _0x2000050
                 _0x2000052:
0007b4 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0007b5 e320      	LDI  R18,LOW(48)
0007b6 81ee      	LDD  R30,Y+6
0007b7 81ff      	LDD  R31,Y+6+1
0007b8 940e 1207 	CALL __GETW1PF
0007ba 87e8      	STD  Y+8,R30
0007bb 87f9      	STD  Y+8+1,R31
0007bc 81ee      	LDD  R30,Y+6
0007bd 81ff      	LDD  R31,Y+6+1
0007be 9632      	ADIW R30,2
0007bf 83ee      	STD  Y+6,R30
0007c0 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0007c1 85e8      	LDD  R30,Y+8
0007c2 85f9      	LDD  R31,Y+8+1
0007c3 85aa      	LDD  R26,Y+10
0007c4 85bb      	LDD  R27,Y+10+1
0007c5 17ae      	CP   R26,R30
0007c6 07bf      	CPC  R27,R31
0007c7 f050      	BRLO _0x200005C
0007c8 5f2f      	SUBI R18,-LOW(1)
0007c9 85a8      	LDD  R26,Y+8
0007ca 85b9      	LDD  R27,Y+8+1
0007cb 85ea      	LDD  R30,Y+10
0007cc 85fb      	LDD  R31,Y+10+1
0007cd 1bea      	SUB  R30,R26
0007ce 0bfb      	SBC  R31,R27
0007cf 87ea      	STD  Y+10,R30
0007d0 87fb      	STD  Y+10+1,R31
0007d1 cfef      	RJMP _0x200005A
                 _0x200005C:
0007d2 332a      	CPI  R18,58
0007d3 f028      	BRLO _0x200005D
0007d4 ff03      	SBRS R16,3
0007d5 c002      	RJMP _0x200005E
0007d6 5f29      	SUBI R18,-LOW(7)
0007d7 c001      	RJMP _0x200005F
                 _0x200005E:
0007d8 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0007d9 fd04      	SBRC R16,4
0007da c01a      	RJMP _0x2000061
0007db 3321      	CPI  R18,49
0007dc f420      	BRSH _0x2000063
0007dd 85a8      	LDD  R26,Y+8
0007de 85b9      	LDD  R27,Y+8+1
0007df 9711      	SBIW R26,1
0007e0 f409      	BRNE _0x2000062
                 _0x2000063:
0007e1 c009      	RJMP _0x20000CD
                 _0x2000062:
0007e2 1753      	CP   R21,R19
0007e3 f010      	BRLO _0x2000067
0007e4 ff00      	SBRS R16,0
0007e5 c001      	RJMP _0x2000068
                 _0x2000067:
0007e6 c013      	RJMP _0x2000066
                 _0x2000068:
0007e7 e220      	LDI  R18,LOW(32)
0007e8 ff07      	SBRS R16,7
0007e9 c00b      	RJMP _0x2000069
0007ea e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0007eb 6100      	ORI  R16,LOW(16)
0007ec ff02      	SBRS R16,2
0007ed c007      	RJMP _0x200006A
0007ee 7f0b      	ANDI R16,LOW(251)
0007ef 934a      	ST   -Y,R20
0007f0 940e 10c7 	CALL SUBOPT_0x11
0007f2 3050      	CPI  R21,0
0007f3 f009      	BREQ _0x200006B
0007f4 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0007f5 940e 10ba 	CALL SUBOPT_0xF
0007f7 3050      	CPI  R21,0
0007f8 f009      	BREQ _0x200006C
0007f9 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0007fa 5031      	SUBI R19,LOW(1)
0007fb 85a8      	LDD  R26,Y+8
0007fc 85b9      	LDD  R27,Y+8+1
0007fd 9712      	SBIW R26,2
0007fe f008      	BRLO _0x2000059
0007ff cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000800 ff00      	SBRS R16,0
000801 c008      	RJMP _0x200006D
                 _0x200006E:
000802 3050      	CPI  R21,0
000803 f031      	BREQ _0x2000070
000804 5051      	SUBI R21,LOW(1)
000805 e2e0      	LDI  R30,LOW(32)
000806 93ea      	ST   -Y,R30
000807 940e 10c7 	CALL SUBOPT_0x11
000809 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
00080a e010      	LDI  R17,LOW(0)
                 _0x200001B:
00080b cee0      	RJMP _0x2000016
                 _0x2000018:
00080c 85ac      	LDD  R26,Y+12
00080d 85bd      	LDD  R27,Y+12+1
00080e 940e 1203 	CALL __GETW1P
000810 940e 123f 	CALL __LOADLOCR6
000812 9664      	ADIW R28,20
000813 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000814 92ff      	PUSH R15
000815 2ef8      	MOV  R15,R24
000816 9726      	SBIW R28,6
000817 940e 123a 	CALL __SAVELOCR4
000819 940e 10df 	CALL SUBOPT_0x14
00081b 9730      	SBIW R30,0
00081c f419      	BRNE _0x2000072
00081d efef      	LDI  R30,LOW(65535)
00081e efff      	LDI  R31,HIGH(65535)
00081f c023      	RJMP _0x214000D
                 _0x2000072:
000820 01de      	MOVW R26,R28
000821 9616      	ADIW R26,6
000822 940e 118e 	CALL __ADDW2R15
000824 018d      	MOVW R16,R26
000825 940e 10df 	CALL SUBOPT_0x14
000827 83ee      	STD  Y+6,R30
000828 83ff      	STD  Y+6+1,R31
000829 e0e0      	LDI  R30,LOW(0)
00082a 87e8      	STD  Y+8,R30
00082b 87e9      	STD  Y+8+1,R30
00082c 01de      	MOVW R26,R28
00082d 961a      	ADIW R26,10
00082e 940e 118e 	CALL __ADDW2R15
000830 940e 1203 	CALL __GETW1P
000832 93fa      	ST   -Y,R31
000833 93ea      	ST   -Y,R30
000834 931a      	ST   -Y,R17
000835 930a      	ST   -Y,R16
000836 eae0      	LDI  R30,LOW(_put_buff_G100)
000837 e0f6      	LDI  R31,HIGH(_put_buff_G100)
000838 93fa      	ST   -Y,R31
000839 93ea      	ST   -Y,R30
00083a 01de      	MOVW R26,R28
00083b 961a      	ADIW R26,10
00083c dea3      	RCALL __print_G100
00083d 019f      	MOVW R18,R30
00083e 81ae      	LDD  R26,Y+6
00083f 81bf      	LDD  R27,Y+6+1
000840 e0e0      	LDI  R30,LOW(0)
000841 93ec      	ST   X,R30
000842 01f9      	MOVW R30,R18
                 _0x214000D:
000843 940e 1241 	CALL __LOADLOCR4
000845 962a      	ADIW R28,10
000846 90ff      	POP  R15
000847 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 _twi_int_handler:
                 ; .FSTART _twi_int_handler
000848 920a      	ST   -Y,R0
000849 921a      	ST   -Y,R1
00084a 92fa      	ST   -Y,R15
00084b 936a      	ST   -Y,R22
00084c 937a      	ST   -Y,R23
00084d 938a      	ST   -Y,R24
00084e 939a      	ST   -Y,R25
00084f 93aa      	ST   -Y,R26
000850 93ba      	ST   -Y,R27
000851 93ea      	ST   -Y,R30
000852 93fa      	ST   -Y,R31
000853 b7ef      	IN   R30,SREG
000854 93ea      	ST   -Y,R30
000855 940e 1238 	CALL __SAVELOCR6
000857 9110 01e0 	LDS  R17,_twi_rx_index
000859 9100 01df 	LDS  R16,_twi_tx_index
00085b 9130 0425 	LDS  R19,_bytes_to_tx_G101
00085d 9120 01e1 	LDS  R18,_twi_result
00085f 2fe1      	MOV  R30,R17
000860 91a0 0426 	LDS  R26,_twi_rx_buffer_G101
000862 91b0 0427 	LDS  R27,_twi_rx_buffer_G101+1
000864 e0f0      	LDI  R31,0
000865 0fea      	ADD  R30,R26
000866 1ffb      	ADC  R31,R27
000867 01af      	MOVW R20,R30
000868 b1e1      	IN   R30,0x1
000869 7fe8      	ANDI R30,LOW(0xF8)
00086a 30e8      	CPI  R30,LOW(0x8)
00086b f411      	BRNE _0x2020017
00086c e020      	LDI  R18,LOW(0)
00086d c002      	RJMP _0x2020018
                 _0x2020017:
00086e 31e0      	CPI  R30,LOW(0x10)
00086f f419      	BRNE _0x2020019
                 _0x2020018:
000870 91e0 0422 	LDS  R30,_slave_address_G101
000872 c010      	RJMP _0x2020067
                 _0x2020019:
000873 31e8      	CPI  R30,LOW(0x18)
000874 f011      	BREQ _0x202001D
000875 32e8      	CPI  R30,LOW(0x28)
000876 f521      	BRNE _0x202001E
                 _0x202001D:
000877 1703      	CP   R16,R19
000878 f480      	BRSH _0x202001F
000879 2fe0      	MOV  R30,R16
00087a 5f0f      	SUBI R16,-1
00087b 91a0 0423 	LDS  R26,_twi_tx_buffer_G101
00087d 91b0 0424 	LDS  R27,_twi_tx_buffer_G101+1
00087f e0f0      	LDI  R31,0
000880 0fae      	ADD  R26,R30
000881 1fbf      	ADC  R27,R31
000882 91ec      	LD   R30,X
                 _0x2020067:
000883 b9e3      	OUT  0x3,R30
000884 b7e6      	IN   R30,0x36
000885 70ef      	ANDI R30,LOW(0xF)
000886 68e0      	ORI  R30,0x80
000887 bfe6      	OUT  0x36,R30
000888 c011      	RJMP _0x2020020
                 _0x202001F:
000889 91e0 0428 	LDS  R30,_bytes_to_rx_G101
00088b 171e      	CP   R17,R30
00088c f460      	BRSH _0x2020021
00088d 91e0 0422 	LDS  R30,_slave_address_G101
00088f 60e1      	ORI  R30,1
000890 93e0 0422 	STS  _slave_address_G101,R30
000892 94e8      	CLT
000893 f826      	BLD  R2,6
000894 b7e6      	IN   R30,0x36
000895 70ef      	ANDI R30,LOW(0xF)
000896 6ae0      	ORI  R30,LOW(0xA0)
000897 bfe6      	OUT  0x36,R30
000898 c0fb      	RJMP _0x2020016
                 _0x2020021:
000899 c033      	RJMP _0x2020022
                 _0x2020020:
00089a c0f9      	RJMP _0x2020016
                 _0x202001E:
00089b 35e0      	CPI  R30,LOW(0x50)
00089c f429      	BRNE _0x2020023
00089d b1e3      	IN   R30,0x3
00089e 01da      	MOVW R26,R20
00089f 93ec      	ST   X,R30
0008a0 5f1f      	SUBI R17,-LOW(1)
0008a1 c002      	RJMP _0x2020024
                 _0x2020023:
0008a2 34e0      	CPI  R30,LOW(0x40)
0008a3 f471      	BRNE _0x2020025
                 _0x2020024:
0008a4 91e0 0428 	LDS  R30,_bytes_to_rx_G101
0008a6 50e1      	SUBI R30,LOW(1)
0008a7 171e      	CP   R17,R30
0008a8 f020      	BRLO _0x2020026
0008a9 b7e6      	IN   R30,0x36
0008aa 70ef      	ANDI R30,LOW(0xF)
0008ab 68e0      	ORI  R30,0x80
0008ac c003      	RJMP _0x2020068
                 _0x2020026:
0008ad b7e6      	IN   R30,0x36
0008ae 70ef      	ANDI R30,LOW(0xF)
0008af 6ce0      	ORI  R30,LOW(0xC0)
                 _0x2020068:
0008b0 bfe6      	OUT  0x36,R30
0008b1 c0e2      	RJMP _0x2020016
                 _0x2020025:
0008b2 35e8      	CPI  R30,LOW(0x58)
0008b3 f429      	BRNE _0x2020028
0008b4 b1e3      	IN   R30,0x3
0008b5 01da      	MOVW R26,R20
0008b6 93ec      	ST   X,R30
0008b7 5f1f      	SUBI R17,-LOW(1)
0008b8 c002      	RJMP _0x2020029
                 _0x2020028:
0008b9 32e0      	CPI  R30,LOW(0x20)
0008ba f409      	BRNE _0x202002A
                 _0x2020029:
0008bb c002      	RJMP _0x202002B
                 _0x202002A:
0008bc 33e0      	CPI  R30,LOW(0x30)
0008bd f409      	BRNE _0x202002C
                 _0x202002B:
0008be c002      	RJMP _0x202002D
                 _0x202002C:
0008bf 34e8      	CPI  R30,LOW(0x48)
0008c0 f469      	BRNE _0x202002E
                 _0x202002D:
0008c1 3020      	CPI  R18,0
0008c2 f451      	BRNE _0x202002F
0008c3 fe26      	SBRS R2,6
0008c4 c003      	RJMP _0x2020030
0008c5 1703      	CP   R16,R19
0008c6 f028      	BRLO _0x2020032
0008c7 c005      	RJMP _0x2020033
                 _0x2020030:
0008c8 91e0 0428 	LDS  R30,_bytes_to_rx_G101
0008ca 171e      	CP   R17,R30
0008cb f408      	BRSH _0x2020034
                 _0x2020032:
0008cc e024      	LDI  R18,LOW(4)
                 _0x2020034:
                 _0x2020033:
                 _0x202002F:
                 _0x2020022:
0008cd c0c0      	RJMP _0x2020069
                 _0x202002E:
0008ce 33e8      	CPI  R30,LOW(0x38)
0008cf f429      	BRNE _0x2020037
0008d0 e022      	LDI  R18,LOW(2)
0008d1 b7e6      	IN   R30,0x36
0008d2 70ef      	ANDI R30,LOW(0xF)
0008d3 68e0      	ORI  R30,0x80
0008d4 c0bc      	RJMP _0x202006A
                 _0x2020037:
0008d5 36e8      	CPI  R30,LOW(0x68)
0008d6 f011      	BREQ _0x202003A
0008d7 37e8      	CPI  R30,LOW(0x78)
0008d8 f411      	BRNE _0x202003B
                 _0x202003A:
0008d9 e022      	LDI  R18,LOW(2)
0008da c005      	RJMP _0x202003C
                 _0x202003B:
0008db 36e0      	CPI  R30,LOW(0x60)
0008dc f011      	BREQ _0x202003F
0008dd 37e0      	CPI  R30,LOW(0x70)
0008de f491      	BRNE _0x2020040
                 _0x202003F:
0008df e020      	LDI  R18,LOW(0)
                 _0x202003C:
0008e0 e010      	LDI  R17,LOW(0)
0008e1 94e8      	CLT
0008e2 f826      	BLD  R2,6
0008e3 91e0 0429 	LDS  R30,_twi_rx_buffer_size_G101
0008e5 30e0      	CPI  R30,0
0008e6 f429      	BRNE _0x2020041
0008e7 e021      	LDI  R18,LOW(1)
0008e8 b7e6      	IN   R30,0x36
0008e9 70ef      	ANDI R30,LOW(0xF)
0008ea 68e0      	ORI  R30,0x80
0008eb c003      	RJMP _0x202006B
                 _0x2020041:
0008ec b7e6      	IN   R30,0x36
0008ed 70ef      	ANDI R30,LOW(0xF)
0008ee 6ce0      	ORI  R30,LOW(0xC0)
                 _0x202006B:
0008ef bfe6      	OUT  0x36,R30
0008f0 c0a3      	RJMP _0x2020016
                 _0x2020040:
0008f1 38e0      	CPI  R30,LOW(0x80)
0008f2 f011      	BREQ _0x2020044
0008f3 39e0      	CPI  R30,LOW(0x90)
0008f4 f529      	BRNE _0x2020045
                 _0x2020044:
0008f5 fe26      	SBRS R2,6
0008f6 c002      	RJMP _0x2020046
0008f7 e021      	LDI  R18,LOW(1)
0008f8 c095      	RJMP _0x2020047
                 _0x2020046:
0008f9 b1e3      	IN   R30,0x3
0008fa 01da      	MOVW R26,R20
0008fb 93ec      	ST   X,R30
0008fc 5f1f      	SUBI R17,-LOW(1)
0008fd 91e0 0429 	LDS  R30,_twi_rx_buffer_size_G101
0008ff 171e      	CP   R17,R30
000900 f4b0      	BRSH _0x2020048
000901 91e0 042a 	LDS  R30,_twi_slave_rx_handler_G101
000903 91f0 042b 	LDS  R31,_twi_slave_rx_handler_G101+1
000905 9730      	SBIW R30,0
000906 f411      	BRNE _0x2020049
000907 e026      	LDI  R18,LOW(6)
000908 c085      	RJMP _0x2020047
                 _0x2020049:
000909 e0a0      	LDI  R26,LOW(0)
                +
00090a 91e0 042a+LDS R30 , _twi_slave_rx_handler_G101 + ( 0 )
00090c 91f0 042b+LDS R31 , _twi_slave_rx_handler_G101 + ( 0 ) + 1
00090e 9509     +ICALL
                 	__CALL1MN _twi_slave_rx_handler_G101,0
00090f 30e0      	CPI  R30,0
000910 f029      	BREQ _0x202004A
000911 b7e6      	IN   R30,0x36
000912 70ef      	ANDI R30,LOW(0xF)
000913 6ce0      	ORI  R30,LOW(0xC0)
000914 bfe6      	OUT  0x36,R30
000915 c07e      	RJMP _0x2020016
                 _0x202004A:
000916 c002      	RJMP _0x202004B
                 _0x2020048:
000917 9468      	SET
000918 f826      	BLD  R2,6
                 _0x202004B:
000919 c002      	RJMP _0x202004C
                 _0x2020045:
00091a 38e8      	CPI  R30,LOW(0x88)
00091b f409      	BRNE _0x202004D
                 _0x202004C:
00091c c002      	RJMP _0x202004E
                 _0x202004D:
00091d 39e8      	CPI  R30,LOW(0x98)
00091e f429      	BRNE _0x202004F
                 _0x202004E:
00091f b7e6      	IN   R30,0x36
000920 70ef      	ANDI R30,LOW(0xF)
000921 68e0      	ORI  R30,0x80
000922 bfe6      	OUT  0x36,R30
000923 c070      	RJMP _0x2020016
                 _0x202004F:
000924 3ae0      	CPI  R30,LOW(0xA0)
000925 f4a9      	BRNE _0x2020050
000926 b7e6      	IN   R30,0x36
000927 70ef      	ANDI R30,LOW(0xF)
000928 6ce0      	ORI  R30,LOW(0xC0)
000929 bfe6      	OUT  0x36,R30
00092a 9468      	SET
00092b f827      	BLD  R2,7
00092c 91e0 042a 	LDS  R30,_twi_slave_rx_handler_G101
00092e 91f0 042b 	LDS  R31,_twi_slave_rx_handler_G101+1
000930 9730      	SBIW R30,0
000931 f039      	BREQ _0x2020051
000932 e0a1      	LDI  R26,LOW(1)
                +
000933 91e0 042a+LDS R30 , _twi_slave_rx_handler_G101 + ( 0 )
000935 91f0 042b+LDS R31 , _twi_slave_rx_handler_G101 + ( 0 ) + 1
000937 9509     +ICALL
                 	__CALL1MN _twi_slave_rx_handler_G101,0
000938 c001      	RJMP _0x2020052
                 _0x2020051:
000939 e026      	LDI  R18,LOW(6)
                 _0x2020052:
00093a c059      	RJMP _0x2020016
                 _0x2020050:
00093b 3be0      	CPI  R30,LOW(0xB0)
00093c f411      	BRNE _0x2020053
00093d e022      	LDI  R18,LOW(2)
00093e c002      	RJMP _0x2020054
                 _0x2020053:
00093f 3ae8      	CPI  R30,LOW(0xA8)
000940 f4b9      	BRNE _0x2020055
                 _0x2020054:
000941 91e0 042c 	LDS  R30,_twi_slave_tx_handler_G101
000943 91f0 042d 	LDS  R31,_twi_slave_tx_handler_G101+1
000945 9730      	SBIW R30,0
000946 f059      	BREQ _0x2020056
000947 e0a0      	LDI  R26,LOW(0)
                +
000948 91e0 042c+LDS R30 , _twi_slave_tx_handler_G101 + ( 0 )
00094a 91f0 042d+LDS R31 , _twi_slave_tx_handler_G101 + ( 0 ) + 1
00094c 9509     +ICALL
                 	__CALL1MN _twi_slave_tx_handler_G101,0
00094d 2f3e      	MOV  R19,R30
00094e 30e0      	CPI  R30,0
00094f f011      	BREQ _0x2020058
000950 e020      	LDI  R18,LOW(0)
000951 c002      	RJMP _0x2020059
                 _0x2020056:
                 _0x2020058:
000952 e026      	LDI  R18,LOW(6)
000953 c03a      	RJMP _0x2020047
                 _0x2020059:
000954 e000      	LDI  R16,LOW(0)
000955 94e8      	CLT
000956 f826      	BLD  R2,6
000957 c002      	RJMP _0x202005A
                 _0x2020055:
000958 3be8      	CPI  R30,LOW(0xB8)
000959 f4e1      	BRNE _0x202005B
                 _0x202005A:
00095a fe26      	SBRS R2,6
00095b c002      	RJMP _0x202005C
00095c e021      	LDI  R18,LOW(1)
00095d c030      	RJMP _0x2020047
                 _0x202005C:
00095e 2fe0      	MOV  R30,R16
00095f 5f0f      	SUBI R16,-1
000960 91a0 0423 	LDS  R26,_twi_tx_buffer_G101
000962 91b0 0424 	LDS  R27,_twi_tx_buffer_G101+1
000964 e0f0      	LDI  R31,0
000965 0fae      	ADD  R26,R30
000966 1fbf      	ADC  R27,R31
000967 91ec      	LD   R30,X
000968 b9e3      	OUT  0x3,R30
000969 1703      	CP   R16,R19
00096a f420      	BRSH _0x202005D
00096b b7e6      	IN   R30,0x36
00096c 70ef      	ANDI R30,LOW(0xF)
00096d 6ce0      	ORI  R30,LOW(0xC0)
00096e c005      	RJMP _0x202006C
                 _0x202005D:
00096f 9468      	SET
000970 f826      	BLD  R2,6
000971 b7e6      	IN   R30,0x36
000972 70ef      	ANDI R30,LOW(0xF)
000973 68e0      	ORI  R30,0x80
                 _0x202006C:
000974 bfe6      	OUT  0x36,R30
000975 c01e      	RJMP _0x2020016
                 _0x202005B:
000976 3ce0      	CPI  R30,LOW(0xC0)
000977 f011      	BREQ _0x2020060
000978 3ce8      	CPI  R30,LOW(0xC8)
000979 f489      	BRNE _0x2020061
                 _0x2020060:
00097a b7e6      	IN   R30,0x36
00097b 70ef      	ANDI R30,LOW(0xF)
00097c 6ce0      	ORI  R30,LOW(0xC0)
00097d bfe6      	OUT  0x36,R30
00097e 91e0 042c 	LDS  R30,_twi_slave_tx_handler_G101
000980 91f0 042d 	LDS  R31,_twi_slave_tx_handler_G101+1
000982 9730      	SBIW R30,0
000983 f031      	BREQ _0x2020062
000984 e0a1      	LDI  R26,LOW(1)
                +
000985 91e0 042c+LDS R30 , _twi_slave_tx_handler_G101 + ( 0 )
000987 91f0 042d+LDS R31 , _twi_slave_tx_handler_G101 + ( 0 ) + 1
000989 9509     +ICALL
                 	__CALL1MN _twi_slave_tx_handler_G101,0
                 _0x2020062:
00098a c007      	RJMP _0x2020035
                 _0x2020061:
00098b 30e0      	CPI  R30,0
00098c f439      	BRNE _0x2020016
00098d e023      	LDI  R18,LOW(3)
                 _0x2020047:
                 _0x2020069:
00098e b7e6      	IN   R30,0x36
00098f 70ef      	ANDI R30,LOW(0xF)
000990 6de0      	ORI  R30,LOW(0xD0)
                 _0x202006A:
000991 bfe6      	OUT  0x36,R30
                 _0x2020035:
000992 9468      	SET
000993 f827      	BLD  R2,7
                 _0x2020016:
000994 9310 01e0 	STS  _twi_rx_index,R17
000996 9300 01df 	STS  _twi_tx_index,R16
000998 9320 01e1 	STS  _twi_result,R18
00099a 9330 0425 	STS  _bytes_to_tx_G101,R19
00099c 940e 123f 	CALL __LOADLOCR6
00099e 9626      	ADIW R28,6
00099f 91e9      	LD   R30,Y+
0009a0 bfef      	OUT  SREG,R30
0009a1 91f9      	LD   R31,Y+
0009a2 91e9      	LD   R30,Y+
0009a3 91b9      	LD   R27,Y+
0009a4 91a9      	LD   R26,Y+
0009a5 9199      	LD   R25,Y+
0009a6 9189      	LD   R24,Y+
0009a7 9179      	LD   R23,Y+
0009a8 9169      	LD   R22,Y+
0009a9 90f9      	LD   R15,Y+
0009aa 9019      	LD   R1,Y+
0009ab 9009      	LD   R0,Y+
0009ac 9518      	RETI
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _ks0108_enable_G102:
                 ; .FSTART _ks0108_enable_G102
0009ad 0000      	nop
0009ae 9aaa      	SBI  0x15,2
0009af 0000      	nop
0009b0 9508      	RET
                 ; .FEND
                 _ks0108_disable_G102:
                 ; .FSTART _ks0108_disable_G102
0009b1 98aa      	CBI  0x15,2
0009b2 9aaf      	SBI  0x15,7
0009b3 9aae      	SBI  0x15,6
0009b4 9508      	RET
                 ; .FEND
                 _ks0108_rdbus_G102:
                 ; .FSTART _ks0108_rdbus_G102
0009b5 931a      	ST   -Y,R17
0009b6 dff6      	RCALL _ks0108_enable_G102
0009b7 b319      	IN   R17,25
0009b8 98aa      	CBI  0x15,2
0009b9 2fe1      	MOV  R30,R17
                 _0x214000C:
0009ba 9119      	LD   R17,Y+
0009bb 9508      	RET
                 ; .FEND
                 _ks0108_busy_G102:
                 ; .FSTART _ks0108_busy_G102
0009bc 93aa      	ST   -Y,R26
0009bd 931a      	ST   -Y,R17
0009be e0e0      	LDI  R30,LOW(0)
0009bf bbea      	OUT  0x1A,R30
0009c0 9aab      	SBI  0x15,3
0009c1 98ac      	CBI  0x15,4
0009c2 81a9      	LDD  R26,Y+1
0009c3 e0e2      	LDI  R30,LOW(2)
0009c4 1bea      	SUB  R30,R26
0009c5 2f1e      	MOV  R17,R30
0009c6 ff10      	SBRS R17,0
0009c7 c002      	RJMP _0x2040003
0009c8 9aaf      	SBI  0x15,7
0009c9 c001      	RJMP _0x2040004
                 _0x2040003:
0009ca 98af      	CBI  0x15,7
                 _0x2040004:
0009cb ff11      	SBRS R17,1
0009cc c002      	RJMP _0x2040005
0009cd 9aae      	SBI  0x15,6
0009ce c001      	RJMP _0x2040006
                 _0x2040005:
0009cf 98ae      	CBI  0x15,6
                 _0x2040006:
                 _0x2040007:
0009d0 dfe4      	RCALL _ks0108_rdbus_G102
0009d1 78e0      	ANDI R30,LOW(0x80)
0009d2 f7e9      	BRNE _0x2040007
0009d3 8118      	LDD  R17,Y+0
0009d4 940c 0fc7 	JMP  _0x2140003
                 ; .FEND
                 _ks0108_wrcmd_G102:
                 ; .FSTART _ks0108_wrcmd_G102
0009d6 93aa      	ST   -Y,R26
0009d7 81a9      	LDD  R26,Y+1
0009d8 dfe3      	RCALL _ks0108_busy_G102
0009d9 940e 10e6 	CALL SUBOPT_0x15
0009db 940c 0fc7 	JMP  _0x2140003
                 ; .FEND
                 _ks0108_setloc_G102:
                 ; .FSTART _ks0108_setloc_G102
                +
0009dd 91e0 042f+LDS R30 , _ks0108_coord_G102 + ( 1 )
                 	__GETB1MN _ks0108_coord_G102,1
0009df 93ea      	ST   -Y,R30
0009e0 91e0 042e 	LDS  R30,_ks0108_coord_G102
0009e2 73ef      	ANDI R30,LOW(0x3F)
0009e3 64e0      	ORI  R30,0x40
0009e4 2fae      	MOV  R26,R30
0009e5 dff0      	RCALL _ks0108_wrcmd_G102
                +
0009e6 91e0 042f+LDS R30 , _ks0108_coord_G102 + ( 1 )
                 	__GETB1MN _ks0108_coord_G102,1
0009e8 93ea      	ST   -Y,R30
                +
0009e9 91e0 0430+LDS R30 , _ks0108_coord_G102 + ( 2 )
                 	__GETB1MN _ks0108_coord_G102,2
0009eb 6be8      	ORI  R30,LOW(0xB8)
0009ec 2fae      	MOV  R26,R30
0009ed dfe8      	RCALL _ks0108_wrcmd_G102
0009ee 9508      	RET
                 ; .FEND
                 _ks0108_gotoxp_G102:
                 ; .FSTART _ks0108_gotoxp_G102
0009ef 93aa      	ST   -Y,R26
0009f0 81e9      	LDD  R30,Y+1
0009f1 93e0 042e 	STS  _ks0108_coord_G102,R30
0009f3 95e2      	SWAP R30
0009f4 70ef      	ANDI R30,0xF
0009f5 95e6      	LSR  R30
0009f6 95e6      	LSR  R30
                +
0009f7 93e0 042f+STS _ks0108_coord_G102 + ( 1 ) , R30
                 	__PUTB1MN _ks0108_coord_G102,1
0009f9 81e8      	LD   R30,Y
                +
0009fa 93e0 0430+STS _ks0108_coord_G102 + ( 2 ) , R30
                 	__PUTB1MN _ks0108_coord_G102,2
0009fc dfe0      	RCALL _ks0108_setloc_G102
0009fd 940c 0fc7 	JMP  _0x2140003
                 ; .FEND
                 _ks0108_nextx_G102:
                 ; .FSTART _ks0108_nextx_G102
0009ff 91a0 042e 	LDS  R26,_ks0108_coord_G102
000a01 5faf      	SUBI R26,-LOW(1)
000a02 93a0 042e 	STS  _ks0108_coord_G102,R26
000a04 38a0      	CPI  R26,LOW(0x80)
000a05 f018      	BRLO _0x204000A
000a06 e0e0      	LDI  R30,LOW(0)
000a07 93e0 042e 	STS  _ks0108_coord_G102,R30
                 _0x204000A:
000a09 91e0 042e 	LDS  R30,_ks0108_coord_G102
000a0b 73ef      	ANDI R30,LOW(0x3F)
000a0c f431      	BRNE _0x204000B
000a0d 91e0 042e 	LDS  R30,_ks0108_coord_G102
000a0f 93ea      	ST   -Y,R30
                +
000a10 91a0 0430+LDS R26 , _ks0108_coord_G102 + ( 2 )
                 	__GETB2MN _ks0108_coord_G102,2
000a12 dfdc      	RCALL _ks0108_gotoxp_G102
                 _0x204000B:
000a13 9508      	RET
                 ; .FEND
                 _ks0108_wrdata_G102:
                 ; .FSTART _ks0108_wrdata_G102
000a14 93aa      	ST   -Y,R26
                +
000a15 91a0 042f+LDS R26 , _ks0108_coord_G102 + ( 1 )
                 	__GETB2MN _ks0108_coord_G102,1
000a17 dfa4      	RCALL _ks0108_busy_G102
000a18 9aac      	SBI  0x15,4
000a19 940e 10e6 	CALL SUBOPT_0x15
                 _0x214000B:
000a1b 9621      	ADIW R28,1
000a1c 9508      	RET
                 ; .FEND
                 _ks0108_rddata_G102:
                 ; .FSTART _ks0108_rddata_G102
                +
000a1d 91a0 042f+LDS R26 , _ks0108_coord_G102 + ( 1 )
                 	__GETB2MN _ks0108_coord_G102,1
000a1f df9c      	RCALL _ks0108_busy_G102
000a20 e0e0      	LDI  R30,LOW(0)
000a21 bbea      	OUT  0x1A,R30
000a22 9aab      	SBI  0x15,3
000a23 9aac      	SBI  0x15,4
000a24 df90      	RCALL _ks0108_rdbus_G102
000a25 9508      	RET
                 ; .FEND
                 _ks0108_rdbyte_G102:
                 ; .FSTART _ks0108_rdbyte_G102
000a26 93aa      	ST   -Y,R26
000a27 81e9      	LDD  R30,Y+1
000a28 93ea      	ST   -Y,R30
000a29 81e9      	LDD  R30,Y+1
000a2a 940e 10ef 	CALL SUBOPT_0x16
000a2c dff0      	RCALL _ks0108_rddata_G102
000a2d dfaf      	RCALL _ks0108_setloc_G102
000a2e dfee      	RCALL _ks0108_rddata_G102
000a2f 940c 0fc7 	JMP  _0x2140003
                 ; .FEND
                 _glcd_init:
                 ; .FSTART _glcd_init
000a31 93ba      	ST   -Y,R27
000a32 93aa      	ST   -Y,R26
000a33 931a      	ST   -Y,R17
000a34 9aa2      	SBI  0x14,2
000a35 9aa3      	SBI  0x14,3
000a36 9aa4      	SBI  0x14,4
000a37 9aa5      	SBI  0x14,5
000a38 9aad      	SBI  0x15,5
000a39 9aa7      	SBI  0x14,7
000a3a 9aa6      	SBI  0x14,6
000a3b df75      	RCALL _ks0108_disable_G102
000a3c 98ad      	CBI  0x15,5
000a3d e6a4      	LDI  R26,LOW(100)
000a3e e0b0      	LDI  R27,0
000a3f 940e 1184 	CALL _delay_ms
000a41 9aad      	SBI  0x15,5
000a42 e010      	LDI  R17,LOW(0)
                 _0x204000C:
000a43 3012      	CPI  R17,2
000a44 f440      	BRSH _0x204000E
000a45 931a      	ST   -Y,R17
000a46 e3af      	LDI  R26,LOW(63)
000a47 df8e      	RCALL _ks0108_wrcmd_G102
000a48 931a      	ST   -Y,R17
000a49 9513      	INC  R17
000a4a eca0      	LDI  R26,LOW(192)
000a4b df8a      	RCALL _ks0108_wrcmd_G102
000a4c cff6      	RJMP _0x204000C
                 _0x204000E:
000a4d e0e1      	LDI  R30,LOW(1)
000a4e 93e0 01e2 	STS  _glcd_state,R30
000a50 e0e0      	LDI  R30,LOW(0)
                +
000a51 93e0 01e3+STS _glcd_state + ( 1 ) , R30
                 	__PUTB1MN _glcd_state,1
000a53 81e9      	LDD  R30,Y+1
000a54 81fa      	LDD  R31,Y+1+1
000a55 9730      	SBIW R30,0
000a56 f0a9      	BREQ _0x204000F
000a57 81a9      	LDD  R26,Y+1
000a58 81ba      	LDD  R27,Y+1+1
000a59 940e 1203 	CALL __GETW1P
                +
000a5b 93e0 01e6+STS _glcd_state + ( 4 ) , R30
000a5d 93f0 01e7+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
000a5f 9612      	ADIW R26,2
000a60 940e 1203 	CALL __GETW1P
                +
000a62 93e0 01fb+STS _glcd_state + ( 25 ) , R30
000a64 93f0 01fc+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
000a66 81a9      	LDD  R26,Y+1
000a67 81ba      	LDD  R27,Y+1+1
000a68 9614      	ADIW R26,4
000a69 940e 1203 	CALL __GETW1P
000a6b c00a      	RJMP _0x20400AC
                 _0x204000F:
000a6c e0e0      	LDI  R30,LOW(0)
000a6d e0f0      	LDI  R31,HIGH(0)
                +
000a6e 93e0 01e6+STS _glcd_state + ( 4 ) , R30
000a70 93f0 01e7+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
                +
000a72 93e0 01fb+STS _glcd_state + ( 25 ) , R30
000a74 93f0 01fc+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
                 _0x20400AC:
                +
000a76 93e0 01fd+STS _glcd_state + ( 27 ) , R30
000a78 93f0 01fe+STS _glcd_state + ( 27 ) + 1 , R31
                 	__PUTW1MN _glcd_state,27
000a7a e0e1      	LDI  R30,LOW(1)
                +
000a7b 93e0 01e8+STS _glcd_state + ( 6 ) , R30
                 	__PUTB1MN _glcd_state,6
                +
000a7d 93e0 01e9+STS _glcd_state + ( 7 ) , R30
                 	__PUTB1MN _glcd_state,7
000a7f 940e 105f 	CALL SUBOPT_0x5
000a81 e0e1      	LDI  R30,LOW(1)
                +
000a82 93e0 01f2+STS _glcd_state + ( 16 ) , R30
                 	__PUTB1MN _glcd_state,16
                +
000a84 efe3     +LDI R30 , LOW ( _glcd_state + ( 17 ) )
000a85 e0f1     +LDI R31 , HIGH ( _glcd_state + ( 17 ) )
                 	__POINTW1MN _glcd_state,17
000a86 93fa      	ST   -Y,R31
000a87 93ea      	ST   -Y,R30
000a88 efef      	LDI  R30,LOW(255)
000a89 93ea      	ST   -Y,R30
000a8a e0a8      	LDI  R26,LOW(8)
000a8b e0b0      	LDI  R27,0
000a8c 940e 0f95 	CALL _memset
000a8e d004      	RCALL _glcd_clear
000a8f e0e1      	LDI  R30,LOW(1)
000a90 8118      	LDD  R17,Y+0
000a91 940c 100e 	JMP  _0x2140002
                 ; .FEND
                 _glcd_clear:
                 ; .FSTART _glcd_clear
000a93 940e 123a 	CALL __SAVELOCR4
000a95 e000      	LDI  R16,0
000a96 e030      	LDI  R19,0
                +
000a97 91e0 01e3+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
000a99 30e0      	CPI  R30,0
000a9a f009      	BREQ _0x2040015
000a9b ef0f      	LDI  R16,LOW(255)
                 _0x2040015:
                 _0x2040016:
000a9c 3038      	CPI  R19,8
000a9d f478      	BRSH _0x2040018
000a9e e0e0      	LDI  R30,LOW(0)
000a9f 93ea      	ST   -Y,R30
000aa0 2fa3      	MOV  R26,R19
000aa1 5f3f      	SUBI R19,-1
000aa2 df4c      	RCALL _ks0108_gotoxp_G102
000aa3 e010      	LDI  R17,LOW(0)
                 _0x2040019:
000aa4 2fa1      	MOV  R26,R17
000aa5 5f1f      	SUBI R17,-1
000aa6 38a0      	CPI  R26,LOW(0x80)
000aa7 f420      	BRSH _0x204001B
000aa8 2fa0      	MOV  R26,R16
000aa9 940e 10f5 	CALL SUBOPT_0x17
000aab cff8      	RJMP _0x2040019
                 _0x204001B:
000aac cfef      	RJMP _0x2040016
                 _0x2040018:
000aad e0e0      	LDI  R30,LOW(0)
000aae 93ea      	ST   -Y,R30
000aaf e0a0      	LDI  R26,LOW(0)
000ab0 df3e      	RCALL _ks0108_gotoxp_G102
000ab1 e0e0      	LDI  R30,LOW(0)
000ab2 93ea      	ST   -Y,R30
000ab3 e0a0      	LDI  R26,LOW(0)
000ab4 d3dd      	RCALL _glcd_moveto
000ab5 940e 1241 	CALL __LOADLOCR4
000ab7 940c 102d 	JMP  _0x2140001
                 ; .FEND
                 _glcd_putpixel:
                 ; .FSTART _glcd_putpixel
000ab9 93aa      	ST   -Y,R26
000aba 931a      	ST   -Y,R17
000abb 930a      	ST   -Y,R16
000abc 81ac      	LDD  R26,Y+4
000abd 38a0      	CPI  R26,LOW(0x80)
000abe f418      	BRSH _0x204001D
000abf 81ab      	LDD  R26,Y+3
000ac0 34a0      	CPI  R26,LOW(0x40)
000ac1 f020      	BRLO _0x204001C
                 _0x204001D:
000ac2 8119      	LDD  R17,Y+1
000ac3 8108      	LDD  R16,Y+0
000ac4 940c 0fa3 	JMP  _0x2140004
                 _0x204001C:
000ac6 81ec      	LDD  R30,Y+4
000ac7 93ea      	ST   -Y,R30
000ac8 81ac      	LDD  R26,Y+4
000ac9 df5c      	RCALL _ks0108_rdbyte_G102
000aca 2f1e      	MOV  R17,R30
000acb df11      	RCALL _ks0108_setloc_G102
000acc 81eb      	LDD  R30,Y+3
000acd 70e7      	ANDI R30,LOW(0x7)
000ace e0a1      	LDI  R26,LOW(1)
000acf 940e 1196 	CALL __LSLB12
000ad1 2f0e      	MOV  R16,R30
000ad2 81ea      	LDD  R30,Y+2
000ad3 30e0      	CPI  R30,0
000ad4 f011      	BREQ _0x204001F
000ad5 2b10      	OR   R17,R16
000ad6 c003      	RJMP _0x2040020
                 _0x204001F:
000ad7 2fe0      	MOV  R30,R16
000ad8 95e0      	COM  R30
000ad9 231e      	AND  R17,R30
                 _0x2040020:
000ada 2fa1      	MOV  R26,R17
000adb df38      	RCALL _ks0108_wrdata_G102
000adc 8119      	LDD  R17,Y+1
000add 8108      	LDD  R16,Y+0
000ade 940c 0fa3 	JMP  _0x2140004
                 ; .FEND
                 _ks0108_wrmasked_G102:
                 ; .FSTART _ks0108_wrmasked_G102
000ae0 93aa      	ST   -Y,R26
000ae1 931a      	ST   -Y,R17
000ae2 81ed      	LDD  R30,Y+5
000ae3 93ea      	ST   -Y,R30
000ae4 81ad      	LDD  R26,Y+5
000ae5 df40      	RCALL _ks0108_rdbyte_G102
000ae6 2f1e      	MOV  R17,R30
000ae7 def5      	RCALL _ks0108_setloc_G102
000ae8 81e9      	LDD  R30,Y+1
000ae9 30e7      	CPI  R30,LOW(0x7)
000aea f011      	BREQ _0x204002B
000aeb 30e8      	CPI  R30,LOW(0x8)
000aec f439      	BRNE _0x204002C
                 _0x204002B:
000aed 81eb      	LDD  R30,Y+3
000aee 93ea      	ST   -Y,R30
000aef 81aa      	LDD  R26,Y+2
000af0 940e 0fc9 	CALL _glcd_mappixcolor1bit
000af2 83eb      	STD  Y+3,R30
000af3 c008      	RJMP _0x204002D
                 _0x204002C:
000af4 30e3      	CPI  R30,LOW(0x3)
000af5 f421      	BRNE _0x204002F
000af6 81eb      	LDD  R30,Y+3
000af7 95e0      	COM  R30
000af8 83eb      	STD  Y+3,R30
000af9 c002      	RJMP _0x2040030
                 _0x204002F:
000afa 30e0      	CPI  R30,0
000afb f421      	BRNE _0x2040031
                 _0x2040030:
                 _0x204002D:
000afc 81ea      	LDD  R30,Y+2
000afd 95e0      	COM  R30
000afe 231e      	AND  R17,R30
000aff c002      	RJMP _0x2040032
                 _0x2040031:
000b00 30e2      	CPI  R30,LOW(0x2)
000b01 f429      	BRNE _0x2040033
                 _0x2040032:
000b02 81ea      	LDD  R30,Y+2
000b03 81ab      	LDD  R26,Y+3
000b04 23ea      	AND  R30,R26
000b05 2b1e      	OR   R17,R30
000b06 c00e      	RJMP _0x2040029
                 _0x2040033:
000b07 30e1      	CPI  R30,LOW(0x1)
000b08 f429      	BRNE _0x2040034
000b09 81ea      	LDD  R30,Y+2
000b0a 81ab      	LDD  R26,Y+3
000b0b 23ea      	AND  R30,R26
000b0c 271e      	EOR  R17,R30
000b0d c007      	RJMP _0x2040029
                 _0x2040034:
000b0e 30e4      	CPI  R30,LOW(0x4)
000b0f f429      	BRNE _0x2040029
000b10 81ea      	LDD  R30,Y+2
000b11 95e0      	COM  R30
000b12 81ab      	LDD  R26,Y+3
000b13 2bea      	OR   R30,R26
000b14 231e      	AND  R17,R30
                 _0x2040029:
000b15 2fa1      	MOV  R26,R17
000b16 940e 10f5 	CALL SUBOPT_0x17
000b18 8118      	LDD  R17,Y+0
                 _0x214000A:
000b19 9626      	ADIW R28,6
000b1a 9508      	RET
                 ; .FEND
                 _glcd_block:
                 ; .FSTART _glcd_block
000b1b 93aa      	ST   -Y,R26
000b1c 9723      	SBIW R28,3
000b1d 940e 1238 	CALL __SAVELOCR6
000b1f 89a8      	LDD  R26,Y+16
000b20 38a0      	CPI  R26,LOW(0x80)
000b21 f448      	BRSH _0x2040037
000b22 85af      	LDD  R26,Y+15
000b23 34a0      	CPI  R26,LOW(0x40)
000b24 f430      	BRSH _0x2040037
000b25 85ae      	LDD  R26,Y+14
000b26 30a0      	CPI  R26,LOW(0x0)
000b27 f019      	BREQ _0x2040037
000b28 85ad      	LDD  R26,Y+13
000b29 30a0      	CPI  R26,LOW(0x0)
000b2a f409      	BRNE _0x2040036
                 _0x2040037:
000b2b c1c8      	RJMP _0x2140009
                 _0x2040036:
000b2c 85ee      	LDD  R30,Y+14
000b2d 87e8      	STD  Y+8,R30
000b2e 89a8      	LDD  R26,Y+16
000b2f 27bb      	CLR  R27
000b30 85ee      	LDD  R30,Y+14
000b31 e0f0      	LDI  R31,0
000b32 0fae      	ADD  R26,R30
000b33 1fbf      	ADC  R27,R31
000b34 38a1      	CPI  R26,LOW(0x81)
000b35 e0e0      	LDI  R30,HIGH(0x81)
000b36 07be      	CPC  R27,R30
000b37 f020      	BRLO _0x2040039
000b38 89a8      	LDD  R26,Y+16
000b39 e8e0      	LDI  R30,LOW(128)
000b3a 1bea      	SUB  R30,R26
000b3b 87ee      	STD  Y+14,R30
                 _0x2040039:
000b3c 852d      	LDD  R18,Y+13
000b3d 85af      	LDD  R26,Y+15
000b3e 27bb      	CLR  R27
000b3f 85ed      	LDD  R30,Y+13
000b40 e0f0      	LDI  R31,0
000b41 0fae      	ADD  R26,R30
000b42 1fbf      	ADC  R27,R31
000b43 34a1      	CPI  R26,LOW(0x41)
000b44 e0e0      	LDI  R30,HIGH(0x41)
000b45 07be      	CPC  R27,R30
000b46 f020      	BRLO _0x204003A
000b47 85af      	LDD  R26,Y+15
000b48 e4e0      	LDI  R30,LOW(64)
000b49 1bea      	SUB  R30,R26
000b4a 87ed      	STD  Y+13,R30
                 _0x204003A:
000b4b 85a9      	LDD  R26,Y+9
000b4c 30a6      	CPI  R26,LOW(0x6)
000b4d f009      	BREQ PC+2
000b4e c05b      	RJMP _0x204003B
000b4f 85ec      	LDD  R30,Y+12
000b50 30e1      	CPI  R30,LOW(0x1)
000b51 f409      	BRNE _0x204003F
000b52 c1a1      	RJMP _0x2140009
                 _0x204003F:
000b53 30e3      	CPI  R30,LOW(0x3)
000b54 f439      	BRNE _0x2040042
                +
000b55 91e0 01fd+LDS R30 , _glcd_state + ( 27 )
000b57 91f0 01fe+LDS R31 , _glcd_state + ( 27 ) + 1
                 	__GETW1MN _glcd_state,27
000b59 9730      	SBIW R30,0
000b5a f409      	BRNE _0x2040041
000b5b c198      	RJMP _0x2140009
                 _0x2040041:
                 _0x2040042:
000b5c 8508      	LDD  R16,Y+8
000b5d 85ed      	LDD  R30,Y+13
000b5e 95e6      	LSR  R30
000b5f 95e6      	LSR  R30
000b60 95e6      	LSR  R30
000b61 2f3e      	MOV  R19,R30
000b62 2fe2      	MOV  R30,R18
000b63 70e7      	ANDI R30,LOW(0x7)
000b64 f419      	BRNE _0x2040044
000b65 85ad      	LDD  R26,Y+13
000b66 172a      	CP   R18,R26
000b67 f0e9      	BREQ _0x2040043
                 _0x2040044:
000b68 2fa0      	MOV  R26,R16
000b69 27bb      	CLR  R27
000b6a 2fe3      	MOV  R30,R19
000b6b e0f0      	LDI  R31,0
000b6c 940e 11b0 	CALL __MULW12U
000b6e 85aa      	LDD  R26,Y+10
000b6f 85bb      	LDD  R27,Y+10+1
000b70 940e 10f9 	CALL SUBOPT_0x18
000b72 9526      	LSR  R18
000b73 9526      	LSR  R18
000b74 9526      	LSR  R18
000b75 2f53      	MOV  R21,R19
                 _0x2040046:
000b76 935f      	PUSH R21
000b77 5f5f      	SUBI R21,-1
000b78 2fe2      	MOV  R30,R18
000b79 91af      	POP  R26
000b7a 17ea      	CP   R30,R26
000b7b f048      	BRLO _0x2040048
000b7c 2f10      	MOV  R17,R16
                 _0x2040049:
000b7d 2fe1      	MOV  R30,R17
000b7e 5011      	SUBI R17,1
000b7f 30e0      	CPI  R30,0
000b80 f019      	BREQ _0x204004B
000b81 940e 10fe 	CALL SUBOPT_0x19
000b83 cff9      	RJMP _0x2040049
                 _0x204004B:
000b84 cff1      	RJMP _0x2040046
                 _0x2040048:
                 _0x2040043:
000b85 85ae      	LDD  R26,Y+14
000b86 170a      	CP   R16,R26
000b87 f111      	BREQ _0x204004C
000b88 85ee      	LDD  R30,Y+14
000b89 85aa      	LDD  R26,Y+10
000b8a 85bb      	LDD  R27,Y+10+1
000b8b e0f0      	LDI  R31,0
000b8c 940e 10f9 	CALL SUBOPT_0x18
000b8e 85ed      	LDD  R30,Y+13
000b8f 70e7      	ANDI R30,LOW(0x7)
000b90 f009      	BREQ _0x204004D
000b91 5f3f      	SUBI R19,-LOW(1)
                 _0x204004D:
000b92 e020      	LDI  R18,LOW(0)
                 _0x204004E:
000b93 932f      	PUSH R18
000b94 5f2f      	SUBI R18,-1
000b95 2fe3      	MOV  R30,R19
000b96 91af      	POP  R26
000b97 17ae      	CP   R26,R30
000b98 f488      	BRSH _0x2040050
000b99 851e      	LDD  R17,Y+14
                 _0x2040051:
000b9a 931f      	PUSH R17
000b9b 5f1f      	SUBI R17,-1
000b9c 2fe0      	MOV  R30,R16
000b9d 91af      	POP  R26
000b9e 17ae      	CP   R26,R30
000b9f f418      	BRSH _0x2040053
000ba0 940e 10fe 	CALL SUBOPT_0x19
000ba2 cff7      	RJMP _0x2040051
                 _0x2040053:
000ba3 85ee      	LDD  R30,Y+14
000ba4 81ae      	LDD  R26,Y+6
000ba5 81bf      	LDD  R27,Y+6+1
000ba6 e0f0      	LDI  R31,0
000ba7 940e 10f9 	CALL SUBOPT_0x18
000ba9 cfe9      	RJMP _0x204004E
                 _0x2040050:
                 _0x204004C:
                 _0x204003B:
000baa 85ef      	LDD  R30,Y+15
000bab 70e7      	ANDI R30,LOW(0x7)
000bac 2f3e      	MOV  R19,R30
                 _0x2040054:
000bad 85ed      	LDD  R30,Y+13
000bae 30e0      	CPI  R30,0
000baf f409      	BRNE PC+2
000bb0 c143      	RJMP _0x2040056
000bb1 85ea      	LDD  R30,Y+10
000bb2 85fb      	LDD  R31,Y+10+1
000bb3 83ee      	STD  Y+6,R30
000bb4 83ff      	STD  Y+6+1,R31
000bb5 e010      	LDI  R17,LOW(0)
000bb6 8908      	LDD  R16,Y+16
000bb7 3030      	CPI  R19,0
000bb8 f009      	BREQ PC+2
000bb9 c065      	RJMP _0x2040057
000bba 85ad      	LDD  R26,Y+13
000bbb 30a8      	CPI  R26,LOW(0x8)
000bbc f408      	BRSH PC+2
000bbd c05c      	RJMP _0x2040058
000bbe 85e9      	LDD  R30,Y+9
000bbf 30e0      	CPI  R30,0
000bc0 f011      	BREQ _0x204005D
000bc1 30e3      	CPI  R30,LOW(0x3)
000bc2 f409      	BRNE _0x204005E
                 _0x204005D:
000bc3 c002      	RJMP _0x204005F
                 _0x204005E:
000bc4 30e7      	CPI  R30,LOW(0x7)
000bc5 f409      	BRNE _0x2040060
                 _0x204005F:
000bc6 c002      	RJMP _0x2040061
                 _0x2040060:
000bc7 30e8      	CPI  R30,LOW(0x8)
000bc8 f409      	BRNE _0x2040062
                 _0x2040061:
000bc9 c002      	RJMP _0x2040063
                 _0x2040062:
000bca 30e6      	CPI  R30,LOW(0x6)
000bcb f409      	BRNE _0x2040064
                 _0x2040063:
000bcc c002      	RJMP _0x2040065
                 _0x2040064:
000bcd 30e9      	CPI  R30,LOW(0x9)
000bce f409      	BRNE _0x2040066
                 _0x2040065:
000bcf c002      	RJMP _0x2040067
                 _0x2040066:
000bd0 30ea      	CPI  R30,LOW(0xA)
000bd1 f421      	BRNE _0x204005B
                 _0x2040067:
000bd2 930a      	ST   -Y,R16
000bd3 89e8      	LDD  R30,Y+16
000bd4 940e 10ef 	CALL SUBOPT_0x16
                 _0x204005B:
                 _0x2040069:
000bd6 931f      	PUSH R17
000bd7 5f1f      	SUBI R17,-1
000bd8 85ee      	LDD  R30,Y+14
000bd9 91af      	POP  R26
000bda 17ae      	CP   R26,R30
000bdb f5b8      	BRSH _0x204006B
000bdc 85a9      	LDD  R26,Y+9
000bdd 30a6      	CPI  R26,LOW(0x6)
000bde f461      	BRNE _0x204006C
000bdf de3d      	RCALL _ks0108_rddata_G102
000be0 ddfc      	RCALL _ks0108_setloc_G102
000be1 940e 110b 	CALL SUBOPT_0x1A
000be3 93fa      	ST   -Y,R31
000be4 93ea      	ST   -Y,R30
000be5 de37      	RCALL _ks0108_rddata_G102
000be6 2fae      	MOV  R26,R30
000be7 940e 1010 	CALL _glcd_writemem
000be9 de15      	RCALL _ks0108_nextx_G102
000bea c027      	RJMP _0x204006D
                 _0x204006C:
000beb 85e9      	LDD  R30,Y+9
000bec 30e9      	CPI  R30,LOW(0x9)
000bed f411      	BRNE _0x2040071
000bee e050      	LDI  R21,LOW(0)
000bef c00e      	RJMP _0x2040072
                 _0x2040071:
000bf0 30ea      	CPI  R30,LOW(0xA)
000bf1 f411      	BRNE _0x2040070
000bf2 ef5f      	LDI  R21,LOW(255)
000bf3 c00a      	RJMP _0x2040072
                 _0x2040070:
000bf4 940e 110b 	CALL SUBOPT_0x1A
000bf6 940e 1114 	CALL SUBOPT_0x1B
000bf8 2f5e      	MOV  R21,R30
000bf9 85e9      	LDD  R30,Y+9
000bfa 30e7      	CPI  R30,LOW(0x7)
000bfb f011      	BREQ _0x2040079
000bfc 30e8      	CPI  R30,LOW(0x8)
000bfd f421      	BRNE _0x204007A
                 _0x2040079:
                 _0x2040072:
000bfe 940e 111a 	CALL SUBOPT_0x1C
000c00 2f5e      	MOV  R21,R30
000c01 c006      	RJMP _0x204007B
                 _0x204007A:
000c02 30e3      	CPI  R30,LOW(0x3)
000c03 f411      	BRNE _0x204007D
000c04 9550      	COM  R21
000c05 c002      	RJMP _0x204007E
                 _0x204007D:
000c06 30e0      	CPI  R30,0
000c07 f421      	BRNE _0x2040080
                 _0x204007E:
                 _0x204007B:
000c08 2fa5      	MOV  R26,R21
000c09 940e 10f5 	CALL SUBOPT_0x17
000c0b c006      	RJMP _0x2040077
                 _0x2040080:
000c0c 940e 111e 	CALL SUBOPT_0x1D
000c0e efef      	LDI  R30,LOW(255)
000c0f 93ea      	ST   -Y,R30
000c10 85ad      	LDD  R26,Y+13
000c11 dece      	RCALL _ks0108_wrmasked_G102
                 _0x2040077:
                 _0x204006D:
000c12 cfc3      	RJMP _0x2040069
                 _0x204006B:
000c13 85ef      	LDD  R30,Y+15
000c14 5fe8      	SUBI R30,-LOW(8)
000c15 87ef      	STD  Y+15,R30
000c16 85ed      	LDD  R30,Y+13
000c17 50e8      	SUBI R30,LOW(8)
000c18 87ed      	STD  Y+13,R30
000c19 c0d1      	RJMP _0x2040081
                 _0x2040058:
000c1a 855d      	LDD  R21,Y+13
000c1b e020      	LDI  R18,LOW(0)
000c1c e0e0      	LDI  R30,LOW(0)
000c1d 87ed      	STD  Y+13,R30
000c1e c07a      	RJMP _0x2040082
                 _0x2040057:
000c1f 2fe3      	MOV  R30,R19
000c20 85ad      	LDD  R26,Y+13
000c21 0fae      	ADD  R26,R30
000c22 30a9      	CPI  R26,LOW(0x9)
000c23 f420      	BRSH _0x2040083
000c24 852d      	LDD  R18,Y+13
000c25 e0e0      	LDI  R30,LOW(0)
000c26 87ed      	STD  Y+13,R30
000c27 c003      	RJMP _0x2040084
                 _0x2040083:
000c28 e0e8      	LDI  R30,LOW(8)
000c29 1be3      	SUB  R30,R19
000c2a 2f2e      	MOV  R18,R30
                 _0x2040084:
000c2b 933a      	ST   -Y,R19
000c2c 2fa2      	MOV  R26,R18
000c2d 940e 0fbe 	CALL _glcd_getmask
000c2f 2f4e      	MOV  R20,R30
000c30 85e9      	LDD  R30,Y+9
000c31 30e6      	CPI  R30,LOW(0x6)
000c32 f4f1      	BRNE _0x2040088
                 _0x2040089:
000c33 931f      	PUSH R17
000c34 5f1f      	SUBI R17,-1
000c35 85ee      	LDD  R30,Y+14
000c36 91af      	POP  R26
000c37 17ae      	CP   R26,R30
000c38 f4b8      	BRSH _0x204008B
000c39 940e 1124 	CALL SUBOPT_0x1E
000c3b 2fae      	MOV  R26,R30
000c3c 2fe3      	MOV  R30,R19
000c3d 940e 119e 	CALL __LSRB12
000c3f 940e 112b 	CALL SUBOPT_0x1F
000c41 2fe3      	MOV  R30,R19
000c42 2fa4      	MOV  R26,R20
000c43 940e 119e 	CALL __LSRB12
000c45 95e0      	COM  R30
000c46 21e1      	AND  R30,R1
000c47 2b5e      	OR   R21,R30
000c48 940e 110b 	CALL SUBOPT_0x1A
000c4a 93fa      	ST   -Y,R31
000c4b 93ea      	ST   -Y,R30
000c4c 2fa5      	MOV  R26,R21
000c4d 940e 1010 	CALL _glcd_writemem
000c4f cfe3      	RJMP _0x2040089
                 _0x204008B:
000c50 c02c      	RJMP _0x2040087
                 _0x2040088:
000c51 30e9      	CPI  R30,LOW(0x9)
000c52 f411      	BRNE _0x204008C
000c53 e050      	LDI  R21,LOW(0)
000c54 c003      	RJMP _0x204008D
                 _0x204008C:
000c55 30ea      	CPI  R30,LOW(0xA)
000c56 f4a9      	BRNE _0x2040093
000c57 ef5f      	LDI  R21,LOW(255)
                 _0x204008D:
000c58 940e 111a 	CALL SUBOPT_0x1C
000c5a 2fae      	MOV  R26,R30
000c5b 2fe3      	MOV  R30,R19
000c5c 940e 1196 	CALL __LSLB12
000c5e 2f5e      	MOV  R21,R30
                 _0x2040090:
000c5f 931f      	PUSH R17
000c60 5f1f      	SUBI R17,-1
000c61 85ee      	LDD  R30,Y+14
000c62 91af      	POP  R26
000c63 17ae      	CP   R26,R30
000c64 f430      	BRSH _0x2040092
000c65 940e 111e 	CALL SUBOPT_0x1D
000c67 934a      	ST   -Y,R20
000c68 e0a0      	LDI  R26,LOW(0)
000c69 de76      	RCALL _ks0108_wrmasked_G102
000c6a cff4      	RJMP _0x2040090
                 _0x2040092:
000c6b c011      	RJMP _0x2040087
                 _0x2040093:
                 _0x2040094:
000c6c 931f      	PUSH R17
000c6d 5f1f      	SUBI R17,-1
000c6e 85ee      	LDD  R30,Y+14
000c6f 91af      	POP  R26
000c70 17ae      	CP   R26,R30
000c71 f458      	BRSH _0x2040096
000c72 940e 1136 	CALL SUBOPT_0x20
000c74 2fae      	MOV  R26,R30
000c75 2fe3      	MOV  R30,R19
000c76 940e 1196 	CALL __LSLB12
000c78 93ea      	ST   -Y,R30
000c79 934a      	ST   -Y,R20
000c7a 85ad      	LDD  R26,Y+13
000c7b de64      	RCALL _ks0108_wrmasked_G102
000c7c cfef      	RJMP _0x2040094
                 _0x2040096:
                 _0x2040087:
000c7d 85ed      	LDD  R30,Y+13
000c7e 30e0      	CPI  R30,0
000c7f f409      	BRNE _0x2040097
000c80 c073      	RJMP _0x2040056
                 _0x2040097:
000c81 85ad      	LDD  R26,Y+13
000c82 30a8      	CPI  R26,LOW(0x8)
000c83 f428      	BRSH _0x2040098
000c84 85ed      	LDD  R30,Y+13
000c85 1be2      	SUB  R30,R18
000c86 2f5e      	MOV  R21,R30
000c87 e0e0      	LDI  R30,LOW(0)
000c88 c003      	RJMP _0x20400AD
                 _0x2040098:
000c89 2f53      	MOV  R21,R19
000c8a 85ed      	LDD  R30,Y+13
000c8b 50e8      	SUBI R30,LOW(8)
                 _0x20400AD:
000c8c 87ed      	STD  Y+13,R30
000c8d e010      	LDI  R17,LOW(0)
000c8e 85ef      	LDD  R30,Y+15
000c8f 5fe8      	SUBI R30,-LOW(8)
000c90 87ef      	STD  Y+15,R30
000c91 e0e8      	LDI  R30,LOW(8)
000c92 1be3      	SUB  R30,R19
000c93 2f2e      	MOV  R18,R30
000c94 8908      	LDD  R16,Y+16
000c95 85ea      	LDD  R30,Y+10
000c96 85fb      	LDD  R31,Y+10+1
000c97 83ee      	STD  Y+6,R30
000c98 83ff      	STD  Y+6+1,R31
                 _0x2040082:
000c99 2fe5      	MOV  R30,R21
000c9a e0f0      	LDI  R31,0
000c9b 5bee      	SUBI R30,LOW(-__glcd_mask*2)
000c9c 4ffa      	SBCI R31,HIGH(-__glcd_mask*2)
000c9d 9144      	LPM  R20,Z
000c9e 85e9      	LDD  R30,Y+9
000c9f 30e6      	CPI  R30,LOW(0x6)
000ca0 f4f1      	BRNE _0x204009D
                 _0x204009E:
000ca1 931f      	PUSH R17
000ca2 5f1f      	SUBI R17,-1
000ca3 85ee      	LDD  R30,Y+14
000ca4 91af      	POP  R26
000ca5 17ae      	CP   R26,R30
000ca6 f4b8      	BRSH _0x20400A0
000ca7 940e 1124 	CALL SUBOPT_0x1E
000ca9 2fae      	MOV  R26,R30
000caa 2fe2      	MOV  R30,R18
000cab 940e 1196 	CALL __LSLB12
000cad 940e 112b 	CALL SUBOPT_0x1F
000caf 2fe2      	MOV  R30,R18
000cb0 2fa4      	MOV  R26,R20
000cb1 940e 1196 	CALL __LSLB12
000cb3 95e0      	COM  R30
000cb4 21e1      	AND  R30,R1
000cb5 2b5e      	OR   R21,R30
000cb6 940e 110b 	CALL SUBOPT_0x1A
000cb8 93fa      	ST   -Y,R31
000cb9 93ea      	ST   -Y,R30
000cba 2fa5      	MOV  R26,R21
000cbb 940e 1010 	CALL _glcd_writemem
000cbd cfe3      	RJMP _0x204009E
                 _0x20400A0:
000cbe c02c      	RJMP _0x204009C
                 _0x204009D:
000cbf 30e9      	CPI  R30,LOW(0x9)
000cc0 f411      	BRNE _0x20400A1
000cc1 e050      	LDI  R21,LOW(0)
000cc2 c003      	RJMP _0x20400A2
                 _0x20400A1:
000cc3 30ea      	CPI  R30,LOW(0xA)
000cc4 f4a9      	BRNE _0x20400A8
000cc5 ef5f      	LDI  R21,LOW(255)
                 _0x20400A2:
000cc6 940e 111a 	CALL SUBOPT_0x1C
000cc8 2fae      	MOV  R26,R30
000cc9 2fe2      	MOV  R30,R18
000cca 940e 119e 	CALL __LSRB12
000ccc 2f5e      	MOV  R21,R30
                 _0x20400A5:
000ccd 931f      	PUSH R17
000cce 5f1f      	SUBI R17,-1
000ccf 85ee      	LDD  R30,Y+14
000cd0 91af      	POP  R26
000cd1 17ae      	CP   R26,R30
000cd2 f430      	BRSH _0x20400A7
000cd3 940e 111e 	CALL SUBOPT_0x1D
000cd5 934a      	ST   -Y,R20
000cd6 e0a0      	LDI  R26,LOW(0)
000cd7 de08      	RCALL _ks0108_wrmasked_G102
000cd8 cff4      	RJMP _0x20400A5
                 _0x20400A7:
000cd9 c011      	RJMP _0x204009C
                 _0x20400A8:
                 _0x20400A9:
000cda 931f      	PUSH R17
000cdb 5f1f      	SUBI R17,-1
000cdc 85ee      	LDD  R30,Y+14
000cdd 91af      	POP  R26
000cde 17ae      	CP   R26,R30
000cdf f458      	BRSH _0x20400AB
000ce0 940e 1136 	CALL SUBOPT_0x20
000ce2 2fae      	MOV  R26,R30
000ce3 2fe2      	MOV  R30,R18
000ce4 940e 119e 	CALL __LSRB12
000ce6 93ea      	ST   -Y,R30
000ce7 934a      	ST   -Y,R20
000ce8 85ad      	LDD  R26,Y+13
000ce9 ddf6      	RCALL _ks0108_wrmasked_G102
000cea cfef      	RJMP _0x20400A9
                 _0x20400AB:
                 _0x204009C:
                 _0x2040081:
000ceb 85e8      	LDD  R30,Y+8
000cec 85aa      	LDD  R26,Y+10
000ced 85bb      	LDD  R27,Y+10+1
000cee e0f0      	LDI  R31,0
000cef 0fea      	ADD  R30,R26
000cf0 1ffb      	ADC  R31,R27
000cf1 87ea      	STD  Y+10,R30
000cf2 87fb      	STD  Y+10+1,R31
000cf3 ceb9      	RJMP _0x2040054
                 _0x2040056:
                 _0x2140009:
000cf4 940e 123f 	CALL __LOADLOCR6
000cf6 9661      	ADIW R28,17
000cf7 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _glcd_clipx:
                 ; .FSTART _glcd_clipx
000cf8 940e 1143 	CALL SUBOPT_0x21
000cfa f024      	BRLT _0x2060003
000cfb e0e0      	LDI  R30,LOW(0)
000cfc e0f0      	LDI  R31,HIGH(0)
000cfd 940c 0fc7 	JMP  _0x2140003
                 _0x2060003:
000cff 81a8      	LD   R26,Y
000d00 81b9      	LDD  R27,Y+1
000d01 38a0      	CPI  R26,LOW(0x80)
000d02 e0e0      	LDI  R30,HIGH(0x80)
000d03 07be      	CPC  R27,R30
000d04 f024      	BRLT _0x2060004
000d05 e7ef      	LDI  R30,LOW(127)
000d06 e0f0      	LDI  R31,HIGH(127)
000d07 940c 0fc7 	JMP  _0x2140003
                 _0x2060004:
000d09 81e8      	LD   R30,Y
000d0a 81f9      	LDD  R31,Y+1
000d0b 940c 0fc7 	JMP  _0x2140003
                 ; .FEND
                 _glcd_clipy:
                 ; .FSTART _glcd_clipy
000d0d 940e 1143 	CALL SUBOPT_0x21
000d0f f024      	BRLT _0x2060005
000d10 e0e0      	LDI  R30,LOW(0)
000d11 e0f0      	LDI  R31,HIGH(0)
000d12 940c 0fc7 	JMP  _0x2140003
                 _0x2060005:
000d14 81a8      	LD   R26,Y
000d15 81b9      	LDD  R27,Y+1
000d16 34a0      	CPI  R26,LOW(0x40)
000d17 e0e0      	LDI  R30,HIGH(0x40)
000d18 07be      	CPC  R27,R30
000d19 f024      	BRLT _0x2060006
000d1a e3ef      	LDI  R30,LOW(63)
000d1b e0f0      	LDI  R31,HIGH(63)
000d1c 940c 0fc7 	JMP  _0x2140003
                 _0x2060006:
000d1e 81e8      	LD   R30,Y
000d1f 81f9      	LDD  R31,Y+1
000d20 940c 0fc7 	JMP  _0x2140003
                 ; .FEND
                 _glcd_clrpixel:
                 ; .FSTART _glcd_clrpixel
000d22 93aa      	ST   -Y,R26
000d23 81e9      	LDD  R30,Y+1
000d24 93ea      	ST   -Y,R30
000d25 81e9      	LDD  R30,Y+1
000d26 93ea      	ST   -Y,R30
                +
000d27 91a0 01e3+LDS R26 , _glcd_state + ( 1 )
                 	__GETB2MN _glcd_state,1
000d29 dd8f      	RCALL _glcd_putpixel
000d2a 940c 0fc7 	JMP  _0x2140003
                 ; .FEND
                 _glcd_imagesize:
                 ; .FSTART _glcd_imagesize
000d2c 93aa      	ST   -Y,R26
000d2d 931a      	ST   -Y,R17
000d2e 81aa      	LDD  R26,Y+2
000d2f 38a0      	CPI  R26,LOW(0x80)
000d30 f418      	BRSH _0x2060008
000d31 81a9      	LDD  R26,Y+1
000d32 34a0      	CPI  R26,LOW(0x40)
000d33 f038      	BRLO _0x2060007
                 _0x2060008:
                +
000d34 e0e0     +LDI R30 , LOW ( 0x0 )
000d35 e0f0     +LDI R31 , HIGH ( 0x0 )
000d36 e060     +LDI R22 , BYTE3 ( 0x0 )
000d37 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000d38 8118      	LDD  R17,Y+0
000d39 940c 100e 	JMP  _0x2140002
                 _0x2060007:
000d3b 81e9      	LDD  R30,Y+1
000d3c 70e7      	ANDI R30,LOW(0x7)
000d3d 2f1e      	MOV  R17,R30
000d3e 81e9      	LDD  R30,Y+1
000d3f 95e6      	LSR  R30
000d40 95e6      	LSR  R30
000d41 95e6      	LSR  R30
000d42 83e9      	STD  Y+1,R30
000d43 3010      	CPI  R17,0
000d44 f011      	BREQ _0x206000A
000d45 5fef      	SUBI R30,-LOW(1)
000d46 83e9      	STD  Y+1,R30
                 _0x206000A:
000d47 81aa      	LDD  R26,Y+2
000d48 27bb      	CLR  R27
000d49 2788      	CLR  R24
000d4a 2799      	CLR  R25
000d4b 81e9      	LDD  R30,Y+1
000d4c 27ff      	CLR  R31
000d4d 2766      	CLR  R22
000d4e 2777      	CLR  R23
000d4f 940e 11b8 	CALL __MULD12U
                +
000d51 5fec     +SUBI R30 , LOW ( - 4 )
000d52 4fff     +SBCI R31 , HIGH ( - 4 )
000d53 4f6f     +SBCI R22 , BYTE3 ( - 4 )
000d54 4f7f     +SBCI R23 , BYTE4 ( - 4 )
                 	__ADDD1N 4
000d55 8118      	LDD  R17,Y+0
000d56 940c 100e 	JMP  _0x2140002
                 ; .FEND
                 _glcd_getcharw_G103:
                 ; .FSTART _glcd_getcharw_G103
000d58 93ba      	ST   -Y,R27
000d59 93aa      	ST   -Y,R26
000d5a 9723      	SBIW R28,3
000d5b 940e 114a 	CALL SUBOPT_0x22
000d5d 018f      	MOVW R16,R30
000d5e 2e00      	MOV  R0,R16
000d5f 2a01      	OR   R0,R17
000d60 f419      	BRNE _0x206000B
000d61 e0e0      	LDI  R30,LOW(0)
000d62 e0f0      	LDI  R31,HIGH(0)
000d63 c05f      	RJMP _0x2140008
                 _0x206000B:
000d64 940e 1151 	CALL SUBOPT_0x23
000d66 820f      	STD  Y+7,R0
000d67 940e 1151 	CALL SUBOPT_0x23
000d69 820e      	STD  Y+6,R0
000d6a 940e 1151 	CALL SUBOPT_0x23
000d6c 8608      	STD  Y+8,R0
000d6d 85eb      	LDD  R30,Y+11
000d6e 85a8      	LDD  R26,Y+8
000d6f 17ea      	CP   R30,R26
000d70 f418      	BRSH _0x206000C
000d71 e0e0      	LDI  R30,LOW(0)
000d72 e0f0      	LDI  R31,HIGH(0)
000d73 c04f      	RJMP _0x2140008
                 _0x206000C:
000d74 01f8      	MOVW R30,R16
                +
000d75 5f0f     +SUBI R16 , LOW ( - 1 )
000d76 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000d77 9154      	LPM  R21,Z
000d78 85a8      	LDD  R26,Y+8
000d79 27bb      	CLR  R27
000d7a 27ee      	CLR  R30
000d7b 0fa5      	ADD  R26,R21
000d7c 1fbe      	ADC  R27,R30
000d7d 85eb      	LDD  R30,Y+11
000d7e e0f0      	LDI  R31,0
000d7f 17ea      	CP   R30,R26
000d80 07fb      	CPC  R31,R27
000d81 f018      	BRLO _0x206000D
000d82 e0e0      	LDI  R30,LOW(0)
000d83 e0f0      	LDI  R31,HIGH(0)
000d84 c03e      	RJMP _0x2140008
                 _0x206000D:
000d85 81ee      	LDD  R30,Y+6
000d86 95e6      	LSR  R30
000d87 95e6      	LSR  R30
000d88 95e6      	LSR  R30
000d89 2f4e      	MOV  R20,R30
000d8a 81ee      	LDD  R30,Y+6
000d8b 70e7      	ANDI R30,LOW(0x7)
000d8c f009      	BREQ _0x206000E
000d8d 5f4f      	SUBI R20,-LOW(1)
                 _0x206000E:
000d8e 81ef      	LDD  R30,Y+7
000d8f 30e0      	CPI  R30,0
000d90 f0a1      	BREQ _0x206000F
000d91 85a9      	LDD  R26,Y+9
000d92 85ba      	LDD  R27,Y+9+1
000d93 93ec      	ST   X,R30
000d94 85a8      	LDD  R26,Y+8
000d95 85eb      	LDD  R30,Y+11
000d96 1bea      	SUB  R30,R26
000d97 e0f0      	LDI  R31,0
000d98 01df      	MOVW R26,R30
000d99 81ef      	LDD  R30,Y+7
000d9a e0f0      	LDI  R31,0
000d9b 940e 11b0 	CALL __MULW12U
000d9d 01df      	MOVW R26,R30
000d9e 2fe4      	MOV  R30,R20
000d9f e0f0      	LDI  R31,0
000da0 940e 11b0 	CALL __MULW12U
000da2 0fe0      	ADD  R30,R16
000da3 1ff1      	ADC  R31,R17
000da4 c01e      	RJMP _0x2140008
                 _0x206000F:
000da5 0198      	MOVW R18,R16
000da6 2fe5      	MOV  R30,R21
000da7 e0f0      	LDI  R31,0
                +
000da8 0f0e     +ADD R16 , R30
000da9 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
                 _0x2060010:
000daa 85a8      	LDD  R26,Y+8
000dab 5faf      	SUBI R26,-LOW(1)
000dac 87a8      	STD  Y+8,R26
000dad 50a1      	SUBI R26,LOW(1)
000dae 85eb      	LDD  R30,Y+11
000daf 17ae      	CP   R26,R30
000db0 f460      	BRSH _0x2060012
000db1 01f9      	MOVW R30,R18
                +
000db2 5f2f     +SUBI R18 , LOW ( - 1 )
000db3 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000db4 91a4      	LPM  R26,Z
000db5 e0b0      	LDI  R27,0
000db6 2fe4      	MOV  R30,R20
000db7 e0f0      	LDI  R31,0
000db8 940e 11b0 	CALL __MULW12U
                +
000dba 0f0e     +ADD R16 , R30
000dbb 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
000dbc cfed      	RJMP _0x2060010
                 _0x2060012:
000dbd 01f9      	MOVW R30,R18
000dbe 91e4      	LPM  R30,Z
000dbf 85a9      	LDD  R26,Y+9
000dc0 85ba      	LDD  R27,Y+9+1
000dc1 93ec      	ST   X,R30
000dc2 01f8      	MOVW R30,R16
                 _0x2140008:
000dc3 940e 123f 	CALL __LOADLOCR6
000dc5 962c      	ADIW R28,12
000dc6 9508      	RET
                 ; .FEND
                 _glcd_new_line_G103:
                 ; .FSTART _glcd_new_line_G103
000dc7 e0e0      	LDI  R30,LOW(0)
                +
000dc8 93e0 01e4+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
                +
000dca 91a0 01e5+LDS R26 , _glcd_state + ( 3 )
                 	__GETB2MN _glcd_state,3
000dcc 27bb      	CLR  R27
000dcd 940e 1156 	CALL SUBOPT_0x24
000dcf e0f0      	LDI  R31,0
000dd0 0fae      	ADD  R26,R30
000dd1 1fbf      	ADC  R27,R31
                +
000dd2 91e0 01e9+LDS R30 , _glcd_state + ( 7 )
                 	__GETB1MN _glcd_state,7
000dd4 e0f0      	LDI  R31,0
000dd5 0fae      	ADD  R26,R30
000dd6 1fbf      	ADC  R27,R31
000dd7 df35      	RCALL _glcd_clipy
                +
000dd8 93e0 01e5+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000dda 9508      	RET
                 ; .FEND
                 _glcd_putchar:
                 ; .FSTART _glcd_putchar
000ddb 93aa      	ST   -Y,R26
000ddc 9721      	SBIW R28,1
000ddd 940e 114a 	CALL SUBOPT_0x22
000ddf 9730      	SBIW R30,0
000de0 f409      	BRNE PC+2
000de1 c055      	RJMP _0x206001F
000de2 81af      	LDD  R26,Y+7
000de3 30aa      	CPI  R26,LOW(0xA)
000de4 f409      	BRNE _0x2060020
000de5 c04f      	RJMP _0x2060021
                 _0x2060020:
000de6 81ef      	LDD  R30,Y+7
000de7 93ea      	ST   -Y,R30
000de8 01de      	MOVW R26,R28
000de9 9617      	ADIW R26,7
000dea df6d      	RCALL _glcd_getcharw_G103
000deb 01af      	MOVW R20,R30
000dec 9730      	SBIW R30,0
000ded f409      	BRNE _0x2060022
000dee c04a      	RJMP _0x2140007
                 _0x2060022:
                +
000def 91e0 01e8+LDS R30 , _glcd_state + ( 6 )
                 	__GETB1MN _glcd_state,6
000df1 81ae      	LDD  R26,Y+6
000df2 0fea      	ADD  R30,R26
000df3 2f3e      	MOV  R19,R30
                +
000df4 91a0 01e4+LDS R26 , _glcd_state + ( 2 )
                 	__GETB2MN _glcd_state,2
000df6 27bb      	CLR  R27
000df7 e0f0      	LDI  R31,0
000df8 0fea      	ADD  R30,R26
000df9 1ffb      	ADC  R31,R27
000dfa 018f      	MOVW R16,R30
                +
000dfb 3801     +CPI R16 , LOW ( 129 )
000dfc e0e0     +LDI R30 , HIGH ( 129 )
000dfd 071e     +CPC R17 , R30
                 	__CPWRN 16,17,129
000dfe f018      	BRLO _0x2060023
000dff 2f03      	MOV  R16,R19
000e00 2711      	CLR  R17
000e01 dfc5      	RCALL _glcd_new_line_G103
                 _0x2060023:
                +
000e02 91e0 01e4+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
000e04 93ea      	ST   -Y,R30
                +
000e05 91e0 01e5+LDS R30 , _glcd_state + ( 3 )
                 	__GETB1MN _glcd_state,3
000e07 93ea      	ST   -Y,R30
000e08 85e8      	LDD  R30,Y+8
000e09 93ea      	ST   -Y,R30
000e0a 940e 1156 	CALL SUBOPT_0x24
000e0c 93ea      	ST   -Y,R30
000e0d e0e1      	LDI  R30,LOW(1)
000e0e 93ea      	ST   -Y,R30
000e0f 935a      	ST   -Y,R21
000e10 934a      	ST   -Y,R20
000e11 e0a7      	LDI  R26,LOW(7)
000e12 dd08      	RCALL _glcd_block
                +
000e13 91e0 01e4+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
000e15 81ae      	LDD  R26,Y+6
000e16 0fea      	ADD  R30,R26
000e17 93ea      	ST   -Y,R30
                +
000e18 91e0 01e5+LDS R30 , _glcd_state + ( 3 )
                 	__GETB1MN _glcd_state,3
000e1a 93ea      	ST   -Y,R30
                +
000e1b 91e0 01e8+LDS R30 , _glcd_state + ( 6 )
                 	__GETB1MN _glcd_state,6
000e1d 93ea      	ST   -Y,R30
000e1e 940e 1156 	CALL SUBOPT_0x24
000e20 940e 115d 	CALL SUBOPT_0x25
                +
000e22 91e0 01e4+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
000e24 93ea      	ST   -Y,R30
                +
000e25 91a0 01e5+LDS R26 , _glcd_state + ( 3 )
                 	__GETB2MN _glcd_state,3
000e27 940e 1156 	CALL SUBOPT_0x24
000e29 0fea      	ADD  R30,R26
000e2a 93ea      	ST   -Y,R30
000e2b 933a      	ST   -Y,R19
                +
000e2c 91e0 01e9+LDS R30 , _glcd_state + ( 7 )
                 	__GETB1MN _glcd_state,7
000e2e 940e 115d 	CALL SUBOPT_0x25
000e30 e8e0      	LDI  R30,LOW(128)
000e31 e0f0      	LDI  R31,HIGH(128)
000e32 17e0      	CP   R30,R16
000e33 07f1      	CPC  R31,R17
000e34 f411      	BRNE _0x2060024
                 _0x2060021:
000e35 df91      	RCALL _glcd_new_line_G103
000e36 c002      	RJMP _0x2140007
                 _0x2060024:
                 _0x206001F:
                +
000e37 9300 01e4+STS _glcd_state + ( 2 ) , R16
                 	__PUTBMRN _glcd_state,2,16
                 _0x2140007:
000e39 940e 123f 	CALL __LOADLOCR6
000e3b 9628      	ADIW R28,8
000e3c 9508      	RET
                 ; .FEND
                 _glcd_outtext:
                 ; .FSTART _glcd_outtext
000e3d 93ba      	ST   -Y,R27
000e3e 93aa      	ST   -Y,R26
000e3f 931a      	ST   -Y,R17
                 _0x206002E:
000e40 940e 10b2 	CALL SUBOPT_0xE
000e42 f019      	BREQ _0x2060030
000e43 2fa1      	MOV  R26,R17
000e44 df96      	RCALL _glcd_putchar
000e45 cffa      	RJMP _0x206002E
                 _0x2060030:
000e46 8118      	LDD  R17,Y+0
000e47 940c 100e 	JMP  _0x2140002
                 ; .FEND
                 _glcd_putimagef:
                 ; .FSTART _glcd_putimagef
000e49 93aa      	ST   -Y,R26
000e4a 940e 123a 	CALL __SAVELOCR4
000e4c 81ac      	LDD  R26,Y+4
000e4d 30a5      	CPI  R26,LOW(0x5)
000e4e f500      	BRSH _0x2060038
000e4f 81ed      	LDD  R30,Y+5
000e50 81fe      	LDD  R31,Y+5+1
000e51 9105      	LPM  R16,Z+
000e52 940e 1167 	CALL SUBOPT_0x26
000e54 9115      	LPM  R17,Z+
000e55 940e 1167 	CALL SUBOPT_0x26
000e57 9125      	LPM  R18,Z+
000e58 940e 1167 	CALL SUBOPT_0x26
000e5a 9135      	LPM  R19,Z+
000e5b 83ed      	STD  Y+5,R30
000e5c 83fe      	STD  Y+5+1,R31
000e5d 85e8      	LDD  R30,Y+8
000e5e 93ea      	ST   -Y,R30
000e5f 85e8      	LDD  R30,Y+8
000e60 93ea      	ST   -Y,R30
000e61 930a      	ST   -Y,R16
000e62 932a      	ST   -Y,R18
000e63 e0e1      	LDI  R30,LOW(1)
000e64 93ea      	ST   -Y,R30
000e65 85ea      	LDD  R30,Y+10
000e66 85fb      	LDD  R31,Y+10+1
000e67 93fa      	ST   -Y,R31
000e68 93ea      	ST   -Y,R30
000e69 85ab      	LDD  R26,Y+11
000e6a dcb0      	RCALL _glcd_block
000e6b 930a      	ST   -Y,R16
000e6c 2fa2      	MOV  R26,R18
000e6d debe      	RCALL _glcd_imagesize
000e6e c004      	RJMP _0x2140006
                 _0x2060038:
                +
000e6f e0e0     +LDI R30 , LOW ( 0x0 )
000e70 e0f0     +LDI R31 , HIGH ( 0x0 )
000e71 e060     +LDI R22 , BYTE3 ( 0x0 )
000e72 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
                 _0x2140006:
000e73 940e 1241 	CALL __LOADLOCR4
000e75 9629      	ADIW R28,9
000e76 9508      	RET
                 ; .FEND
                 _glcd_putpixelm_G103:
                 ; .FSTART _glcd_putpixelm_G103
000e77 93aa      	ST   -Y,R26
000e78 81ea      	LDD  R30,Y+2
000e79 93ea      	ST   -Y,R30
000e7a 81ea      	LDD  R30,Y+2
000e7b 93ea      	ST   -Y,R30
                +
000e7c 91e0 01eb+LDS R30 , _glcd_state + ( 9 )
                 	__GETB1MN _glcd_state,9
000e7e 81aa      	LDD  R26,Y+2
000e7f 23ea      	AND  R30,R26
000e80 f019      	BREQ _0x206003E
000e81 91e0 01e2 	LDS  R30,_glcd_state
000e83 c002      	RJMP _0x206003F
                 _0x206003E:
                +
000e84 91e0 01e3+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
                 _0x206003F:
000e86 2fae      	MOV  R26,R30
000e87 dc31      	RCALL _glcd_putpixel
000e88 81e8      	LD   R30,Y
000e89 0fee      	LSL  R30
000e8a 83e8      	ST   Y,R30
000e8b 30e0      	CPI  R30,0
000e8c f411      	BRNE _0x2060041
000e8d e0e1      	LDI  R30,LOW(1)
000e8e 83e8      	ST   Y,R30
                 _0x2060041:
000e8f 81e8      	LD   R30,Y
000e90 940c 100e 	JMP  _0x2140002
                 ; .FEND
                 _glcd_moveto:
                 ; .FSTART _glcd_moveto
000e92 93aa      	ST   -Y,R26
000e93 81a9      	LDD  R26,Y+1
000e94 27bb      	CLR  R27
000e95 de62      	RCALL _glcd_clipx
                +
000e96 93e0 01e4+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
000e98 81a8      	LD   R26,Y
000e99 27bb      	CLR  R27
000e9a de72      	RCALL _glcd_clipy
                +
000e9b 93e0 01e5+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000e9d 940c 0fc7 	JMP  _0x2140003
                 ; .FEND
                 _glcd_line:
                 ; .FSTART _glcd_line
000e9f 93aa      	ST   -Y,R26
000ea0 972b      	SBIW R28,11
000ea1 940e 1238 	CALL __SAVELOCR6
000ea3 89ac      	LDD  R26,Y+20
000ea4 27bb      	CLR  R27
000ea5 de52      	RCALL _glcd_clipx
000ea6 8bec      	STD  Y+20,R30
000ea7 89aa      	LDD  R26,Y+18
000ea8 27bb      	CLR  R27
000ea9 de4e      	RCALL _glcd_clipx
000eaa 8bea      	STD  Y+18,R30
000eab 89ab      	LDD  R26,Y+19
000eac 27bb      	CLR  R27
000ead de5f      	RCALL _glcd_clipy
000eae 8beb      	STD  Y+19,R30
000eaf 89a9      	LDD  R26,Y+17
000eb0 27bb      	CLR  R27
000eb1 de5b      	RCALL _glcd_clipy
000eb2 8be9      	STD  Y+17,R30
000eb3 89ea      	LDD  R30,Y+18
                +
000eb4 93e0 01e4+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
000eb6 89e9      	LDD  R30,Y+17
                +
000eb7 93e0 01e5+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000eb9 e0e1      	LDI  R30,LOW(1)
000eba 87e8      	STD  Y+8,R30
000ebb 89e9      	LDD  R30,Y+17
000ebc 89ab      	LDD  R26,Y+19
000ebd 17ea      	CP   R30,R26
000ebe f571      	BRNE _0x2060042
000ebf 891c      	LDD  R17,Y+20
000ec0 89aa      	LDD  R26,Y+18
000ec1 171a      	CP   R17,R26
000ec2 f431      	BRNE _0x2060043
000ec3 931a      	ST   -Y,R17
000ec4 89ec      	LDD  R30,Y+20
000ec5 93ea      	ST   -Y,R30
000ec6 e0a1      	LDI  R26,LOW(1)
000ec7 dfaf      	RCALL _glcd_putpixelm_G103
000ec8 c0c8      	RJMP _0x2140005
                 _0x2060043:
000ec9 89aa      	LDD  R26,Y+18
000eca 171a      	CP   R17,R26
000ecb f430      	BRSH _0x2060044
000ecc 89ea      	LDD  R30,Y+18
000ecd 1be1      	SUB  R30,R17
000ece 2f0e      	MOV  R16,R30
                +
000ecf e041     +LDI R20 , LOW ( 1 )
000ed0 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
000ed1 c006      	RJMP _0x2060045
                 _0x2060044:
000ed2 89aa      	LDD  R26,Y+18
000ed3 2fe1      	MOV  R30,R17
000ed4 1bea      	SUB  R30,R26
000ed5 2f0e      	MOV  R16,R30
                +
000ed6 ef4f     +LDI R20 , LOW ( - 1 )
000ed7 ef5f     +LDI R21 , HIGH ( - 1 )
                 	__GETWRN 20,21,-1
                 _0x2060045:
                 _0x2060047:
000ed8 893b      	LDD  R19,Y+19
000ed9 e0e0      	LDI  R30,LOW(0)
000eda 83ee      	STD  Y+6,R30
                 _0x2060049:
000edb 940e 116a 	CALL SUBOPT_0x27
000edd f438      	BRSH _0x206004B
000ede 931a      	ST   -Y,R17
000edf 933a      	ST   -Y,R19
000ee0 9533      	INC  R19
000ee1 85aa      	LDD  R26,Y+10
000ee2 df94      	RCALL _glcd_putpixelm_G103
000ee3 83ef      	STD  Y+7,R30
000ee4 cff6      	RJMP _0x2060049
                 _0x206004B:
000ee5 81ef      	LDD  R30,Y+7
000ee6 87e8      	STD  Y+8,R30
000ee7 0f14      	ADD  R17,R20
000ee8 2fe0      	MOV  R30,R16
000ee9 5001      	SUBI R16,1
000eea 30e0      	CPI  R30,0
000eeb f761      	BRNE _0x2060047
000eec c0a4      	RJMP _0x206004C
                 _0x2060042:
000eed 89ea      	LDD  R30,Y+18
000eee 89ac      	LDD  R26,Y+20
000eef 17ea      	CP   R30,R26
000ef0 f539      	BRNE _0x206004D
000ef1 893b      	LDD  R19,Y+19
000ef2 89a9      	LDD  R26,Y+17
000ef3 173a      	CP   R19,R26
000ef4 f430      	BRSH _0x206004E
000ef5 89e9      	LDD  R30,Y+17
000ef6 1be3      	SUB  R30,R19
000ef7 2f2e      	MOV  R18,R30
000ef8 e0e1      	LDI  R30,LOW(1)
000ef9 e0f0      	LDI  R31,HIGH(1)
000efa c006      	RJMP _0x206011B
                 _0x206004E:
000efb 89a9      	LDD  R26,Y+17
000efc 2fe3      	MOV  R30,R19
000efd 1bea      	SUB  R30,R26
000efe 2f2e      	MOV  R18,R30
000eff efef      	LDI  R30,LOW(65535)
000f00 efff      	LDI  R31,HIGH(65535)
                 _0x206011B:
000f01 87ed      	STD  Y+13,R30
000f02 87fe      	STD  Y+13+1,R31
                 _0x2060051:
000f03 891c      	LDD  R17,Y+20
000f04 e0e0      	LDI  R30,LOW(0)
000f05 83ee      	STD  Y+6,R30
                 _0x2060053:
000f06 940e 116a 	CALL SUBOPT_0x27
000f08 f430      	BRSH _0x2060055
000f09 931a      	ST   -Y,R17
000f0a 9513      	INC  R17
000f0b 940e 1172 	CALL SUBOPT_0x28
000f0d 83ef      	STD  Y+7,R30
000f0e cff7      	RJMP _0x2060053
                 _0x2060055:
000f0f 81ef      	LDD  R30,Y+7
000f10 87e8      	STD  Y+8,R30
000f11 85ed      	LDD  R30,Y+13
000f12 0f3e      	ADD  R19,R30
000f13 2fe2      	MOV  R30,R18
000f14 5021      	SUBI R18,1
000f15 30e0      	CPI  R30,0
000f16 f761      	BRNE _0x2060051
000f17 c079      	RJMP _0x2060056
                 _0x206004D:
000f18 e0e0      	LDI  R30,LOW(0)
000f19 83ee      	STD  Y+6,R30
                 _0x2060057:
000f1a 940e 116a 	CALL SUBOPT_0x27
000f1c f008      	BRLO PC+2
000f1d c073      	RJMP _0x2060059
000f1e 891c      	LDD  R17,Y+20
000f1f 893b      	LDD  R19,Y+19
000f20 e0e1      	LDI  R30,LOW(1)
000f21 2f2e      	MOV  R18,R30
000f22 2f0e      	MOV  R16,R30
000f23 89aa      	LDD  R26,Y+18
000f24 27bb      	CLR  R27
000f25 89ec      	LDD  R30,Y+20
000f26 e0f0      	LDI  R31,0
000f27 1bae      	SUB  R26,R30
000f28 0bbf      	SBC  R27,R31
000f29 01ad      	MOVW R20,R26
000f2a 2355      	TST  R21
000f2b f42a      	BRPL _0x206005A
000f2c ef0f      	LDI  R16,LOW(255)
000f2d 01fa      	MOVW R30,R20
000f2e 940e 1192 	CALL __ANEGW1
000f30 01af      	MOVW R20,R30
                 _0x206005A:
000f31 01fa      	MOVW R30,R20
000f32 0fee      	LSL  R30
000f33 1fff      	ROL  R31
000f34 87ef      	STD  Y+15,R30
000f35 8bf8      	STD  Y+15+1,R31
000f36 89a9      	LDD  R26,Y+17
000f37 27bb      	CLR  R27
000f38 89eb      	LDD  R30,Y+19
000f39 e0f0      	LDI  R31,0
000f3a 1bae      	SUB  R26,R30
000f3b 0bbf      	SBC  R27,R31
000f3c 87ad      	STD  Y+13,R26
000f3d 87be      	STD  Y+13+1,R27
000f3e 85ae      	LDD  R26,Y+14
000f3f 23aa      	TST  R26
000f40 f43a      	BRPL _0x206005B
000f41 ef2f      	LDI  R18,LOW(255)
000f42 85ed      	LDD  R30,Y+13
000f43 85fe      	LDD  R31,Y+13+1
000f44 940e 1192 	CALL __ANEGW1
000f46 87ed      	STD  Y+13,R30
000f47 87fe      	STD  Y+13+1,R31
                 _0x206005B:
000f48 85ed      	LDD  R30,Y+13
000f49 85fe      	LDD  R31,Y+13+1
000f4a 0fee      	LSL  R30
000f4b 1fff      	ROL  R31
000f4c 87eb      	STD  Y+11,R30
000f4d 87fc      	STD  Y+11+1,R31
000f4e 931a      	ST   -Y,R17
000f4f 933a      	ST   -Y,R19
000f50 e0a1      	LDI  R26,LOW(1)
000f51 df25      	RCALL _glcd_putpixelm_G103
000f52 87e8      	STD  Y+8,R30
000f53 e0e0      	LDI  R30,LOW(0)
000f54 87e9      	STD  Y+9,R30
000f55 87ea      	STD  Y+9+1,R30
000f56 85ad      	LDD  R26,Y+13
000f57 85be      	LDD  R27,Y+13+1
000f58 174a      	CP   R20,R26
000f59 075b      	CPC  R21,R27
000f5a f0bc      	BRLT _0x206005C
                 _0x206005E:
000f5b 0f10      	ADD  R17,R16
000f5c 85eb      	LDD  R30,Y+11
000f5d 85fc      	LDD  R31,Y+11+1
000f5e 940e 1176 	CALL SUBOPT_0x29
000f60 85a9      	LDD  R26,Y+9
000f61 85ba      	LDD  R27,Y+9+1
000f62 174a      	CP   R20,R26
000f63 075b      	CPC  R21,R27
000f64 f42c      	BRGE _0x2060060
000f65 0f32      	ADD  R19,R18
000f66 85af      	LDD  R26,Y+15
000f67 89b8      	LDD  R27,Y+15+1
000f68 940e 117d 	CALL SUBOPT_0x2A
                 _0x2060060:
000f6a 931a      	ST   -Y,R17
000f6b 940e 1172 	CALL SUBOPT_0x28
000f6d 87e8      	STD  Y+8,R30
000f6e 89ea      	LDD  R30,Y+18
000f6f 17e1      	CP   R30,R17
000f70 f751      	BRNE _0x206005E
000f71 c018      	RJMP _0x2060061
                 _0x206005C:
                 _0x2060063:
000f72 0f32      	ADD  R19,R18
000f73 85ef      	LDD  R30,Y+15
000f74 89f8      	LDD  R31,Y+15+1
000f75 940e 1176 	CALL SUBOPT_0x29
000f77 85ed      	LDD  R30,Y+13
000f78 85fe      	LDD  R31,Y+13+1
000f79 85a9      	LDD  R26,Y+9
000f7a 85ba      	LDD  R27,Y+9+1
000f7b 17ea      	CP   R30,R26
000f7c 07fb      	CPC  R31,R27
000f7d f42c      	BRGE _0x2060065
000f7e 0f10      	ADD  R17,R16
000f7f 85ab      	LDD  R26,Y+11
000f80 85bc      	LDD  R27,Y+11+1
000f81 940e 117d 	CALL SUBOPT_0x2A
                 _0x2060065:
000f83 931a      	ST   -Y,R17
000f84 940e 1172 	CALL SUBOPT_0x28
000f86 87e8      	STD  Y+8,R30
000f87 89e9      	LDD  R30,Y+17
000f88 17e3      	CP   R30,R19
000f89 f741      	BRNE _0x2060063
                 _0x2060061:
000f8a 89eb      	LDD  R30,Y+19
000f8b 5fef      	SUBI R30,-LOW(1)
000f8c 8beb      	STD  Y+19,R30
000f8d 89e9      	LDD  R30,Y+17
000f8e 5fef      	SUBI R30,-LOW(1)
000f8f 8be9      	STD  Y+17,R30
000f90 cf89      	RJMP _0x2060057
                 _0x2060059:
                 _0x2060056:
                 _0x206004C:
                 _0x2140005:
000f91 940e 123f 	CALL __LOADLOCR6
000f93 9665      	ADIW R28,21
000f94 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000f95 93ba      	ST   -Y,R27
000f96 93aa      	ST   -Y,R26
000f97 81b9          ldd  r27,y+1
000f98 81a8          ld   r26,y
000f99 9610          adiw r26,0
000f9a f031          breq memset1
000f9b 81fc          ldd  r31,y+4
000f9c 81eb          ldd  r30,y+3
000f9d 816a          ldd  r22,y+2
                 memset0:
000f9e 9361          st   z+,r22
000f9f 9711          sbiw r26,1
000fa0 f7e9          brne memset0
                 memset1:
000fa1 81eb          ldd  r30,y+3
000fa2 81fc          ldd  r31,y+4
                 _0x2140004:
000fa3 9625      	ADIW R28,5
000fa4 9508      	RET
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000fa5 93ba      	ST   -Y,R27
000fa6 93aa      	ST   -Y,R26
000fa7 91a9          ld   r26,y+
000fa8 91b9          ld   r27,y+
000fa9 27ee          clr  r30
000faa 27ff          clr  r31
                 strlen0:
000fab 916d          ld   r22,x+
000fac 2366          tst  r22
000fad f011          breq strlen1
000fae 9631          adiw r30,1
000faf cffb          rjmp strlen0
                 strlen1:
000fb0 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000fb1 93ba      	ST   -Y,R27
000fb2 93aa      	ST   -Y,R26
000fb3 27aa          clr  r26
000fb4 27bb          clr  r27
000fb5 91e9          ld   r30,y+
000fb6 91f9          ld   r31,y+
                 strlenf0:
000fb7 9005      	lpm  r0,z+
000fb8 2000          tst  r0
000fb9 f011          breq strlenf1
000fba 9611          adiw r26,1
000fbb cffb          rjmp strlenf0
                 strlenf1:
000fbc 01fd          movw r30,r26
000fbd 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _glcd_getmask:
                 ; .FSTART _glcd_getmask
000fbe 93aa      	ST   -Y,R26
000fbf 81e8      	LD   R30,Y
000fc0 e0f0      	LDI  R31,0
000fc1 5bee      	SUBI R30,LOW(-__glcd_mask*2)
000fc2 4ffa      	SBCI R31,HIGH(-__glcd_mask*2)
000fc3 91a4      	LPM  R26,Z
000fc4 81e9      	LDD  R30,Y+1
000fc5 940e 1196 	CALL __LSLB12
                 _0x2140003:
000fc7 9622      	ADIW R28,2
000fc8 9508      	RET
                 ; .FEND
                 _glcd_mappixcolor1bit:
                 ; .FSTART _glcd_mappixcolor1bit
000fc9 93aa      	ST   -Y,R26
000fca 931a      	ST   -Y,R17
000fcb 81e9      	LDD  R30,Y+1
000fcc 30e7      	CPI  R30,LOW(0x7)
000fcd f011      	BREQ _0x2120007
000fce 30ea      	CPI  R30,LOW(0xA)
000fcf f419      	BRNE _0x2120008
                 _0x2120007:
000fd0 9110 01e2 	LDS  R17,_glcd_state
000fd2 c009      	RJMP _0x2120009
                 _0x2120008:
000fd3 30e9      	CPI  R30,LOW(0x9)
000fd4 f419      	BRNE _0x212000B
                +
000fd5 9110 01e3+LDS R17 , _glcd_state + ( 1 )
                 	__GETBRMN 17,_glcd_state,1
000fd7 c004      	RJMP _0x2120009
                 _0x212000B:
000fd8 30e8      	CPI  R30,LOW(0x8)
000fd9 f4a1      	BRNE _0x2120005
                +
000fda 9110 01f2+LDS R17 , _glcd_state + ( 16 )
                 	__GETBRMN 17,_glcd_state,16
                 _0x2120009:
                +
000fdc 91e0 01e3+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
000fde 30e0      	CPI  R30,0
000fdf f049      	BREQ _0x212000E
000fe0 3010      	CPI  R17,0
000fe1 f019      	BREQ _0x212000F
000fe2 efef      	LDI  R30,LOW(255)
000fe3 8118      	LDD  R17,Y+0
000fe4 c029      	RJMP _0x2140002
                 _0x212000F:
000fe5 81ea      	LDD  R30,Y+2
000fe6 95e0      	COM  R30
000fe7 8118      	LDD  R17,Y+0
000fe8 c025      	RJMP _0x2140002
                 _0x212000E:
000fe9 3010      	CPI  R17,0
000fea f419      	BRNE _0x2120011
000feb e0e0      	LDI  R30,LOW(0)
000fec 8118      	LDD  R17,Y+0
000fed c020      	RJMP _0x2140002
                 _0x2120011:
                 _0x2120005:
000fee 81ea      	LDD  R30,Y+2
000fef 8118      	LDD  R17,Y+0
000ff0 c01d      	RJMP _0x2140002
                 ; .FEND
                 _glcd_readmem:
                 ; .FSTART _glcd_readmem
000ff1 93ba      	ST   -Y,R27
000ff2 93aa      	ST   -Y,R26
000ff3 81ea      	LDD  R30,Y+2
000ff4 30e1      	CPI  R30,LOW(0x1)
000ff5 f421      	BRNE _0x2120015
000ff6 81e8      	LD   R30,Y
000ff7 81f9      	LDD  R31,Y+1
000ff8 91e4      	LPM  R30,Z
000ff9 c014      	RJMP _0x2140002
                 _0x2120015:
000ffa 30e2      	CPI  R30,LOW(0x2)
000ffb f429      	BRNE _0x2120016
000ffc 81a8      	LD   R26,Y
000ffd 81b9      	LDD  R27,Y+1
000ffe 940e 1217 	CALL __EEPROMRDB
001000 c00d      	RJMP _0x2140002
                 _0x2120016:
001001 30e3      	CPI  R30,LOW(0x3)
001002 f441      	BRNE _0x2120018
001003 81a8      	LD   R26,Y
001004 81b9      	LDD  R27,Y+1
                +
001005 91e0 01fb+LDS R30 , _glcd_state + ( 25 )
001007 91f0 01fc+LDS R31 , _glcd_state + ( 25 ) + 1
001009 9509     +ICALL
                 	__CALL1MN _glcd_state,25
00100a c003      	RJMP _0x2140002
                 _0x2120018:
00100b 81a8      	LD   R26,Y
00100c 81b9      	LDD  R27,Y+1
00100d 91ec      	LD   R30,X
                 _0x2140002:
00100e 9623      	ADIW R28,3
00100f 9508      	RET
                 ; .FEND
                 _glcd_writemem:
                 ; .FSTART _glcd_writemem
001010 93aa      	ST   -Y,R26
001011 81eb      	LDD  R30,Y+3
001012 30e0      	CPI  R30,0
001013 f429      	BRNE _0x212001C
001014 81e8      	LD   R30,Y
001015 81a9      	LDD  R26,Y+1
001016 81ba      	LDD  R27,Y+1+1
001017 93ec      	ST   X,R30
001018 c014      	RJMP _0x212001B
                 _0x212001C:
001019 30e2      	CPI  R30,LOW(0x2)
00101a f431      	BRNE _0x212001D
00101b 81e8      	LD   R30,Y
00101c 81a9      	LDD  R26,Y+1
00101d 81ba      	LDD  R27,Y+1+1
00101e 940e 1223 	CALL __EEPROMWRB
001020 c00c      	RJMP _0x212001B
                 _0x212001D:
001021 30e3      	CPI  R30,LOW(0x3)
001022 f451      	BRNE _0x212001B
001023 81e9      	LDD  R30,Y+1
001024 81fa      	LDD  R31,Y+1+1
001025 93fa      	ST   -Y,R31
001026 93ea      	ST   -Y,R30
001027 81aa      	LDD  R26,Y+2
                +
001028 91e0 01fd+LDS R30 , _glcd_state + ( 27 )
00102a 91f0 01fe+LDS R31 , _glcd_state + ( 27 ) + 1
00102c 9509     +ICALL
                 	__CALL1MN _glcd_state,27
                 _0x212001B:
                 _0x2140001:
00102d 9624      	ADIW R28,4
00102e 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _adc_data:
0001d8           	.BYTE 0x2
                 _data_spi:
0001da           	.BYTE 0x4
                 _num_data_spi:
0001de           	.BYTE 0x1
                 _twi_tx_index:
0001df           	.BYTE 0x1
                 _twi_rx_index:
0001e0           	.BYTE 0x1
                 _twi_result:
0001e1           	.BYTE 0x1
                 _glcd_state:
0001e2           	.BYTE 0x1D
                 _rx_buffer:
0001ff           	.BYTE 0x100
                 _tx_buffer:
0002ff           	.BYTE 0x100
                 _input_index_S0060000000:
0003ff           	.BYTE 0x1
                 _hx:
000400           	.BYTE 0xD
                 _hy:
00040d           	.BYTE 0xD
                 _xold:
00041a           	.BYTE 0x1
                 _yold:
00041b           	.BYTE 0x1
                 _xmold:
00041c           	.BYTE 0x1
                 _ymold:
00041d           	.BYTE 0x1
                 _hourd:
00041e           	.BYTE 0x1
                 _mind:
00041f           	.BYTE 0x1
                 _secd:
000420           	.BYTE 0x1
                 _count_clock:
000421           	.BYTE 0x1
                 _slave_address_G101:
000422           	.BYTE 0x1
                 _twi_tx_buffer_G101:
000423           	.BYTE 0x2
                 _bytes_to_tx_G101:
000425           	.BYTE 0x1
                 _twi_rx_buffer_G101:
000426           	.BYTE 0x2
                 _bytes_to_rx_G101:
000428           	.BYTE 0x1
                 _twi_rx_buffer_size_G101:
000429           	.BYTE 0x1
                 _twi_slave_rx_handler_G101:
00042a           	.BYTE 0x2
                 _twi_slave_tx_handler_G101:
00042c           	.BYTE 0x2
                 _ks0108_coord_G102:
00042e           	.BYTE 0x3
                 __seed_G106:
000431           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00102f 01fe      	MOVW R30,R28
001030 93fa      	ST   -Y,R31
001031 93ea      	ST   -Y,R30
001032 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
001033 27ff      	CLR  R31
001034 2766      	CLR  R22
001035 2777      	CLR  R23
001036 940e 120b 	CALL __PUTPARD1
001038 e084      	LDI  R24,4
001039 940e 0814 	CALL _sprintf
00103b 9628      	ADIW R28,8
00103c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2:
00103d 920a      	ST   -Y,R0
00103e 921a      	ST   -Y,R1
00103f 92fa      	ST   -Y,R15
001040 936a      	ST   -Y,R22
001041 937a      	ST   -Y,R23
001042 938a      	ST   -Y,R24
001043 939a      	ST   -Y,R25
001044 93aa      	ST   -Y,R26
001045 93ba      	ST   -Y,R27
001046 93ea      	ST   -Y,R30
001047 93fa      	ST   -Y,R31
001048 b7ef      	IN   R30,SREG
001049 93ea      	ST   -Y,R30
00104a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x3:
00104b 91e9      	LD   R30,Y+
00104c bfef      	OUT  SREG,R30
00104d 91f9      	LD   R31,Y+
00104e 91e9      	LD   R30,Y+
00104f 91b9      	LD   R27,Y+
001050 91a9      	LD   R26,Y+
001051 9199      	LD   R25,Y+
001052 9189      	LD   R24,Y+
001053 9179      	LD   R23,Y+
001054 9169      	LD   R22,Y+
001055 90f9      	LD   R15,Y+
001056 9019      	LD   R1,Y+
001057 9009      	LD   R0,Y+
001058 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
001059 27ff      	CLR  R31
00105a 2766      	CLR  R22
00105b 2777      	CLR  R23
00105c 940e 120b 	CALL __PUTPARD1
00105e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00105f e0e1      	LDI  R30,LOW(1)
                +
001060 93e0 01ea+STS _glcd_state + ( 8 ) , R30
                 	__PUTB1MN _glcd_state,8
001062 efef      	LDI  R30,LOW(255)
                +
001063 93e0 01eb+STS _glcd_state + ( 9 ) , R30
                 	__PUTB1MN _glcd_state,9
001065 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
001066 e2e0      	LDI  R30,LOW(32)
001067 93ea      	ST   -Y,R30
001068 93ea      	ST   -Y,R30
001069 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x7:
00106a e3ac      	LDI  R26,LOW(_cos6data*2)
00106b e0b4      	LDI  R27,HIGH(_cos6data*2)
00106c e0f0      	LDI  R31,0
00106d 0fee      	LSL  R30
00106e 1fff      	ROL  R31
00106f 0fea      	ADD  R30,R26
001070 1ffb      	ADC  R31,R27
001071 940e 1207 	CALL __GETW1PF
001073 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
001074 e1a3      	LDI  R26,LOW(19)
001075 e0b0      	LDI  R27,HIGH(19)
001076 940e 11d8 	CALL __MULW12
001078 01df      	MOVW R26,R30
001079 e6e4      	LDI  R30,LOW(100)
00107a e0f0      	LDI  R31,HIGH(100)
00107b 940e 11f0 	CALL __DIVW21
00107d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x9:
00107e eba6      	LDI  R26,LOW(_sin6data*2)
00107f e0b4      	LDI  R27,HIGH(_sin6data*2)
001080 e0f0      	LDI  R31,0
001081 0fee      	LSL  R30
001082 1fff      	ROL  R31
001083 0fea      	ADD  R30,R26
001084 1ffb      	ADC  R31,R27
001085 940e 1207 	CALL __GETW1PF
001087 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
001088 e0af      	LDI  R26,LOW(15)
001089 e0b0      	LDI  R27,HIGH(15)
00108a 940e 11d8 	CALL __MULW12
00108c 01df      	MOVW R26,R30
00108d e6e4      	LDI  R30,LOW(100)
00108e e0f0      	LDI  R31,HIGH(100)
00108f 940e 11f0 	CALL __DIVW21
001091 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xB:
001092 81e0      	LD   R30,Z
001093 e0f0      	LDI  R31,0
001094 940e 1210 	CALL __SWAPW12
001096 1bea      	SUB  R30,R26
001097 0bfb      	SBC  R31,R27
001098 01db      	MOVW R26,R22
001099 940e 11d8 	CALL __MULW12
00109b 01df      	MOVW R26,R30
00109c e3ec      	LDI  R30,LOW(60)
00109d e0f0      	LDI  R31,HIGH(60)
00109e 940e 11f0 	CALL __DIVW21
0010a0 0fe8      	ADD  R30,R24
0010a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
0010a2 01db      	MOVW R26,R22
0010a3 940e 11d8 	CALL __MULW12
0010a5 01df      	MOVW R26,R30
0010a6 e6e4      	LDI  R30,LOW(100)
0010a7 e0f0      	LDI  R31,HIGH(100)
0010a8 940e 11f0 	CALL __DIVW21
0010aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
0010ab 93ea      	ST   -Y,R30
0010ac 2fa3      	MOV  R26,R19
0010ad 940e 0d22 	CALL _glcd_clrpixel
0010af 2fe0      	MOV  R30,R16
0010b0 5fef      	SUBI R30,-LOW(1)
0010b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
0010b2 81a9      	LDD  R26,Y+1
0010b3 81ba      	LDD  R27,Y+1+1
0010b4 91ed      	LD   R30,X+
0010b5 83a9      	STD  Y+1,R26
0010b6 83ba      	STD  Y+1+1,R27
0010b7 2f1e      	MOV  R17,R30
0010b8 30e0      	CPI  R30,0
0010b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xF:
0010ba 932a      	ST   -Y,R18
0010bb 85ad      	LDD  R26,Y+13
0010bc 85be      	LDD  R27,Y+13+1
0010bd 85ef      	LDD  R30,Y+15
0010be 89f8      	LDD  R31,Y+15+1
0010bf 9509      	ICALL
0010c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x10:
0010c1 89e8      	LDD  R30,Y+16
0010c2 89f9      	LDD  R31,Y+16+1
0010c3 9734      	SBIW R30,4
0010c4 8be8      	STD  Y+16,R30
0010c5 8bf9      	STD  Y+16+1,R31
0010c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
0010c7 85ad      	LDD  R26,Y+13
0010c8 85be      	LDD  R27,Y+13+1
0010c9 85ef      	LDD  R30,Y+15
0010ca 89f8      	LDD  R31,Y+15+1
0010cb 9509      	ICALL
0010cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x12:
0010cd 89a8      	LDD  R26,Y+16
0010ce 89b9      	LDD  R27,Y+16+1
0010cf 9614      	ADIW R26,4
0010d0 940e 1203 	CALL __GETW1P
0010d2 83ee      	STD  Y+6,R30
0010d3 83ff      	STD  Y+6+1,R31
0010d4 81ae      	LDD  R26,Y+6
0010d5 81bf      	LDD  R27,Y+6+1
0010d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x13:
0010d7 89a8      	LDD  R26,Y+16
0010d8 89b9      	LDD  R27,Y+16+1
0010d9 9614      	ADIW R26,4
0010da 940e 1203 	CALL __GETW1P
0010dc 87ea      	STD  Y+10,R30
0010dd 87fb      	STD  Y+10+1,R31
0010de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
0010df 01de      	MOVW R26,R28
0010e0 961c      	ADIW R26,12
0010e1 940e 118e 	CALL __ADDW2R15
0010e3 940e 1203 	CALL __GETW1P
0010e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x15:
0010e6 98ab      	CBI  0x15,3
0010e7 efef      	LDI  R30,LOW(255)
0010e8 bbea      	OUT  0x1A,R30
0010e9 81e8      	LD   R30,Y
0010ea bbeb      	OUT  0x1B,R30
0010eb 940e 09ad 	CALL _ks0108_enable_G102
0010ed 940c 09b1 	JMP  _ks0108_disable_G102
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
0010ef 95e6      	LSR  R30
0010f0 95e6      	LSR  R30
0010f1 95e6      	LSR  R30
0010f2 2fae      	MOV  R26,R30
0010f3 940c 09ef 	JMP  _ks0108_gotoxp_G102
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
0010f5 940e 0a14 	CALL _ks0108_wrdata_G102
0010f7 940c 09ff 	JMP  _ks0108_nextx_G102
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
0010f9 0fea      	ADD  R30,R26
0010fa 1ffb      	ADC  R31,R27
0010fb 83ee      	STD  Y+6,R30
0010fc 83ff      	STD  Y+6+1,R31
0010fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x19:
0010fe 85ec      	LDD  R30,Y+12
0010ff 93ea      	ST   -Y,R30
001100 81ef      	LDD  R30,Y+7
001101 85f8      	LDD  R31,Y+7+1
001102 9631      	ADIW R30,1
001103 83ef      	STD  Y+7,R30
001104 87f8      	STD  Y+7+1,R31
001105 9731      	SBIW R30,1
001106 93fa      	ST   -Y,R31
001107 93ea      	ST   -Y,R30
001108 e0a0      	LDI  R26,LOW(0)
001109 940c 1010 	JMP  _glcd_writemem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1A:
00110b 85ec      	LDD  R30,Y+12
00110c 93ea      	ST   -Y,R30
00110d 81ef      	LDD  R30,Y+7
00110e 85f8      	LDD  R31,Y+7+1
00110f 9631      	ADIW R30,1
001110 83ef      	STD  Y+7,R30
001111 87f8      	STD  Y+7+1,R31
001112 9731      	SBIW R30,1
001113 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1B:
001114 2766      	CLR  R22
001115 2777      	CLR  R23
001116 01df      	MOVW R26,R30
001117 01cb      	MOVW R24,R22
001118 940c 0ff1 	JMP  _glcd_readmem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
00111a 935a      	ST   -Y,R21
00111b 85aa      	LDD  R26,Y+10
00111c 940c 0fc9 	JMP  _glcd_mappixcolor1bit
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1D:
00111e 930a      	ST   -Y,R16
00111f 9503      	INC  R16
001120 89e8      	LDD  R30,Y+16
001121 93ea      	ST   -Y,R30
001122 935a      	ST   -Y,R21
001123 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
001124 930a      	ST   -Y,R16
001125 9503      	INC  R16
001126 89a8      	LDD  R26,Y+16
001127 940e 0a26 	CALL _ks0108_rdbyte_G102
001129 23e4      	AND  R30,R20
00112a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1F:
00112b 2f5e      	MOV  R21,R30
00112c 85ec      	LDD  R30,Y+12
00112d 93ea      	ST   -Y,R30
00112e 81af      	LDD  R26,Y+7
00112f 85b8      	LDD  R27,Y+7+1
001130 2788      	CLR  R24
001131 2799      	CLR  R25
001132 940e 0ff1 	CALL _glcd_readmem
001134 2e1e      	MOV  R1,R30
001135 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x20:
001136 930a      	ST   -Y,R16
001137 9503      	INC  R16
001138 89e8      	LDD  R30,Y+16
001139 93ea      	ST   -Y,R30
00113a 85ee      	LDD  R30,Y+14
00113b 93ea      	ST   -Y,R30
00113c 85e9      	LDD  R30,Y+9
00113d 85fa      	LDD  R31,Y+9+1
00113e 9631      	ADIW R30,1
00113f 87e9      	STD  Y+9,R30
001140 87fa      	STD  Y+9+1,R31
001141 9731      	SBIW R30,1
001142 cfd1      	RJMP SUBOPT_0x1B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
001143 93ba      	ST   -Y,R27
001144 93aa      	ST   -Y,R26
001145 81a8      	LD   R26,Y
001146 81b9      	LDD  R27,Y+1
001147 940e 1234 	CALL __CPW02
001149 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
00114a 940e 1238 	CALL __SAVELOCR6
                +
00114c 91e0 01e6+LDS R30 , _glcd_state + ( 4 )
00114e 91f0 01e7+LDS R31 , _glcd_state + ( 4 ) + 1
                 	__GETW1MN _glcd_state,4
001150 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
001151 01f8      	MOVW R30,R16
                +
001152 5f0f     +SUBI R16 , LOW ( - 1 )
001153 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
001154 9004      	LPM  R0,Z
001155 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x24:
                +
001156 91e0 01e6+LDS R30 , _glcd_state + ( 4 )
001158 91f0 01e7+LDS R31 , _glcd_state + ( 4 ) + 1
                 	__GETW1MN _glcd_state,4
00115a 9631      	ADIW R30,1
00115b 91e4      	LPM  R30,Z
00115c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x25:
00115d 93ea      	ST   -Y,R30
00115e e0e0      	LDI  R30,LOW(0)
00115f 93ea      	ST   -Y,R30
001160 e0e0      	LDI  R30,LOW(0)
001161 e0f0      	LDI  R31,HIGH(0)
001162 93fa      	ST   -Y,R31
001163 93ea      	ST   -Y,R30
001164 e0a9      	LDI  R26,LOW(9)
001165 940c 0b1b 	JMP  _glcd_block
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
001167 83ed      	STD  Y+5,R30
001168 83fe      	STD  Y+5+1,R31
001169 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x27:
00116a 81ae      	LDD  R26,Y+6
00116b 5faf      	SUBI R26,-LOW(1)
00116c 83ae      	STD  Y+6,R26
00116d 50a1      	SUBI R26,LOW(1)
                +
00116e 91e0 01ea+LDS R30 , _glcd_state + ( 8 )
                 	__GETB1MN _glcd_state,8
001170 17ae      	CP   R26,R30
001171 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
001172 933a      	ST   -Y,R19
001173 85aa      	LDD  R26,Y+10
001174 940c 0e77 	JMP  _glcd_putpixelm_G103
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x29:
001176 85a9      	LDD  R26,Y+9
001177 85ba      	LDD  R27,Y+9+1
001178 0fea      	ADD  R30,R26
001179 1ffb      	ADC  R31,R27
00117a 87e9      	STD  Y+9,R30
00117b 87fa      	STD  Y+9+1,R31
00117c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2A:
00117d 85e9      	LDD  R30,Y+9
00117e 85fa      	LDD  R31,Y+9+1
00117f 1bea      	SUB  R30,R26
001180 0bfb      	SBC  R31,R27
001181 87e9      	STD  Y+9,R30
001182 87fa      	STD  Y+9+1,R31
001183 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
001184 9610      	adiw r26,0
001185 f039      	breq __delay_ms1
                 __delay_ms0:
                +
001186 ed80     +LDI R24 , LOW ( 0x7D0 )
001187 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
001188 9701     +SBIW R24 , 1
001189 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00118a 95a8      	wdr
00118b 9711      	sbiw r26,1
00118c f7c9      	brne __delay_ms0
                 __delay_ms1:
00118d 9508      	ret
                 
                 __ADDW2R15:
00118e 2400      	CLR  R0
00118f 0daf      	ADD  R26,R15
001190 1db0      	ADC  R27,R0
001191 9508      	RET
                 
                 __ANEGW1:
001192 95f1      	NEG  R31
001193 95e1      	NEG  R30
001194 40f0      	SBCI R31,0
001195 9508      	RET
                 
                 __LSLB12:
001196 23ee      	TST  R30
001197 2e0e      	MOV  R0,R30
001198 2fea      	MOV  R30,R26
001199 f019      	BREQ __LSLB12R
                 __LSLB12L:
00119a 0fee      	LSL  R30
00119b 940a      	DEC  R0
00119c f7e9      	BRNE __LSLB12L
                 __LSLB12R:
00119d 9508      	RET
                 
                 __LSRB12:
00119e 23ee      	TST  R30
00119f 2e0e      	MOV  R0,R30
0011a0 2fea      	MOV  R30,R26
0011a1 f019      	BREQ __LSRB12R
                 __LSRB12L:
0011a2 95e6      	LSR  R30
0011a3 940a      	DEC  R0
0011a4 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
0011a5 9508      	RET
                 
                 __CWD1:
0011a6 2f6f      	MOV  R22,R31
0011a7 0f66      	ADD  R22,R22
0011a8 0b66      	SBC  R22,R22
0011a9 2f76      	MOV  R23,R22
0011aa 9508      	RET
                 
                 __EQB12:
0011ab 17ea      	CP   R30,R26
0011ac e0e1      	LDI  R30,1
0011ad f009      	BREQ __EQB12T
0011ae 27ee      	CLR  R30
                 __EQB12T:
0011af 9508      	RET
                 
                 __MULW12U:
0011b0 9ffa      	MUL  R31,R26
0011b1 2df0      	MOV  R31,R0
0011b2 9feb      	MUL  R30,R27
0011b3 0df0      	ADD  R31,R0
0011b4 9fea      	MUL  R30,R26
0011b5 2de0      	MOV  R30,R0
0011b6 0df1      	ADD  R31,R1
0011b7 9508      	RET
                 
                 __MULD12U:
0011b8 9f7a      	MUL  R23,R26
0011b9 2d70      	MOV  R23,R0
0011ba 9f6b      	MUL  R22,R27
0011bb 0d70      	ADD  R23,R0
0011bc 9ff8      	MUL  R31,R24
0011bd 0d70      	ADD  R23,R0
0011be 9fe9      	MUL  R30,R25
0011bf 0d70      	ADD  R23,R0
0011c0 9f6a      	MUL  R22,R26
0011c1 2d60      	MOV  R22,R0
0011c2 0d71      	ADD  R23,R1
0011c3 9ffb      	MUL  R31,R27
0011c4 0d60      	ADD  R22,R0
0011c5 1d71      	ADC  R23,R1
0011c6 9fe8      	MUL  R30,R24
0011c7 0d60      	ADD  R22,R0
0011c8 1d71      	ADC  R23,R1
0011c9 2788      	CLR  R24
0011ca 9ffa      	MUL  R31,R26
0011cb 2df0      	MOV  R31,R0
0011cc 0d61      	ADD  R22,R1
0011cd 1f78      	ADC  R23,R24
0011ce 9feb      	MUL  R30,R27
0011cf 0df0      	ADD  R31,R0
0011d0 1d61      	ADC  R22,R1
0011d1 1f78      	ADC  R23,R24
0011d2 9fea      	MUL  R30,R26
0011d3 2de0      	MOV  R30,R0
0011d4 0df1      	ADD  R31,R1
0011d5 1f68      	ADC  R22,R24
0011d6 1f78      	ADC  R23,R24
0011d7 9508      	RET
                 
                 __MULW12:
0011d8 d01c      	RCALL __CHKSIGNW
0011d9 dfd6      	RCALL __MULW12U
0011da f40e      	BRTC __MULW121
0011db dfb6      	RCALL __ANEGW1
                 __MULW121:
0011dc 9508      	RET
                 
                 __DIVW21U:
0011dd 2400      	CLR  R0
0011de 2411      	CLR  R1
0011df e190      	LDI  R25,16
                 __DIVW21U1:
0011e0 0faa      	LSL  R26
0011e1 1fbb      	ROL  R27
0011e2 1c00      	ROL  R0
0011e3 1c11      	ROL  R1
0011e4 1a0e      	SUB  R0,R30
0011e5 0a1f      	SBC  R1,R31
0011e6 f418      	BRCC __DIVW21U2
0011e7 0e0e      	ADD  R0,R30
0011e8 1e1f      	ADC  R1,R31
0011e9 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0011ea 60a1      	SBR  R26,1
                 __DIVW21U3:
0011eb 959a      	DEC  R25
0011ec f799      	BRNE __DIVW21U1
0011ed 01fd      	MOVW R30,R26
0011ee 01d0      	MOVW R26,R0
0011ef 9508      	RET
                 
                 __DIVW21:
0011f0 d004      	RCALL __CHKSIGNW
0011f1 dfeb      	RCALL __DIVW21U
0011f2 f40e      	BRTC __DIVW211
0011f3 df9e      	RCALL __ANEGW1
                 __DIVW211:
0011f4 9508      	RET
                 
                 __CHKSIGNW:
0011f5 94e8      	CLT
0011f6 fff7      	SBRS R31,7
0011f7 c002      	RJMP __CHKSW1
0011f8 df99      	RCALL __ANEGW1
0011f9 9468      	SET
                 __CHKSW1:
0011fa ffb7      	SBRS R27,7
0011fb c006      	RJMP __CHKSW2
0011fc 95a0      	COM  R26
0011fd 95b0      	COM  R27
0011fe 9611      	ADIW R26,1
0011ff f800      	BLD  R0,0
001200 9403      	INC  R0
001201 fa00      	BST  R0,0
                 __CHKSW2:
001202 9508      	RET
                 
                 __GETW1P:
001203 91ed      	LD   R30,X+
001204 91fc      	LD   R31,X
001205 9711      	SBIW R26,1
001206 9508      	RET
                 
                 __GETW1PF:
001207 9005      	LPM  R0,Z+
001208 91f4      	LPM  R31,Z
001209 2de0      	MOV  R30,R0
00120a 9508      	RET
                 
                 __PUTPARD1:
00120b 937a      	ST   -Y,R23
00120c 936a      	ST   -Y,R22
00120d 93fa      	ST   -Y,R31
00120e 93ea      	ST   -Y,R30
00120f 9508      	RET
                 
                 __SWAPW12:
001210 2e1b      	MOV  R1,R27
001211 2fbf      	MOV  R27,R31
001212 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
001213 2e1a      	MOV  R1,R26
001214 2fae      	MOV  R26,R30
001215 2de1      	MOV  R30,R1
001216 9508      	RET
                 
                 __EEPROMRDB:
001217 99e1      	SBIC EECR,EEWE
001218 cffe      	RJMP __EEPROMRDB
001219 93ff      	PUSH R31
00121a b7ff      	IN   R31,SREG
00121b 94f8      	CLI
00121c bbae      	OUT  EEARL,R26
00121d bbbf      	OUT  EEARH,R27
00121e 9ae0      	SBI  EECR,EERE
00121f b3ed      	IN   R30,EEDR
001220 bfff      	OUT  SREG,R31
001221 91ff      	POP  R31
001222 9508      	RET
                 
                 __EEPROMWRB:
001223 9be1      	SBIS EECR,EEWE
001224 c002      	RJMP __EEPROMWRB1
001225 95a8      	WDR
001226 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
001227 b79f      	IN   R25,SREG
001228 94f8      	CLI
001229 bbae      	OUT  EEARL,R26
00122a bbbf      	OUT  EEARH,R27
00122b 9ae0      	SBI  EECR,EERE
00122c b38d      	IN   R24,EEDR
00122d 17e8      	CP   R30,R24
00122e f019      	BREQ __EEPROMWRB0
00122f bbed      	OUT  EEDR,R30
001230 9ae2      	SBI  EECR,EEMWE
001231 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
001232 bf9f      	OUT  SREG,R25
001233 9508      	RET
                 
                 __CPW02:
001234 2400      	CLR  R0
001235 160a      	CP   R0,R26
001236 060b      	CPC  R0,R27
001237 9508      	RET
                 
                 __SAVELOCR6:
001238 935a      	ST   -Y,R21
                 __SAVELOCR5:
001239 934a      	ST   -Y,R20
                 __SAVELOCR4:
00123a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00123b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00123c 931a      	ST   -Y,R17
00123d 930a      	ST   -Y,R16
00123e 9508      	RET
                 
                 __LOADLOCR6:
00123f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
001240 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001241 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001242 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001243 8119      	LDD  R17,Y+1
001244 8108      	LD   R16,Y
001245 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  59 r1 :  23 r2 :  20 r3 :   0 r4 :   0 r5 :   2 r6 :   2 r7 :   0 
r8 :   2 r9 :   2 r10:   7 r11:   3 r12:   0 r13:   0 r14:   0 r15:   8 
r16: 113 r17: 169 r18:  81 r19:  59 r20:  37 r21:  52 r22:  39 r23:  28 
r24:  37 r25:  14 r26: 461 r27: 146 r28:  52 r29:   1 r30:1168 r31: 268 
x  :  36 y  : 758 z  :  35 
Registers used: 29 out of 35 (82.9%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  28 add   :  45 
adiw  :  59 and   :   9 andi  :  37 asr   :   0 bclr  :   0 bld   :  14 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  63 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  19 
brlt  :   5 brmi  :   1 brne  : 129 brpl  :   3 brsh  :  33 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 229 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   4 cln   :   0 
clr   :  48 cls   :   0 clt   :   6 clv   :   0 clz   :   0 com   :  10 
cp    :  42 cpc   :  15 cpi   : 162 cpse  :   0 dec   :   5 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   8 ijmp  :   0 
in    :  46 inc   :  10 jmp   :  60 ld    :  88 ldd   : 339 ldi   : 330 
lds   : 111 lpm   :  34 lsl   :   9 lsr   :  18 mov   : 144 movw  :  68 
mul   :  14 muls  :   0 mulsu :   0 neg   :   2 nop   :   2 or    :  10 
ori   :  26 out   :  73 pop   :  12 push  :  12 rcall :  65 ret   :  88 
reti  :   6 rjmp  : 200 rol   :   9 ror   :   0 sbc   :   7 sbci  :  18 
sbi   :  22 sbic  :   2 sbis  :   1 sbiw  :  39 sbr   :   1 sbrc  :   4 
sbrs  :  19 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   8 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 272 std   : 106 sts   :  50 sub   :  20 subi  :  84 swap  :   1 
tst   :   8 wdr   :   2 
Instructions used: 73 out of 116 (62.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00248c   7742   1614   9356   16384  57.1%
[.dseg] 0x000060 0x000435      0    725    725    1024  70.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 21 warnings
